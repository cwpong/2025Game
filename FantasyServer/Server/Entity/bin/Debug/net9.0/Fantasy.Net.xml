<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Fantasy-Net</name>
    </assembly>
    <members>
        <member name="T:Fantasy.Assembly.AssemblyInfo">
            <summary>
            AssemblyInfo提供有关程序集和类型的信息
            </summary>
        </member>
        <member name="F:Fantasy.Assembly.AssemblyInfo.AssemblyIdentity">
            <summary>
            唯一标识
            </summary>
        </member>
        <member name="P:Fantasy.Assembly.AssemblyInfo.Assembly">
            <summary>
            获取或设置与此程序集相关联的 <see cref="P:Fantasy.Assembly.AssemblyInfo.Assembly"/> 实例。
            </summary>
        </member>
        <member name="F:Fantasy.Assembly.AssemblyInfo.AssemblyTypeList">
            <summary>
            程序集类型集合，获取一个列表，包含从程序集加载的所有类型。
            </summary>
        </member>
        <member name="F:Fantasy.Assembly.AssemblyInfo.AssemblyTypeGroupList">
            <summary>
            程序集类型分组集合，获取一个分组列表，将接口类型映射到实现这些接口的类型。
            </summary>
        </member>
        <member name="M:Fantasy.Assembly.AssemblyInfo.#ctor(System.Int64)">
            <summary>
            初始化 <see cref="T:Fantasy.Assembly.AssemblyInfo"/> 类的新实例。
            </summary>
            <param name="assemblyIdentity"></param>
        </member>
        <member name="M:Fantasy.Assembly.AssemblyInfo.Load(System.Reflection.Assembly)">
            <summary>
            从指定的程序集加载类型信息并进行分类。
            </summary>
            <param name="assembly">要加载信息的程序集。</param>
        </member>
        <member name="M:Fantasy.Assembly.AssemblyInfo.ReLoad(System.Reflection.Assembly)">
            <summary>
            重新加载程序集的类型信息。
            </summary>
            <param name="assembly"></param>
        </member>
        <member name="M:Fantasy.Assembly.AssemblyInfo.Unload">
            <summary>
            卸载程序集的类型信息。
            </summary>
        </member>
        <member name="T:Fantasy.Assembly.AssemblySystem">
            <summary>
            管理程序集加载和卸载的帮助类。
            </summary>
        </member>
        <member name="M:Fantasy.Assembly.AssemblySystem.InnerInitialize(System.Reflection.Assembly[])">
            <summary>
            初始化 AssemblySystem。（仅限内部）
            </summary>
            <param name="assemblies"></param>
        </member>
        <member name="M:Fantasy.Assembly.AssemblySystem.LoadAssembly(System.Reflection.Assembly,System.Boolean)">
            <summary>
            加载指定的程序集，并触发相应的事件。
            </summary>
            <param name="assembly">要加载的程序集。</param>
            <param name="isCurrentDomain">如果当前Domain中已经存在同名的Assembly,使用Domain中的程序集。</param>
        </member>
        <member name="M:Fantasy.Assembly.AssemblySystem.UnLoadAssembly(System.Reflection.Assembly)">
            <summary>
            卸载程序集
            </summary>
            <param name="assembly"></param>
        </member>
        <member name="M:Fantasy.Assembly.AssemblySystem.Register(System.Object)">
            <summary>
            将AssemblySystem接口的object注册到程序集管理中心
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Fantasy.Assembly.AssemblySystem.UnRegister(System.Object)">
            <summary>
            程序集管理中心卸载注册的Load、ReLoad、UnLoad的接口
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Fantasy.Assembly.AssemblySystem.ForEach">
            <summary>
            获取所有已加载程序集中的所有类型。
            </summary>
            <returns>所有已加载程序集中的类型。</returns>
        </member>
        <member name="M:Fantasy.Assembly.AssemblySystem.ForEach(System.Int64)">
            <summary>
            获取指定程序集中的所有类型。
            </summary>
            <param name="assemblyIdentity">程序集唯一标识。</param>
            <returns>指定程序集中的类型。</returns>
        </member>
        <member name="M:Fantasy.Assembly.AssemblySystem.ForEach(System.Type)">
            <summary>
            获取所有已加载程序集中实现指定类型的所有类型。
            </summary>
            <param name="findType">要查找的基类或接口类型。</param>
            <returns>所有已加载程序集中实现指定类型的类型。</returns>
        </member>
        <member name="M:Fantasy.Assembly.AssemblySystem.ForEach(System.Int64,System.Type)">
            <summary>
            获取指定程序集中实现指定类型的所有类型。
            </summary>
            <param name="assemblyIdentity">程序集唯一标识。</param>
            <param name="findType">要查找的基类或接口类型。</param>
            <returns>指定程序集中实现指定类型的类型。</returns>
        </member>
        <member name="M:Fantasy.Assembly.AssemblySystem.GetAssembly(System.Int64)">
            <summary>
            获取指定程序集的实例。
            </summary>
            <param name="assemblyIdentity">程序集名称。</param>
            <returns>指定程序集的实例，如果未加载则返回 null。</returns>
        </member>
        <member name="P:Fantasy.Assembly.AssemblySystem.ForEachAssembly">
            <summary>
            获取当前框架注册的Assembly
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fantasy.Assembly.AssemblySystem.AssemblyIdentity(System.Reflection.Assembly)">
            <summary>
            根据Assembly的强命名计算唯一标识。
            </summary>
            <param name="assembly"></param>
            <returns></returns>
        </member>
        <member name="M:Fantasy.Assembly.AssemblySystem.Dispose">
            <summary>
            释放资源，卸载所有加载的程序集。
            </summary>
        </member>
        <member name="T:Fantasy.Assembly.IAssembly">
            <summary>
            实现这个接口、会再程序集首次加载、卸载、重载的时候调用
            </summary>
        </member>
        <member name="M:Fantasy.Assembly.IAssembly.Load(System.Int64)">
            <summary>
            程序集加载时调用
            </summary>
            <param name="assemblyIdentity">程序集标识</param>
        </member>
        <member name="M:Fantasy.Assembly.IAssembly.ReLoad(System.Int64)">
            <summary>
            程序集重新加载的时候调用
            </summary>
            <param name="assemblyIdentity">程序集标识</param>
        </member>
        <member name="M:Fantasy.Assembly.IAssembly.OnUnLoad(System.Int64)">
            <summary>
            卸载的时候调用
            </summary>
            <param name="assemblyIdentity">程序集标识</param>
        </member>
        <member name="T:Fantasy.Network.Benchmark.Handler.BenchmarkRequestHandler">
            <summary>
            BenchmarkRequestHandler
            </summary>
        </member>
        <member name="M:Fantasy.Network.Benchmark.Handler.BenchmarkRequestHandler.Run(Fantasy.Network.Session,Fantasy.InnerMessage.BenchmarkRequest,Fantasy.InnerMessage.BenchmarkResponse,System.Action)">
            <summary>
            Run方法
            </summary>
            <param name="session"></param>
            <param name="request"></param>
            <param name="response"></param>
            <param name="reply"></param>
        </member>
        <member name="T:Fantasy.Network.InnerErrorCode">
            <summary>
            定义 Fantasy 框架中的内部错误代码。
            </summary>
        </member>
        <member name="F:Fantasy.Network.InnerErrorCode.ErrRpcFail">
            <summary>
            表示 Rpc 消息发送失败的错误代码。
            </summary>
        </member>
        <member name="F:Fantasy.Network.InnerErrorCode.ErrNotFoundRoute">
            <summary>
            表示未找到 Route 消息的错误代码。
            </summary>
        </member>
        <member name="F:Fantasy.Network.InnerErrorCode.ErrRouteTimeout">
            <summary>
            表示发送 Route 消息超时的错误代码。
            </summary>
        </member>
        <member name="F:Fantasy.Network.InnerErrorCode.ErrEntityNotFound">
            <summary>
            表示未找到实体的错误代码。
            </summary>
        </member>
        <member name="F:Fantasy.Network.InnerErrorCode.ErrTransfer">
            <summary>
            表示传送过程中发生错误的错误代码。
            </summary>
        </member>
        <member name="T:Fantasy.Network.Route.AddressableHelper">
            <summary>
            提供操作地址映射的辅助方法。
            </summary>
        </member>
        <member name="M:Fantasy.Network.Route.AddressableHelper.AddAddressable(Fantasy.Scene,System.Int64,System.Int64,System.Boolean)">
            <summary>
            添加地址映射并返回操作结果。
            </summary>
            <param name="scene">场景实例。</param>
            <param name="addressableId">地址映射的唯一标识。</param>
            <param name="routeId">路由 ID。</param>
            <param name="isLock">是否锁定。</param>
        </member>
        <member name="M:Fantasy.Network.Route.AddressableHelper.GetAddressableRouteId(Fantasy.Scene,System.Int64)">
            <summary>
            获取地址映射的路由 ID。
            </summary>
            <param name="scene">场景实例。</param>
            <param name="addressableId">地址映射的唯一标识。</param>
            <returns>地址映射的路由 ID。</returns>
        </member>
        <member name="M:Fantasy.Network.Route.AddressableHelper.RemoveAddressable(Fantasy.Scene,System.Int64)">
            <summary>
            移除指定地址映射。
            </summary>
            <param name="scene">场景实例。</param>
            <param name="addressableId">地址映射的唯一标识。</param>
        </member>
        <member name="M:Fantasy.Network.Route.AddressableHelper.LockAddressable(Fantasy.Scene,System.Int64)">
            <summary>
            锁定指定地址映射。
            </summary>
            <param name="scene">场景实例。</param>
            <param name="addressableId">地址映射的唯一标识。</param>
        </member>
        <member name="M:Fantasy.Network.Route.AddressableHelper.UnLockAddressable(Fantasy.Scene,System.Int64,System.Int64,System.String)">
            <summary>
            解锁指定地址映射。
            </summary>
            <param name="scene">场景实例。</param>
            <param name="addressableId">地址映射的唯一标识。</param>
            <param name="routeId">路由 ID。</param>
            <param name="source">解锁来源。</param>
        </member>
        <member name="M:Fantasy.Network.Route.AddressableManageComponent.Add(System.Int64,System.Int64,System.Boolean)">
            <summary>
            添加地址映射。
            </summary>
            <param name="addressableId">地址映射的唯一标识。</param>
            <param name="routeId">路由 ID。</param>
            <param name="isLock">是否进行锁定。</param>
        </member>
        <member name="M:Fantasy.Network.Route.AddressableManageComponent.Get(System.Int64)">
            <summary>
            获取地址映射的路由 ID。
            </summary>
            <param name="addressableId">地址映射的唯一标识。</param>
            <returns>地址映射的路由 ID。</returns>
        </member>
        <member name="M:Fantasy.Network.Route.AddressableManageComponent.Remove(System.Int64)">
            <summary>
            移除地址映射。
            </summary>
            <param name="addressableId">地址映射的唯一标识。</param>
        </member>
        <member name="M:Fantasy.Network.Route.AddressableManageComponent.Lock(System.Int64)">
            <summary>
            锁定地址映射。
            </summary>
            <param name="addressableId">地址映射的唯一标识。</param>
        </member>
        <member name="M:Fantasy.Network.Route.AddressableManageComponent.UnLock(System.Int64,System.Int64,System.String)">
            <summary>
            解锁地址映射。
            </summary>
            <param name="addressableId">地址映射的唯一标识。</param>
            <param name="routeId">新的路由 ID。</param>
            <param name="source">解锁来源。</param>
        </member>
        <member name="T:Fantasy.Network.Route.AddressableMessageComponent">
            <summary>
            可寻址消息组件、挂载了这个组件可以接收Addressable消息
            </summary>
        </member>
        <member name="F:Fantasy.Network.Route.AddressableMessageComponent.AddressableId">
            <summary>
            可寻址消息组件的唯一标识。
            </summary>
        </member>
        <member name="M:Fantasy.Network.Route.AddressableMessageComponent.Register(System.Boolean)">
            <summary>
            注册可寻址消息组件。
            </summary>
            <param name="isLock">是否进行锁定。</param>
        </member>
        <member name="M:Fantasy.Network.Route.AddressableMessageComponent.Lock">
            <summary>
            锁定可寻址消息组件。
            </summary>
        </member>
        <member name="M:Fantasy.Network.Route.AddressableMessageComponent.UnLock(System.String)">
            <summary>
            解锁可寻址消息组件。
            </summary>
            <param name="source">解锁来源。</param>
        </member>
        <member name="M:Fantasy.Network.Route.AddressableMessageComponent.LockAndRelease">
            <summary>
            锁定可寻址消息并且释放掉AddressableMessageComponent组件。
            该方法不会自动取Addressable中心删除自己的信息。
            用于传送或转移到其他服务器时使用
            </summary>
        </member>
        <member name="T:Fantasy.Network.Route.AddressableRouteComponent">
            <summary>
            可寻址路由消息组件，挂载了这个组件可以接收和发送 Addressable 消息。
            </summary>
        </member>
        <member name="M:Fantasy.Network.Route.AddressableRouteComponent.Call(Fantasy.Network.Interface.IAddressableRouteMessage)">
            <summary>
            调用可寻址路由消息并等待响应。
            </summary>
            <param name="request">可寻址路由请求。</param>
        </member>
        <member name="T:Fantasy.Network.Route.AddressableScene">
            <summary>
            AddressableScene
            </summary>
        </member>
        <member name="F:Fantasy.Network.Route.AddressableScene.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="F:Fantasy.Network.Route.AddressableScene.RunTimeId">
            <summary>
            RunTimeId
            </summary>
        </member>
        <member name="M:Fantasy.Network.Route.AddressableScene.#ctor(Fantasy.Platform.Net.SceneConfig)">
            <summary>
            构造方法
            </summary>
            <param name="sceneConfig">sceneConfig</param>
        </member>
        <member name="T:Fantasy.Network.Route.I_AddressableAddHandler">
            <summary>
            声明一个 sealed 类 I_AddressableAddHandler，继承自 RouteRPC 类，并指定泛型参数
            </summary>
        </member>
        <member name="M:Fantasy.Network.Route.I_AddressableAddHandler.Run(Fantasy.Scene,Fantasy.InnerMessage.I_AddressableAdd_Request,Fantasy.InnerMessage.I_AddressableAdd_Response,System.Action)">
            <summary>
            在收到地址映射添加请求时执行的逻辑。
            </summary>
            <param name="scene">当前场景实例。</param>
            <param name="request">包含请求信息的 I_AddressableAdd_Request 实例。</param>
            <param name="response">用于构建响应的 I_AddressableAdd_Response 实例。</param>
            <param name="reply">执行响应的回调操作。</param>
        </member>
        <member name="T:Fantasy.Network.Route.I_AddressableGetHandler">
            <summary>
            声明一个 sealed 类 I_AddressableGetHandler，继承自 RouteRPC 类，并指定泛型参数
            </summary>
        </member>
        <member name="M:Fantasy.Network.Route.I_AddressableGetHandler.Run(Fantasy.Scene,Fantasy.InnerMessage.I_AddressableGet_Request,Fantasy.InnerMessage.I_AddressableGet_Response,System.Action)">
            <summary>
            在收到地址映射获取请求时执行的逻辑。
            </summary>
            <param name="scene">当前场景实例。</param>
            <param name="request">包含请求信息的 I_AddressableGet_Request 实例。</param>
            <param name="response">用于构建响应的 I_AddressableGet_Response 实例。</param>
            <param name="reply">执行响应的回调操作。</param>
        </member>
        <member name="T:Fantasy.Network.Route.I_AddressableLockHandler">
            <summary>
            声明一个 sealed 类 I_AddressableLockHandler，继承自 RouteRPC 类，并指定泛型参数
            </summary>
        </member>
        <member name="M:Fantasy.Network.Route.I_AddressableLockHandler.Run(Fantasy.Scene,Fantasy.InnerMessage.I_AddressableLock_Request,Fantasy.InnerMessage.I_AddressableLock_Response,System.Action)">
            <summary>
            在收到地址映射锁定请求时执行的逻辑。
            </summary>
            <param name="scene">当前场景实例。</param>
            <param name="request">包含请求信息的 I_AddressableLock_Request 实例。</param>
            <param name="response">用于构建响应的 I_AddressableLock_Response 实例。</param>
            <param name="reply">执行响应的回调操作。</param>
        </member>
        <member name="T:Fantasy.Network.Route.I_AddressableRemoveHandler">
            <summary>
            声明一个 sealed 类 I_AddressableRemoveHandler，继承自 RouteRPC 类，并指定泛型参数 
            </summary>
        </member>
        <member name="M:Fantasy.Network.Route.I_AddressableRemoveHandler.Run(Fantasy.Scene,Fantasy.InnerMessage.I_AddressableRemove_Request,Fantasy.InnerMessage.I_AddressableRemove_Response,System.Action)">
            <summary>
            在收到地址映射移除请求时执行的逻辑。
            </summary>
            <param name="scene">当前场景实例。</param>
            <param name="request">包含请求信息的 I_AddressableRemove_Request 实例。</param>
            <param name="response">用于构建响应的 I_AddressableRemove_Response 实例。</param>
            <param name="reply">执行响应的回调操作。</param>
        </member>
        <member name="T:Fantasy.Network.Route.I_AddressableUnLockHandler">
            <summary>
            声明一个 sealed 类 I_AddressableUnLockHandler，继承自 RouteRPC 类，并指定泛型参数
            </summary>
        </member>
        <member name="M:Fantasy.Network.Route.I_AddressableUnLockHandler.Run(Fantasy.Scene,Fantasy.InnerMessage.I_AddressableUnLock_Request,Fantasy.InnerMessage.I_AddressableUnLock_Response,System.Action)">
            <summary>
            在收到地址映射解锁请求时执行的逻辑。
            </summary>
            <param name="scene">当前场景实例。</param>
            <param name="request">包含请求信息的 I_AddressableUnLock_Request 实例。</param>
            <param name="response">用于构建响应的 I_AddressableUnLock_Response 实例。</param>
            <param name="reply">执行响应的回调操作。</param>
        </member>
        <member name="T:Fantasy.Network.MemoryStreamBufferPool">
            <summary>
            MemoryStreamBuffer对象池类
            </summary>
        </member>
        <member name="M:Fantasy.Network.MemoryStreamBufferPool.#ctor(System.Int32,System.Int32)">
            <summary>
            构造方法
            </summary>
            <param name="maxMemoryStreamSize"></param>
            <param name="poolSize"></param>
        </member>
        <member name="M:Fantasy.Network.MemoryStreamBufferPool.RentMemoryStream(Fantasy.Serialize.MemoryStreamBufferSource,System.Int32)">
            <summary>
            租借MemoryStream
            </summary>
            <param name="memoryStreamBufferSource"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:Fantasy.Network.MemoryStreamBufferPool.ReturnMemoryStream(Fantasy.Serialize.MemoryStreamBuffer)">
            <summary>
            归还ReturnMemoryStream
            </summary>
            <param name="memoryStreamBuffer"></param>
        </member>
        <member name="M:Fantasy.Network.MemoryStreamBufferPool.Dispose">
            <summary>
            销毁方法
            </summary>
        </member>
        <member name="T:Fantasy.Network.Interface.IMessageHandler">
            <summary>
            表示消息处理器的接口，处理特定类型的消息。
            </summary>
        </member>
        <member name="M:Fantasy.Network.Interface.IMessageHandler.Type">
            <summary>
            获取处理的消息类型。
            </summary>
            <returns>消息类型。</returns>
        </member>
        <member name="M:Fantasy.Network.Interface.IMessageHandler.Handle(Fantasy.Network.Session,System.UInt32,System.UInt32,System.Object)">
            <summary>
            处理消息的方法。
            </summary>
            <param name="session">会话对象。</param>
            <param name="rpcId">RPC标识。</param>
            <param name="messageTypeCode">消息类型代码。</param>
            <param name="message">要处理的消息。</param>
            <returns>异步任务。</returns>
        </member>
        <member name="T:Fantasy.Network.Interface.Message`1">
            <summary>
            泛型消息基类，实现了 <see cref="T:Fantasy.Network.Interface.IMessageHandler"/> 接口。
            </summary>
        </member>
        <member name="M:Fantasy.Network.Interface.Message`1.Type">
            <summary>
            获取处理的消息类型。
            </summary>
            <returns>消息类型。</returns>
        </member>
        <member name="M:Fantasy.Network.Interface.Message`1.Handle(Fantasy.Network.Session,System.UInt32,System.UInt32,System.Object)">
            <summary>
            处理消息的方法。
            </summary>
            <param name="session">会话对象。</param>
            <param name="rpcId">RPC标识。</param>
            <param name="messageTypeCode">消息类型代码。</param>
            <param name="message">要处理的消息。</param>
            <returns>异步任务。</returns>
        </member>
        <member name="M:Fantasy.Network.Interface.Message`1.Run(Fantasy.Network.Session,`0)">
            <summary>
            运行消息处理逻辑。
            </summary>
            <param name="session">会话对象。</param>
            <param name="message">要处理的消息。</param>
            <returns>异步任务。</returns>
        </member>
        <member name="T:Fantasy.Network.Interface.MessageRPC`2">
            <summary>
            泛型消息RPC基类，实现了 <see cref="T:Fantasy.Network.Interface.IMessageHandler"/> 接口，用于处理请求和响应类型的消息。
            </summary>
        </member>
        <member name="M:Fantasy.Network.Interface.MessageRPC`2.Type">
            <summary>
            获取处理的消息类型。
            </summary>
            <returns>消息类型。</returns>
        </member>
        <member name="M:Fantasy.Network.Interface.MessageRPC`2.Handle(Fantasy.Network.Session,System.UInt32,System.UInt32,System.Object)">
            <summary>
            处理消息的方法。
            </summary>
            <param name="session">会话对象。</param>
            <param name="rpcId">RPC标识。</param>
            <param name="messageTypeCode">消息类型代码。</param>
            <param name="message">要处理的消息。</param>
            <returns>异步任务。</returns>
        </member>
        <member name="M:Fantasy.Network.Interface.MessageRPC`2.Run(Fantasy.Network.Session,`0,`1,System.Action)">
            <summary>
            运行消息处理逻辑。
            </summary>
            <param name="session">会话对象。</param>
            <param name="request">请求消息。</param>
            <param name="response">响应消息。</param>
            <param name="reply">发送响应的方法。</param>
            <returns>异步任务。</returns>
        </member>
        <member name="T:Fantasy.Network.Interface.IRouteMessageHandler">
            <summary>
            表示路由消息处理器的接口，处理特定类型的路由消息。
            </summary>
        </member>
        <member name="M:Fantasy.Network.Interface.IRouteMessageHandler.Type">
            <summary>
            获取处理的消息类型。
            </summary>
            <returns>消息类型。</returns>
        </member>
        <member name="M:Fantasy.Network.Interface.IRouteMessageHandler.Handle(Fantasy.Network.Session,Fantasy.Entitas.Entity,System.UInt32,System.Object)">
            <summary>
            处理路由消息的方法。
            </summary>
            <param name="session">会话对象。</param>
            <param name="entity">实体对象。</param>
            <param name="rpcId">RPC标识。</param>
            <param name="routeMessage">要处理的路由消息。</param>
            <returns>异步任务。</returns>
        </member>
        <member name="T:Fantasy.Network.Interface.Route`2">
            <summary>
            泛型路由基类，实现了 <see cref="T:Fantasy.Network.Interface.IRouteMessageHandler"/> 接口，用于处理特定实体和路由消息类型的路由。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <typeparam name="TMessage">路由消息类型。</typeparam>
        </member>
        <member name="M:Fantasy.Network.Interface.Route`2.Type">
            <summary>
            获取处理的消息类型。
            </summary>
            <returns>消息类型。</returns>
        </member>
        <member name="M:Fantasy.Network.Interface.Route`2.Handle(Fantasy.Network.Session,Fantasy.Entitas.Entity,System.UInt32,System.Object)">
            <summary>
            处理路由消息的方法。
            </summary>
            <param name="session">会话对象。</param>
            <param name="entity">实体对象。</param>
            <param name="rpcId">RPC标识。</param>
            <param name="routeMessage">要处理的路由消息。</param>
            <returns>异步任务。</returns>
        </member>
        <member name="M:Fantasy.Network.Interface.Route`2.Run(`0,`1)">
            <summary>
            运行路由消息处理逻辑。
            </summary>
            <param name="entity">实体对象。</param>
            <param name="message">要处理的路由消息。</param>
            <returns>异步任务。</returns>
        </member>
        <member name="T:Fantasy.Network.Interface.RouteRPC`3">
            <summary>
            泛型路由RPC基类，实现了 <see cref="T:Fantasy.Network.Interface.IRouteMessageHandler"/> 接口，用于处理请求和响应类型的路由。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <typeparam name="TRouteRequest">路由请求类型。</typeparam>
            <typeparam name="TRouteResponse">路由响应类型。</typeparam>
        </member>
        <member name="M:Fantasy.Network.Interface.RouteRPC`3.Type">
            <summary>
            获取处理的消息类型。
            </summary>
            <returns>消息类型。</returns>
        </member>
        <member name="M:Fantasy.Network.Interface.RouteRPC`3.Handle(Fantasy.Network.Session,Fantasy.Entitas.Entity,System.UInt32,System.Object)">
            <summary>
            处理路由消息的方法。
            </summary>
            <param name="session">会话对象。</param>
            <param name="entity">实体对象。</param>
            <param name="rpcId">RPC标识。</param>
            <param name="routeMessage">要处理的路由消息。</param>
            <returns>异步任务。</returns>
        </member>
        <member name="M:Fantasy.Network.Interface.RouteRPC`3.Run(`0,`1,`2,System.Action)">
            <summary>
            运行路由消息处理逻辑。
            </summary>
            <param name="entity">实体对象。</param>
            <param name="request">请求路由消息。</param>
            <param name="response">响应路由消息。</param>
            <param name="reply">发送响应的方法。</param>
            <returns>异步任务。</returns>
        </member>
        <member name="T:Fantasy.Network.Interface.Addressable`2">
            <summary>
            泛型可寻址路由基类，实现了 <see cref="T:Fantasy.Network.Interface.IRouteMessageHandler"/> 接口，用于处理特定实体和可寻址路由消息类型的路由。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <typeparam name="TMessage">可寻址路由消息类型。</typeparam>
        </member>
        <member name="M:Fantasy.Network.Interface.Addressable`2.Type">
            <summary>
            获取消息类型。
            </summary>
            <returns>消息类型。</returns>
        </member>
        <member name="M:Fantasy.Network.Interface.Addressable`2.Handle(Fantasy.Network.Session,Fantasy.Entitas.Entity,System.UInt32,System.Object)">
            <summary>
            处理可寻址路由消息。
            </summary>
            <param name="session">会话。</param>
            <param name="entity">实体。</param>
            <param name="rpcId">RPC标识。</param>
            <param name="routeMessage">可寻址路由消息。</param>
        </member>
        <member name="M:Fantasy.Network.Interface.Addressable`2.Run(`0,`1)">
            <summary>
            运行处理可寻址路由消息。
            </summary>
            <param name="entity">实体。</param>
            <param name="message">可寻址路由消息。</param>
        </member>
        <member name="T:Fantasy.Network.Interface.AddressableRPC`3">
            <summary>
            泛型可寻址RPC路由基类，实现了 <see cref="T:Fantasy.Network.Interface.IRouteMessageHandler"/> 接口，用于处理特定实体和可寻址RPC路由请求类型的路由。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <typeparam name="TRouteRequest">可寻址RPC路由请求类型。</typeparam>
            <typeparam name="TRouteResponse">可寻址RPC路由响应类型。</typeparam>
        </member>
        <member name="M:Fantasy.Network.Interface.AddressableRPC`3.Type">
            <summary>
            获取消息类型。
            </summary>
            <returns>消息类型。</returns>
        </member>
        <member name="M:Fantasy.Network.Interface.AddressableRPC`3.Handle(Fantasy.Network.Session,Fantasy.Entitas.Entity,System.UInt32,System.Object)">
            <summary>
            处理可寻址RPC路由请求。
            </summary>
            <param name="session">会话。</param>
            <param name="entity">实体。</param>
            <param name="rpcId">RPC标识。</param>
            <param name="routeMessage">可寻址RPC路由请求。</param>
        </member>
        <member name="M:Fantasy.Network.Interface.AddressableRPC`3.Run(`0,`1,`2,System.Action)">
            <summary>
            运行处理可寻址RPC路由请求。
            </summary>
            <param name="entity">实体。</param>
            <param name="request">可寻址RPC路由请求。</param>
            <param name="response">可寻址RPC路由响应。</param>
            <param name="reply">回复操作。</param>
        </member>
        <member name="T:Fantasy.Network.Interface.HandlerInfo`1">
            <summary>
            用于存储消息处理器的信息，包括类型和对象实例。
            </summary>
            <typeparam name="T">消息处理器的类型</typeparam>
        </member>
        <member name="F:Fantasy.Network.Interface.HandlerInfo`1.Obj">
            <summary>
            获取或设置消息处理器对象。
            </summary>
        </member>
        <member name="F:Fantasy.Network.Interface.HandlerInfo`1.Type">
            <summary>
            获取或设置消息处理器的类型。
            </summary>
        </member>
        <member name="T:Fantasy.Network.Interface.MessageDispatcherComponent">
            <summary>
            网络消息分发组件。
            </summary>
        </member>
        <member name="M:Fantasy.Network.Interface.MessageDispatcherComponent.MessageHandler(Fantasy.Network.Session,System.Type,System.Object,System.UInt32,System.UInt32)">
            <summary>
            处理普通消息，将消息分发给相应的消息处理器。
            </summary>
            <param name="session">会话对象</param>
            <param name="type">消息类型</param>
            <param name="message">消息对象</param>
            <param name="rpcId">RPC标识</param>
            <param name="protocolCode">协议码</param>
        </member>
        <member name="M:Fantasy.Network.Interface.MessageDispatcherComponent.RouteMessageHandler(Fantasy.Network.Session,System.Type,Fantasy.Entitas.Entity,System.Object,System.UInt32)">
            <summary>
            处理路由消息，将消息分发给相应的路由消息处理器。
            </summary>
            <param name="session">会话对象</param>
            <param name="type">消息类型</param>
            <param name="entity">实体对象</param>
            <param name="message">消息对象</param>
            <param name="rpcId">RPC标识</param>
        </member>
        <member name="M:Fantasy.Network.Interface.MessageDispatcherComponent.GetOpCode(System.Type)">
            <summary>
            根据消息类型获取对应的OpCode。
            </summary>
            <param name="type">消息类型</param>
            <returns>消息对应的OpCode</returns>
        </member>
        <member name="M:Fantasy.Network.Interface.MessageDispatcherComponent.GetOpCodeType(System.UInt32)">
            <summary>
            根据OpCode获取对应的消息类型。
            </summary>
            <param name="code">OpCode</param>
            <returns>OpCode对应的消息类型</returns>
        </member>
        <member name="T:Fantasy.Network.Interface.IMessage">
            <summary>
            表示通用消息接口。
            </summary>
        </member>
        <member name="M:Fantasy.Network.Interface.IMessage.OpCode">
            <summary>
            获取消息的操作代码。
            </summary>
            <returns>操作代码。</returns>
        </member>
        <member name="T:Fantasy.Network.Interface.IRequest">
            <summary>
            表示请求消息接口。
            </summary>
        </member>
        <member name="T:Fantasy.Network.Interface.IResponse">
            <summary>
            表示响应消息接口。
            </summary>
        </member>
        <member name="P:Fantasy.Network.Interface.IResponse.ErrorCode">
            <summary>
            获取或设置错误代码。
            </summary>
        </member>
        <member name="T:Fantasy.Network.Interface.IRouteMessage">
            <summary>
            表示普通路由消息的接口，继承自请求接口。
            </summary>
        </member>
        <member name="T:Fantasy.Network.Interface.IRouteRequest">
            <summary>
            普通路由请求接口，继承自普通路由消息接口。
            </summary>
        </member>
        <member name="T:Fantasy.Network.Interface.IRouteResponse">
            <summary>
            普通路由响应接口，继承自响应接口。
            </summary>
        </member>
        <member name="T:Fantasy.Network.Interface.IAddressableRouteMessage">
            <summary>
            表示可寻址协议的普通路由消息接口，继承自普通路由消息接口。
            </summary>
        </member>
        <member name="T:Fantasy.Network.Interface.IAddressableRouteRequest">
            <summary>
            可寻址协议的普通路由请求接口，继承自可寻址协议的普通路由消息接口。
            </summary>
        </member>
        <member name="T:Fantasy.Network.Interface.IAddressableRouteResponse">
            <summary>
            可寻址协议的普通路由响应接口，继承自普通路由响应接口。
            </summary>
        </member>
        <member name="T:Fantasy.Network.Interface.ICustomRouteMessage">
            <summary>
            表示自定义Route协议的普通路由消息接口，继承自普通路由消息接口。
            </summary>
        </member>
        <member name="T:Fantasy.Network.Interface.ICustomRouteRequest">
            <summary>
            自定义Route协议的普通路由请求接口，继承自自定义Route协议的普通路由消息接口。
            </summary>
        </member>
        <member name="T:Fantasy.Network.Interface.ICustomRouteResponse">
            <summary>
            自定义Route协议的普通路由响应接口，继承自普通路由响应接口。
            </summary>
        </member>
        <member name="T:Fantasy.Network.Interface.AClientNetwork">
            <summary>
            抽象客户端网络基类。
            </summary>
        </member>
        <member name="T:Fantasy.Network.Interface.ANetwork">
            <summary>
            抽象网络基类。
            </summary>
        </member>
        <member name="F:Fantasy.Network.Interface.ANetworkServerChannel.Id">
            <summary>
            获取通道的唯一标识 ID。
            </summary>
        </member>
        <member name="F:Fantasy.Network.Interface.ANetworkServerChannel.RemoteEndPoint">
            <summary>
            获取通道的远程终端点。
            </summary>
        </member>
        <member name="P:Fantasy.Network.Interface.ANetworkServerChannel.Scene">
            <summary>
            获取或设置通道所属的场景。
            </summary>
        </member>
        <member name="P:Fantasy.Network.Interface.ANetworkServerChannel.Session">
            <summary>
            获取或设置通道所属的会话。
            </summary>
        </member>
        <member name="P:Fantasy.Network.Interface.ANetworkServerChannel.IsDisposed">
            <summary>
            获取通道是否已经被释放。
            </summary>
        </member>
        <member name="T:Fantasy.Network.ScanException">
            <summary>
            在扫描过程中发生的异常。
            </summary>
        </member>
        <member name="M:Fantasy.Network.ScanException.#ctor">
            <summary>
            初始化 <see cref="T:Fantasy.Network.ScanException"/> 类的新实例。
            </summary>
        </member>
        <member name="M:Fantasy.Network.ScanException.#ctor(System.String)">
            <summary>
            使用指定的错误消息初始化 <see cref="T:Fantasy.Network.ScanException"/> 类的新实例。
            </summary>
            <param name="msg">错误消息。</param>
        </member>
        <member name="T:Fantasy.Network.HTTP.HTTPServerNetwork">
            <summary>
            HTTP服务器
            </summary>
        </member>
        <member name="M:Fantasy.Network.HTTP.HTTPServerNetwork.Initialize(Fantasy.Network.NetworkTarget,System.String,System.Int32)">
            <summary>
            初始化入口
            </summary>
            <param name="networkTarget"></param>
            <param name="bindIp"></param>
            <param name="port"></param>
        </member>
        <member name="M:Fantasy.Network.HTTP.HTTPServerNetwork.RemoveChannel(System.UInt32)">
            <summary>
            移除Channel
            </summary>
            <param name="channelId"></param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Fantasy.Network.HTTP.SceneContextFilter">
            <summary>
            让所有实现SceneContextFilter的控制器，都在执行的Scene下执行
            </summary>
        </member>
        <member name="M:Fantasy.Network.HTTP.SceneContextFilter.#ctor(Fantasy.Scene)">
            <summary>
            构造函数
            </summary>
            <param name="scene"></param>
        </member>
        <member name="M:Fantasy.Network.HTTP.SceneContextFilter.OnActionExecutionAsync(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext,Microsoft.AspNetCore.Mvc.Filters.ActionExecutionDelegate)">
            <summary>
            OnActionExecutionAsync
            </summary>
            <param name="context"></param>
            <param name="next"></param>
            <returns></returns>
        </member>
        <member name="T:Fantasy.Network.KCP.KCPServerNetworkChannel">
            <summary>
            KCP 服务器网络通道，用于处理服务器与客户端之间的数据通信。
            </summary>
        </member>
        <member name="T:Fantasy.Network.NetworkType">
            <summary>
            网络服务器类型
            </summary>
        </member>
        <member name="F:Fantasy.Network.NetworkType.None">
            <summary>
            默认
            </summary>
        </member>
        <member name="F:Fantasy.Network.NetworkType.Client">
            <summary>
            客户端网络
            </summary>
        </member>
        <member name="F:Fantasy.Network.NetworkType.Server">
            <summary>
            服务器网络
            </summary>
        </member>
        <member name="T:Fantasy.Network.NetworkTarget">
            <summary>
            网络服务的目标
            </summary>
        </member>
        <member name="F:Fantasy.Network.NetworkTarget.None">
            <summary>
            默认
            </summary>
        </member>
        <member name="F:Fantasy.Network.NetworkTarget.Outer">
            <summary>
            对外
            </summary>
        </member>
        <member name="F:Fantasy.Network.NetworkTarget.Inner">
            <summary>
            对内
            </summary>
        </member>
        <member name="T:Fantasy.Network.NetworkProtocolType">
            <summary>
            支持的网络协议
            </summary>
        </member>
        <member name="F:Fantasy.Network.NetworkProtocolType.None">
            <summary>
            默认
            </summary>
        </member>
        <member name="F:Fantasy.Network.NetworkProtocolType.KCP">
            <summary>
            KCP
            </summary>
        </member>
        <member name="F:Fantasy.Network.NetworkProtocolType.TCP">
            <summary>
            TCP
            </summary>
        </member>
        <member name="F:Fantasy.Network.NetworkProtocolType.WebSocket">
            <summary>
            WebSocket
            </summary>
        </member>
        <member name="F:Fantasy.Network.NetworkProtocolType.HTTP">
            <summary>
            HTTP
            </summary>
        </member>
        <member name="T:Fantasy.Network.NetworkThreadComponent">
            <summary>
            网络线程组件
            </summary>
        </member>
        <member name="M:Fantasy.Network.TCP.TCPClientNetwork.Connect(System.String,System.Action,System.Action,System.Action,System.Boolean,System.Int32)">
            <summary>
            连接到远程服务器。
            </summary>
            <param name="remoteAddress">远程服务器的终端点。</param>
            <param name="onConnectComplete">连接成功时的回调。</param>
            <param name="onConnectFail">连接失败时的回调。</param>
            <param name="onConnectDisconnect">连接断开时的回调。</param>
            <param name="isHttps"></param>
            <param name="connectTimeout">连接超时时间，单位：毫秒。</param>
            <returns>连接的会话。</returns>
        </member>
        <member name="T:Fantasy.Network.RouteComponent">
            <summary>
            自定义Route组件、如果要自定义Route协议必须使用这个组件
            </summary>
        </member>
        <member name="F:Fantasy.Network.RouteComponent.RouteAddress">
            <summary>
            存储路由类型和路由ID的映射关系。
            </summary>
        </member>
        <member name="M:Fantasy.Network.RouteComponent.AddAddress(System.Int64,System.Int64)">
            <summary>
            添加路由类型和路由ID的映射关系。
            </summary>
            <param name="routeType">路由类型。</param>
            <param name="routeId">路由ID。</param>
        </member>
        <member name="M:Fantasy.Network.RouteComponent.RemoveAddress(System.Int64)">
            <summary>
            移除指定路由类型的映射关系。
            </summary>
            <param name="routeType">路由类型。</param>
        </member>
        <member name="M:Fantasy.Network.RouteComponent.GetRouteId(System.Int64)">
            <summary>
            获取指定路由类型的路由ID。
            </summary>
            <param name="routeType">路由类型。</param>
            <returns>路由ID。</returns>
        </member>
        <member name="M:Fantasy.Network.RouteComponent.TryGetRouteId(System.Int64,System.Int64@)">
            <summary>
            尝试获取指定路由类型的路由ID。
            </summary>
            <param name="routeType">路由类型。</param>
            <param name="routeId">输出的路由ID。</param>
            <returns>如果获取成功返回true，否则返回false。</returns>
        </member>
        <member name="M:Fantasy.Network.RouteComponent.Dispose">
            <summary>
            释放组件资源，清空映射关系。
            </summary>
        </member>
        <member name="T:Fantasy.Network.SessionIdleCheckerComponent">
            <summary>
            负责检查会话空闲超时的组件。
            </summary>
        </member>
        <member name="F:Fantasy.Network.SessionIdleCheckerComponent._timeOut">
            <summary>
            空闲超时时间（毫秒）
            </summary>
        </member>
        <member name="F:Fantasy.Network.SessionIdleCheckerComponent._timerId">
            <summary>
            检查计时器的 ID
            </summary>
        </member>
        <member name="F:Fantasy.Network.SessionIdleCheckerComponent._selfRuntimeId">
            <summary>
            用于确保组件完整性的自身运行时 ID
            </summary>
        </member>
        <member name="F:Fantasy.Network.SessionIdleCheckerComponent._session">
            <summary>
            对会话对象的引用
            </summary>
        </member>
        <member name="M:Fantasy.Network.SessionIdleCheckerComponent.Dispose">
            <summary>
            重写 Dispose 方法以释放资源。
            </summary>
        </member>
        <member name="M:Fantasy.Network.SessionIdleCheckerComponent.Start(System.Int32,System.Int32)">
            <summary>
            使用指定的间隔和空闲超时时间启动空闲检查功能。
            </summary>
            <param name="interval">以毫秒为单位的检查间隔。</param>
            <param name="timeOut">以毫秒为单位的空闲超时时间。</param>
        </member>
        <member name="M:Fantasy.Network.SessionIdleCheckerComponent.Stop">
            <summary>
            停止空闲检查功能。
            </summary>
        </member>
        <member name="M:Fantasy.Network.SessionIdleCheckerComponent.Check">
            <summary>
            执行空闲检查操作。
            </summary>
        </member>
        <member name="T:Fantasy.Network.ProcessSession">
            <summary>
            网络服务器内部会话。
            </summary>
        </member>
        <member name="M:Fantasy.Network.ProcessSession.Send(Fantasy.Network.Interface.IMessage,System.UInt32,System.Int64)">
            <summary>
            发送消息到服务器内部。
            </summary>
            <param name="message">要发送的消息。</param>
            <param name="rpcId">RPC 标识符。</param>
            <param name="routeId">路由标识符。</param>
        </member>
        <member name="M:Fantasy.Network.ProcessSession.Send(Fantasy.Network.Interface.IRouteMessage,System.UInt32,System.Int64)">
            <summary>
            发送路由消息到服务器内部。
            </summary>
            <param name="routeMessage">要发送的路由消息。</param>
            <param name="rpcId">RPC 标识符。</param>
            <param name="routeId">路由标识符。</param>
        </member>
        <member name="T:Fantasy.Network.Session">
            <summary>
            网络会话的基类，用于管理网络通信。
            </summary>
        </member>
        <member name="P:Fantasy.Network.Session.Channel">
            <summary>
            关联的网络连接通道
            </summary>
        </member>
        <member name="P:Fantasy.Network.Session.RemoteEndPoint">
            <summary>
            当前Session的终结点信息
            </summary>
        </member>
        <member name="E:Fantasy.Network.Session.OnDispose">
            <summary>
            Session的Dispose委托
            </summary>
        </member>
        <member name="M:Fantasy.Network.Session.Send(System.UInt32,System.Int64,System.Type,Fantasy.PacketParser.Interface.APackInfo)">
            <summary>
            发送一个消息，框架内部使用建议不要用这个方法。
            </summary>
            <param name="rpcId">如果是RPC消息需要传递一个RPCId</param>
            <param name="routeId">routeId</param>
            <param name="messageType">消息的类型</param>
            <param name="packInfo">packInfo消息包</param>
        </member>
        <member name="M:Fantasy.Network.Session.Send(Fantasy.PacketParser.ProcessPackInfo,System.UInt32,System.Int64)">
            <summary>
            发送一个消息，框架内部使用建议不要用这个方法。
            </summary>
            <param name="packInfo">一个ProcessPackInfo消息包</param>
            <param name="rpcId">如果是RPC消息需要传递一个RPCId</param>
            <param name="routeId">routeId</param>
        </member>
        <member name="M:Fantasy.Network.Session.Send(Fantasy.Serialize.MemoryStreamBuffer,System.UInt32,System.Int64)">
            <summary>
            发送一个消息
            </summary>
            <param name="memoryStream">需要发送的MemoryStreamBuffer</param>
            <param name="rpcId">如果是RPC消息需要传递一个RPCId</param>
            <param name="routeId">routeId</param>
        </member>
        <member name="M:Fantasy.Network.Session.Dispose">
            <summary>
            销毁一个Session，当执行了这个方法会自动断开网络的连接。
            </summary>
        </member>
        <member name="M:Fantasy.Network.Session.Send(Fantasy.Network.Interface.IMessage,System.UInt32,System.Int64)">
            <summary>
            发送一个消息
            </summary>
            <param name="message">消息的实例</param>
            <param name="rpcId">如果是RPC消息需要传递一个RPCId</param>
            <param name="routeId">routeId</param>
        </member>
        <member name="M:Fantasy.Network.Session.Send(Fantasy.Network.Interface.IRouteMessage,System.UInt32,System.Int64)">
            <summary>
            发送一个消息
            </summary>
            <param name="routeMessage">消息的实例，不同的是这个是发送Route消息使用的</param>
            <param name="rpcId">如果是RPC消息需要传递一个RPCId</param>
            <param name="routeId">routeId</param>
        </member>
        <member name="M:Fantasy.Network.Session.Call(Fantasy.Network.Interface.IRouteRequest,System.Int64)">
            <summary>
            发送一个RPC消息
            </summary>
            <param name="request">请求Route消息的实例</param>
            <param name="routeId">routeId</param>
            <returns></returns>
        </member>
        <member name="M:Fantasy.Network.Session.Call(Fantasy.Network.Interface.IRequest,System.Int64)">
            <summary>
            发送一个RPC消息
            </summary>
            <param name="request">请求消息的实例</param>
            <param name="routeId">routeId</param>
            <returns></returns>
        </member>
        <member name="T:Fantasy.DataBase.DataBaseType">
            <summary>
            数据库类型
            </summary>
        </member>
        <member name="F:Fantasy.DataBase.DataBaseType.None">
            <summary>
            默认
            </summary>
        </member>
        <member name="F:Fantasy.DataBase.DataBaseType.MongoDB">
            <summary>
            MongoDB
            </summary>
        </member>
        <member name="T:Fantasy.DataBase.DataBaseSetting">
            <summary>
            数据库设置助手
            </summary>
        </member>
        <member name="F:Fantasy.DataBase.DataBaseSetting.MongoDBCustomInitialize">
            <summary>
            初始化自定义委托，当设置了这个委托后，就不会自动创建MongoClient，需要自己在委托里创建MongoClient。
            </summary>
        </member>
        <member name="T:Fantasy.DataBase.DataBaseCustomConfig">
            <summary>
            MongoDB自定义连接参数
            </summary>
        </member>
        <member name="F:Fantasy.DataBase.DataBaseCustomConfig.Scene">
            <summary>
            当前Scene
            </summary>
        </member>
        <member name="F:Fantasy.DataBase.DataBaseCustomConfig.ConnectionString">
            <summary>
            连接字符串
            </summary>
        </member>
        <member name="F:Fantasy.DataBase.DataBaseCustomConfig.DBName">
            <summary>
            数据库名字
            </summary>
        </member>
        <member name="T:Fantasy.DataBase.IDataBase">
            <summary>
            表示用于执行各种数据库操作的数据库接口。
            </summary>
        </member>
        <member name="P:Fantasy.DataBase.IDataBase.GetDataBaseType">
            <summary>
            获得当前数据的类型
            </summary>
        </member>
        <member name="M:Fantasy.DataBase.IDataBase.Initialize(Fantasy.Scene,System.String,System.String)">
            <summary>
            初始化数据库连接。
            </summary>
        </member>
        <member name="M:Fantasy.DataBase.IDataBase.Count``1(System.String)">
            <summary>
            在指定的集合中检索类型 <typeparamref name="T"/> 的实体数量。
            </summary>
        </member>
        <member name="M:Fantasy.DataBase.IDataBase.Count``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String)">
            <summary>
            在指定的集合中检索满足给定筛选条件的类型 <typeparamref name="T"/> 的实体数量。
            </summary>
        </member>
        <member name="M:Fantasy.DataBase.IDataBase.Exist``1(System.String)">
            <summary>
            检查指定集合中是否存在类型 <typeparamref name="T"/> 的实体。
            </summary>
        </member>
        <member name="M:Fantasy.DataBase.IDataBase.Exist``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String)">
            <summary>
            检查指定集合中是否存在满足给定筛选条件的类型 <typeparamref name="T"/> 的实体。
            </summary>
        </member>
        <member name="M:Fantasy.DataBase.IDataBase.QueryNotLock``1(System.Int64,System.Boolean,System.String)">
            <summary>
            从指定集合中检索指定 ID 的类型 <typeparamref name="T"/> 的实体，不锁定。
            </summary>
        </member>
        <member name="M:Fantasy.DataBase.IDataBase.Query``1(System.Int64,System.Boolean,System.String)">
            <summary>
            从指定集合中检索指定 ID 的类型 <typeparamref name="T"/> 的实体。
            </summary>
        </member>
        <member name="M:Fantasy.DataBase.IDataBase.QueryCountAndDatesByPage``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Int32,System.Int32,System.Boolean,System.String)">
            <summary>
            按页查询满足给定筛选条件的类型 <typeparamref name="T"/> 的实体数量和日期。
            </summary>
        </member>
        <member name="M:Fantasy.DataBase.IDataBase.QueryCountAndDatesByPage``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Int32,System.Int32,System.String[],System.Boolean,System.String)">
            <summary>
            按页查询满足给定筛选条件的类型 <typeparamref name="T"/> 的实体数量和日期。
            </summary>
        </member>
        <member name="M:Fantasy.DataBase.IDataBase.QueryByPage``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Int32,System.Int32,System.Boolean,System.String)">
            <summary>
            分页查询指定集合中满足给定筛选条件的类型 <typeparamref name="T"/> 的实体列表。
            </summary>
        </member>
        <member name="M:Fantasy.DataBase.IDataBase.QueryByPage``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Int32,System.Int32,System.String[],System.Boolean,System.String)">
            <summary>
            分页查询指定集合中满足给定筛选条件的类型 <typeparamref name="T"/> 的实体列表，仅返回指定列的数据。
            </summary>
        </member>
        <member name="M:Fantasy.DataBase.IDataBase.QueryByPageOrderBy``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Int32,System.Int32,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Boolean,System.Boolean,System.String)">
            <summary>
            从指定集合中按页查询满足给定筛选条件的类型 <typeparamref name="T"/> 的实体列表，按指定字段排序。
            </summary>
        </member>
        <member name="M:Fantasy.DataBase.IDataBase.First``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Boolean,System.String)">
            <summary>
            检索满足给定筛选条件的类型 <typeparamref name="T"/> 的第一个实体，从指定集合中。
            </summary>
        </member>
        <member name="M:Fantasy.DataBase.IDataBase.First``1(System.String,System.String[],System.Boolean,System.String)">
            <summary>
            查询指定集合中满足给定 JSON 查询字符串的类型 <typeparamref name="T"/> 的第一个实体，仅返回指定列的数据。
            </summary>
        </member>
        <member name="M:Fantasy.DataBase.IDataBase.QueryOrderBy``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Boolean,System.Boolean,System.String)">
            <summary>
            从指定集合中按页查询满足给定筛选条件的类型 <typeparamref name="T"/> 的实体列表，按指定字段排序。
            </summary>
        </member>
        <member name="M:Fantasy.DataBase.IDataBase.Query``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Boolean,System.String)">
            <summary>
            从指定集合中按页查询满足给定筛选条件的类型 <typeparamref name="T"/> 的实体列表。
            </summary>
        </member>
        <member name="M:Fantasy.DataBase.IDataBase.Query``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[],System.Boolean,System.String)">
            <summary>
            查询指定集合中满足给定筛选条件的类型 <typeparamref name="T"/> 实体列表，仅返回指定字段的数据。
            </summary>
        </member>
        <member name="M:Fantasy.DataBase.IDataBase.Query(System.Int64,System.Collections.Generic.List{System.String},System.Collections.Generic.List{Fantasy.Entitas.Entity},System.Boolean)">
            <summary>
            查询指定 ID 的多个集合，将结果存储在给定的实体列表中。
            </summary>
        </member>
        <member name="M:Fantasy.DataBase.IDataBase.QueryJson``1(System.String,System.Boolean,System.String)">
            <summary>
            根据给定的 JSON 查询字符串查询指定集合中的类型 <typeparamref name="T"/> 实体列表。
            </summary>
        </member>
        <member name="M:Fantasy.DataBase.IDataBase.QueryJson``1(System.String,System.String[],System.Boolean,System.String)">
            <summary>
            根据给定的 JSON 查询字符串查询指定集合中的类型 <typeparamref name="T"/> 实体列表，仅返回指定列的数据。
            </summary>
        </member>
        <member name="M:Fantasy.DataBase.IDataBase.QueryJson``1(System.Int64,System.String,System.Boolean,System.String)">
            <summary>
            根据给定的 JSON 查询字符串查询指定集合中的类型 <typeparamref name="T"/> 实体列表，通过指定的任务 ID 进行标识。
            </summary>
        </member>
        <member name="M:Fantasy.DataBase.IDataBase.Query``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String[],System.Boolean,System.String)">
            <summary>
            查询指定集合中满足给定筛选条件的类型 <typeparamref name="T"/> 实体列表，仅返回指定列的数据。
            </summary>
        </member>
        <member name="M:Fantasy.DataBase.IDataBase.Save``1(``0,System.String)">
            <summary>
            保存类型 <typeparamref name="T"/> 实体到指定集合中，如果集合不存在将自动创建。
            </summary>
        </member>
        <member name="M:Fantasy.DataBase.IDataBase.Save(System.Int64,System.Collections.Generic.List{Fantasy.Entitas.Entity})">
            <summary>
            保存一组实体到数据库中，根据实体列表的 ID 进行区分和存储。
            </summary>
        </member>
        <member name="M:Fantasy.DataBase.IDataBase.Save``1(System.Object,``0,System.String)">
            <summary>
            通过事务会话将类型 <typeparamref name="T"/> 实体保存到指定集合中，如果集合不存在将自动创建。
            </summary>
        </member>
        <member name="M:Fantasy.DataBase.IDataBase.Insert``1(``0,System.String)">
            <summary>
            向指定集合中插入一个类型 <typeparamref name="T"/> 实体，如果集合不存在将自动创建。
            </summary>
        </member>
        <member name="M:Fantasy.DataBase.IDataBase.InsertBatch``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            批量插入一组类型 <typeparamref name="T"/> 实体到指定集合中，如果集合不存在将自动创建。
            </summary>
        </member>
        <member name="M:Fantasy.DataBase.IDataBase.InsertBatch``1(System.Object,System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            通过事务会话，批量插入一组类型 <typeparamref name="T"/> 实体到指定集合中，如果集合不存在将自动创建。
            </summary>
        </member>
        <member name="M:Fantasy.DataBase.IDataBase.Remove``1(System.Object,System.Int64,System.String)">
            <summary>
            通过事务会话，根据指定的 ID 从数据库中删除指定类型 <typeparamref name="T"/> 实体。
            </summary>
        </member>
        <member name="M:Fantasy.DataBase.IDataBase.Remove``1(System.Int64,System.String)">
            <summary>
            根据指定的 ID 从数据库中删除指定类型 <typeparamref name="T"/> 实体。
            </summary>
        </member>
        <member name="M:Fantasy.DataBase.IDataBase.Remove``1(System.Int64,System.Object,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String)">
            <summary>
            通过事务会话，根据给定的筛选条件从数据库中删除指定类型 <typeparamref name="T"/> 实体。
            </summary>
        </member>
        <member name="M:Fantasy.DataBase.IDataBase.Remove``1(System.Int64,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String)">
            <summary>
            根据给定的筛选条件从数据库中删除指定类型 <typeparamref name="T"/> 实体。
            </summary>
        </member>
        <member name="M:Fantasy.DataBase.IDataBase.Sum``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String)">
            <summary>
            根据给定的筛选条件计算指定集合中类型 <typeparamref name="T"/> 实体某个属性的总和。
            </summary>
        </member>
        <member name="M:Fantasy.DataBase.IDataBase.CreateIndex``1(System.String,System.Object[])">
            <summary>
            在指定的集合中创建索引，以提高类型 <typeparamref name="T"/> 实体的查询性能。
            </summary>
        </member>
        <member name="M:Fantasy.DataBase.IDataBase.CreateIndex``1(System.Object[])">
            <summary>
            在默认集合中创建索引，以提高类型 <typeparamref name="T"/> 实体的查询性能。
            </summary>
        </member>
        <member name="M:Fantasy.DataBase.IDataBase.CreateDB``1">
            <summary>
            创建指定类型 <typeparamref name="T"/> 的数据库，用于存储实体。
            </summary>
        </member>
        <member name="M:Fantasy.DataBase.IDataBase.CreateDB(System.Type)">
            <summary>
            根据指定类型创建数据库，用于存储实体。
            </summary>
        </member>
        <member name="T:Fantasy.DataBase.MongoDataBase">
            <summary>
            使用 MongoDB 数据库的实现。
            </summary>
        </member>
        <member name="P:Fantasy.DataBase.MongoDataBase.GetDataBaseType">
            <summary>
            获得当前数据的类型
            </summary>
        </member>
        <member name="M:Fantasy.DataBase.MongoDataBase.Initialize(Fantasy.Scene,System.String,System.String)">
            <summary>
            初始化 MongoDB 数据库连接并记录所有集合名。
            </summary>
            <param name="scene">场景对象。</param>
            <param name="connectionString">数据库连接字符串。</param>
            <param name="dbName">数据库名称。</param>
            <returns>初始化后的数据库实例。</returns>
        </member>
        <member name="M:Fantasy.DataBase.MongoDataBase.Dispose">
            <summary>
            销毁释放资源。
            </summary>
        </member>
        <member name="M:Fantasy.DataBase.MongoDataBase.Sum``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String)">
            <summary>
            对满足条件的文档中的某个数值字段进行求和操作。
            </summary>
            <typeparam name="T">实体类型。</typeparam>
            <param name="filter">用于筛选文档的表达式。</param>
            <param name="sumExpression">要对其进行求和的字段表达式。</param>
            <param name="collection">集合名称，可选。如果未指定，将使用实体类型的名称。</param>
            <returns>满足条件的文档中指定字段的求和结果。</returns>
        </member>
        <member name="M:Fantasy.DataBase.MongoDataBase.GetCollection``1(System.String)">
            <summary>
            获取指定集合中的 MongoDB 文档的 IMongoCollection 对象。
            </summary>
            <typeparam name="T">实体类型。</typeparam>
            <param name="collection">集合名称，可选。如果未指定，将使用实体类型的名称。</param>
            <returns>IMongoCollection 对象。</returns>
        </member>
        <member name="M:Fantasy.DataBase.MongoDataBase.GetCollection(System.String)">
            <summary>
            获取指定集合中的 MongoDB 文档的 IMongoCollection 对象，其中实体类型为 Entity。
            </summary>
            <param name="name">集合名称。</param>
            <returns>IMongoCollection 对象。</returns>
        </member>
        <member name="M:Fantasy.DataBase.MongoDataBase.Count``1(System.String)">
            <summary>
            统计指定集合中满足条件的文档数量。
            </summary>
            <typeparam name="T">实体类型。</typeparam>
            <param name="collection">集合名称，可选。如果未指定，将使用实体类型的名称。</param>
            <returns>满足条件的文档数量。</returns>
        </member>
        <member name="M:Fantasy.DataBase.MongoDataBase.Count``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String)">
            <summary>
            统计指定集合中满足条件的文档数量。
            </summary>
            <typeparam name="T">实体类型。</typeparam>
            <param name="filter">用于筛选文档的表达式。</param>
            <param name="collection">集合名称，可选。如果未指定，将使用实体类型的名称。</param>
            <returns>满足条件的文档数量。</returns>
        </member>
        <member name="M:Fantasy.DataBase.MongoDataBase.Exist``1(System.String)">
            <summary>
            判断指定集合中是否存在文档。
            </summary>
            <typeparam name="T">实体类型。</typeparam>
            <param name="collection">集合名称，可选。如果未指定，将使用实体类型的名称。</param>
            <returns>如果存在文档则返回 true，否则返回 false。</returns>
        </member>
        <member name="M:Fantasy.DataBase.MongoDataBase.Exist``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String)">
            <summary>
            判断指定集合中是否存在满足条件的文档。
            </summary>
            <typeparam name="T">实体类型。</typeparam>
            <param name="filter">用于筛选文档的表达式。</param>
            <param name="collection">集合名称，可选。如果未指定，将使用实体类型的名称。</param>
            <returns>如果存在满足条件的文档则返回 true，否则返回 false。</returns>
        </member>
        <member name="M:Fantasy.DataBase.MongoDataBase.QueryNotLock``1(System.Int64,System.Boolean,System.String)">
            <summary>
            在不加数据库锁定的情况下，查询指定 ID 的文档。
            </summary>
            <typeparam name="T">文档实体类型。</typeparam>
            <param name="id">要查询的文档 ID。</param>
            <param name="isDeserialize">是否在查询后反序列化,执行反序列化后会自动将实体注册到框架系统中，并且能正常使用组件相关功能。</param>
            <param name="collection">集合名称。</param>
            <returns>查询到的文档。</returns>
        </member>
        <member name="M:Fantasy.DataBase.MongoDataBase.Query``1(System.Int64,System.Boolean,System.String)">
            <summary>
            查询指定 ID 的文档，并加数据库锁定以确保数据一致性。
            </summary>
            <typeparam name="T">文档实体类型。</typeparam>
            <param name="id">要查询的文档 ID。</param>
            <param name="isDeserialize">是否在查询后反序列化,执行反序列化后会自动将实体注册到框架系统中，并且能正常使用组件相关功能。</param>
            <param name="collection">集合名称。</param>
            <returns>查询到的文档。</returns>
        </member>
        <member name="M:Fantasy.DataBase.MongoDataBase.QueryCountAndDatesByPage``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Int32,System.Int32,System.Boolean,System.String)">
            <summary>
            通过分页查询并返回满足条件的文档数量和日期列表（不加锁）。
            </summary>
            <typeparam name="T">文档实体类型。</typeparam>
            <param name="filter">查询过滤条件。</param>
            <param name="pageIndex">页码。</param>
            <param name="pageSize">每页大小。</param>
            <param name="isDeserialize">是否在查询后反序列化,执行反序列化后会自动将实体注册到框架系统中，并且能正常使用组件相关功能。</param>
            <param name="collection">集合名称。</param>
            <returns>满足条件的文档数量和日期列表。</returns>
        </member>
        <member name="M:Fantasy.DataBase.MongoDataBase.QueryCountAndDatesByPage``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Int32,System.Int32,System.String[],System.Boolean,System.String)">
            <summary>
            通过分页查询并返回满足条件的文档数量和日期列表（加锁）。
            </summary>
            <typeparam name="T">文档实体类型。</typeparam>
            <param name="filter">查询过滤条件。</param>
            <param name="pageIndex">页码。</param>
            <param name="pageSize">每页大小。</param>
            <param name="cols">要查询的列名称数组。</param>
            <param name="isDeserialize">是否在查询后反序列化,执行反序列化后会自动将实体注册到框架系统中，并且能正常使用组件相关功能。</param>
            <param name="collection">集合名称。</param>
            <returns>满足条件的文档数量和日期列表。</returns>
        </member>
        <member name="M:Fantasy.DataBase.MongoDataBase.QueryByPage``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Int32,System.Int32,System.Boolean,System.String)">
            <summary>
            通过分页查询并返回满足条件的文档列表（不加锁）。
            </summary>
            <typeparam name="T">文档实体类型。</typeparam>
            <param name="filter">查询过滤条件。</param>
            <param name="pageIndex">页码。</param>
            <param name="pageSize">每页大小。</param>
            <param name="isDeserialize">是否在查询后反序列化,执行反序列化后会自动将实体注册到框架系统中，并且能正常使用组件相关功能。</param>
            <param name="collection">集合名称。</param>
            <returns>满足条件的文档列表。</returns>
        </member>
        <member name="M:Fantasy.DataBase.MongoDataBase.QueryByPage``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Int32,System.Int32,System.String[],System.Boolean,System.String)">
            <summary>
            通过分页查询并返回满足条件的文档列表（加锁）。
            </summary>
            <typeparam name="T">文档实体类型。</typeparam>
            <param name="filter">查询过滤条件。</param>
            <param name="pageIndex">页码。</param>
            <param name="pageSize">每页大小。</param>
            <param name="cols">要查询的列名称数组。</param>
            <param name="isDeserialize">是否在查询后反序列化,执行反序列化后会自动将实体注册到框架系统中，并且能正常使用组件相关功能。</param>
            <param name="collection">集合名称。</param>
            <returns>满足条件的文档列表。</returns>
        </member>
        <member name="M:Fantasy.DataBase.MongoDataBase.QueryByPageOrderBy``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Int32,System.Int32,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Boolean,System.Boolean,System.String)">
            <summary>
            通过分页查询并返回满足条件的文档列表，并按指定表达式进行排序（加锁）。
            </summary>
            <typeparam name="T">文档实体类型。</typeparam>
            <param name="filter">查询过滤条件。</param>
            <param name="pageIndex">页码。</param>
            <param name="pageSize">每页大小。</param>
            <param name="orderByExpression">排序表达式。</param>
            <param name="isAsc">是否升序排序。</param>
            <param name="isDeserialize">是否在查询后反序列化,执行反序列化后会自动将实体注册到框架系统中，并且能正常使用组件相关功能。</param>
            <param name="collection">集合名称。</param>
            <returns>满足条件的文档列表。</returns>
        </member>
        <member name="M:Fantasy.DataBase.MongoDataBase.First``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Boolean,System.String)">
            <summary>
            通过指定过滤条件查询并返回满足条件的第一个文档（加锁）。
            </summary>
            <typeparam name="T">文档实体类型。</typeparam>
            <param name="filter">查询过滤条件。</param>
            <param name="isDeserialize">是否在查询后反序列化,执行反序列化后会自动将实体注册到框架系统中，并且能正常使用组件相关功能。</param>
            <param name="collection">集合名称。</param>
            <returns>满足条件的第一个文档，如果未找到则为 null。</returns>
        </member>
        <member name="M:Fantasy.DataBase.MongoDataBase.First``1(System.String,System.String[],System.Boolean,System.String)">
            <summary>
            通过指定 JSON 格式查询并返回满足条件的第一个文档（加锁）。
            </summary>
            <typeparam name="T">文档实体类型。</typeparam>
            <param name="json">JSON 查询条件。</param>
            <param name="cols">要查询的列名称数组。</param>
            <param name="isDeserialize">是否在查询后反序列化,执行反序列化后会自动将实体注册到框架系统中，并且能正常使用组件相关功能。</param>
            <param name="collection">集合名称。</param>
            <returns>满足条件的第一个文档。</returns>
        </member>
        <member name="M:Fantasy.DataBase.MongoDataBase.QueryOrderBy``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Boolean,System.Boolean,System.String)">
            <summary>
            通过指定过滤条件查询并返回满足条件的文档列表，并按指定表达式进行排序（加锁）。
            </summary>
            <typeparam name="T">文档实体类型。</typeparam>
            <param name="filter">查询过滤条件。</param>
            <param name="orderByExpression">排序表达式。</param>
            <param name="isAsc">是否升序排序。</param>
            <param name="isDeserialize">是否在查询后反序列化,执行反序列化后会自动将实体注册到框架系统中，并且能正常使用组件相关功能。</param>
            <param name="collection">集合名称。</param>
            <returns>满足条件的文档列表。</returns>
        </member>
        <member name="M:Fantasy.DataBase.MongoDataBase.Query``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Boolean,System.String)">
            <summary>
            通过指定过滤条件查询并返回满足条件的文档列表（加锁）。
            </summary>
            <typeparam name="T">文档实体类型。</typeparam>
            <param name="filter">查询过滤条件。</param>
            <param name="isDeserialize">是否在查询后反序列化,执行反序列化后会自动将实体注册到框架系统中，并且能正常使用组件相关功能。</param>
            <param name="collection">集合名称。</param>
            <returns>满足条件的文档列表。</returns>
        </member>
        <member name="M:Fantasy.DataBase.MongoDataBase.Query(System.Int64,System.Collections.Generic.List{System.String},System.Collections.Generic.List{Fantasy.Entitas.Entity},System.Boolean)">
            <summary>
            根据指定 ID 加锁查询多个集合中的文档。
            </summary>
            <param name="id">文档 ID。</param>
            <param name="collectionNames">要查询的集合名称列表。</param>
            <param name="result">查询结果存储列表。</param>
            <param name="isDeserialize">是否在查询后反序列化,执行反序列化后会自动将实体注册到框架系统中，并且能正常使用组件相关功能。</param>
        </member>
        <member name="M:Fantasy.DataBase.MongoDataBase.QueryJson``1(System.String,System.Boolean,System.String)">
            <summary>
            根据指定的 JSON 查询条件查询并返回满足条件的文档列表（加锁）。
            </summary>
            <typeparam name="T">文档实体类型。</typeparam>
            <param name="json">JSON 查询条件。</param>
            <param name="isDeserialize">是否在查询后反序列化,执行反序列化后会自动将实体注册到框架系统中，并且能正常使用组件相关功能。</param>
            <param name="collection">集合名称。</param>
            <returns>满足条件的文档列表。</returns>
        </member>
        <member name="M:Fantasy.DataBase.MongoDataBase.QueryJson``1(System.String,System.String[],System.Boolean,System.String)">
            <summary>
            根据指定的 JSON 查询条件查询并返回满足条件的文档列表，并选择指定的列（加锁）。
            </summary>
            <typeparam name="T">文档实体类型。</typeparam>
            <param name="json">JSON 查询条件。</param>
            <param name="cols">要查询的列名称数组。</param>
            <param name="isDeserialize">是否在查询后反序列化,执行反序列化后会自动将实体注册到框架系统中，并且能正常使用组件相关功能。</param>
            <param name="collection">集合名称。</param>
            <returns>满足条件的文档列表。</returns>
        </member>
        <member name="M:Fantasy.DataBase.MongoDataBase.QueryJson``1(System.Int64,System.String,System.Boolean,System.String)">
            <summary>
            根据指定的 JSON 查询条件和任务 ID 查询并返回满足条件的文档列表（加锁）。
            </summary>
            <typeparam name="T">文档实体类型。</typeparam>
            <param name="taskId">任务 ID。</param>
            <param name="json">JSON 查询条件。</param>
            <param name="isDeserialize">是否在查询后反序列化,执行反序列化后会自动将实体注册到框架系统中，并且能正常使用组件相关功能。</param>
            <param name="collection">集合名称。</param>
            <returns>满足条件的文档列表。</returns>
        </member>
        <member name="M:Fantasy.DataBase.MongoDataBase.Query``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String[],System.Boolean,System.String)">
            <summary>
            根据指定过滤条件查询并返回满足条件的文档列表，选择指定的列（加锁）。
            </summary>
            <typeparam name="T">文档实体类型。</typeparam>
            <param name="filter">查询过滤条件。</param>
            <param name="cols">要查询的列名称数组。</param>
            <param name="isDeserialize">是否在查询后反序列化,执行反序列化后会自动将实体注册到框架系统中，并且能正常使用组件相关功能。</param>
            <param name="collection">集合名称。</param>
            <returns>满足条件的文档列表。</returns>
        </member>
        <member name="M:Fantasy.DataBase.MongoDataBase.Query``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[],System.Boolean,System.String)">
            <summary>
            根据指定过滤条件查询并返回满足条件的文档列表，选择指定的列（加锁）。
            </summary>
            <param name="filter">文档实体类型。</param>
            <param name="cols">查询过滤条件。</param>
            <param name="isDeserialize">要查询的列名称数组。</param>
            <param name="collection">是否在查询后反序列化,执行反序列化后会自动将实体注册到框架系统中，并且能正常使用组件相关功能。</param>
            <typeparam name="T">集合名称。</typeparam>
            <returns></returns>
        </member>
        <member name="M:Fantasy.DataBase.MongoDataBase.Save``1(System.Object,``0,System.String)">
            <summary>
            保存实体对象到数据库（加锁）。
            </summary>
            <typeparam name="T">实体类型。</typeparam>
            <param name="transactionSession">事务会话对象。</param>
            <param name="entity">要保存的实体对象。</param>
            <param name="collection">集合名称。</param>
        </member>
        <member name="M:Fantasy.DataBase.MongoDataBase.Save``1(``0,System.String)">
            <summary>
            保存实体对象到数据库（加锁）。
            </summary>
            <typeparam name="T">实体类型。</typeparam>
            <param name="entity">要保存的实体对象。</param>
            <param name="collection">集合名称。</param>
        </member>
        <member name="M:Fantasy.DataBase.MongoDataBase.Save``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},``0,System.String)">
            <summary>
            保存实体对象到数据库（加锁）。
            </summary>
            <param name="filter">保存的条件表达式。</param>
            <param name="entity">实体类型。</param>
            <param name="collection">集合名称。</param>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Fantasy.DataBase.MongoDataBase.Save(System.Int64,System.Collections.Generic.List{Fantasy.Entitas.Entity})">
            <summary>
            保存多个实体对象到数据库（加锁）。
            </summary>
            <param name="id">文档 ID。</param>
            <param name="entities">要保存的实体对象列表。</param>
        </member>
        <member name="M:Fantasy.DataBase.MongoDataBase.Insert``1(``0,System.String)">
            <summary>
            插入单个实体对象到数据库（加锁）。
            </summary>
            <typeparam name="T">实体类型。</typeparam>
            <param name="entity">要插入的实体对象。</param>
            <param name="collection">集合名称。</param>
        </member>
        <member name="M:Fantasy.DataBase.MongoDataBase.InsertBatch``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            批量插入实体对象列表到数据库（加锁）。
            </summary>
            <typeparam name="T">实体类型。</typeparam>
            <param name="list">要插入的实体对象列表。</param>
            <param name="collection">集合名称。</param>
        </member>
        <member name="M:Fantasy.DataBase.MongoDataBase.InsertBatch``1(System.Object,System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            批量插入实体对象列表到数据库（加锁）。
            </summary>
            <typeparam name="T">实体类型。</typeparam>
            <param name="transactionSession">事务会话对象。</param>
            <param name="list">要插入的实体对象列表。</param>
            <param name="collection">集合名称。</param>
        </member>
        <member name="M:Fantasy.DataBase.MongoDataBase.Insert``1(MongoDB.Bson.BsonDocument,System.Int64)">
            <summary>
            插入BsonDocument到数据库（加锁）。
            </summary>
            <param name="bsonDocument"></param>
            <param name="taskId"></param>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Fantasy.DataBase.MongoDataBase.Remove``1(System.Object,System.Int64,System.String)">
            <summary>
            根据ID删除单个实体对象（加锁）。
            </summary>
            <typeparam name="T">实体类型。</typeparam>
            <param name="transactionSession">事务会话对象。</param>
            <param name="id">要删除的实体的ID。</param>
            <param name="collection">集合名称。</param>
            <returns>删除的实体数量。</returns>
        </member>
        <member name="M:Fantasy.DataBase.MongoDataBase.Remove``1(System.Int64,System.String)">
            <summary>
            根据ID删除单个实体对象（加锁）。
            </summary>
            <typeparam name="T">实体类型。</typeparam>
            <param name="id">要删除的实体的ID。</param>
            <param name="collection">集合名称。</param>
            <returns>删除的实体数量。</returns>
        </member>
        <member name="M:Fantasy.DataBase.MongoDataBase.Remove``1(System.Int64,System.Object,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String)">
            <summary>
            根据ID和筛选条件删除多个实体对象（加锁）。
            </summary>
            <typeparam name="T">实体类型。</typeparam>
            <param name="coroutineLockQueueKey">异步锁Id。</param>
            <param name="transactionSession">事务会话对象。</param>
            <param name="filter">筛选条件。</param>
            <param name="collection">集合名称。</param>
            <returns>删除的实体数量。</returns>
        </member>
        <member name="M:Fantasy.DataBase.MongoDataBase.Remove``1(System.Int64,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String)">
            <summary>
            根据ID和筛选条件删除多个实体对象（加锁）。
            </summary>
            <typeparam name="T">实体类型。</typeparam>
            <param name="coroutineLockQueueKey">异步锁Id。</param>
            <param name="filter">筛选条件。</param>
            <param name="collection">集合名称。</param>
            <returns>删除的实体数量。</returns>
        </member>
        <member name="M:Fantasy.DataBase.MongoDataBase.CreateIndex``1(System.String,System.Object[])">
            <summary>
            创建数据库索引（加锁）。
            </summary>
            <param name="collection"></param>
            <param name="keys"></param>
            <typeparam name="T"></typeparam>
            <code>
            使用例子(可多个):
            1 : Builders.IndexKeys.Ascending(d=>d.Id)
            2 : Builders.IndexKeys.Descending(d=>d.Id).Ascending(d=>d.Name)
            3 : Builders.IndexKeys.Descending(d=>d.Id),Builders.IndexKeys.Descending(d=>d.Name)
            </code>
        </member>
        <member name="M:Fantasy.DataBase.MongoDataBase.CreateIndex``1(System.Object[])">
            <summary>
            创建数据库的索引（加锁）。
            </summary>
            <typeparam name="T">实体类型。</typeparam>
            <param name="keys">索引键定义。</param>
        </member>
        <member name="M:Fantasy.DataBase.MongoDataBase.CreateDB``1">
            <summary>
            创建数据库集合（如果不存在）。
            </summary>
            <typeparam name="T">实体类型。</typeparam>
        </member>
        <member name="M:Fantasy.DataBase.MongoDataBase.CreateDB(System.Type)">
            <summary>
            创建数据库集合（如果不存在）。
            </summary>
            <param name="type">实体类型。</param>
        </member>
        <member name="T:Fantasy.DataBase.World">
            <summary>
            表示一个游戏世界。
            </summary>
        </member>
        <member name="P:Fantasy.DataBase.World.Id">
            <summary>
            获取游戏世界的唯一标识。
            </summary>
        </member>
        <member name="P:Fantasy.DataBase.World.DataBase">
            <summary>
            获取游戏世界的数据库接口。
            </summary>
        </member>
        <member name="P:Fantasy.DataBase.World.Config">
            <summary>
            获取游戏世界的配置信息。
            </summary>
        </member>
        <member name="M:Fantasy.DataBase.World.#ctor(Fantasy.Scene,System.Byte)">
            <summary>
            使用指定的配置信息创建一个游戏世界实例。
            </summary>
            <param name="scene"></param>
            <param name="worldConfigId"></param>
        </member>
        <member name="M:Fantasy.DataBase.World.Create(Fantasy.Scene,System.Byte)">
            <summary>
            创建一个指定唯一标识的游戏世界实例。
            </summary>
            <param name="scene"></param>
            <param name="id">游戏世界的唯一标识。</param>
            <returns>游戏世界实例。</returns>
        </member>
        <member name="M:Fantasy.DataBase.World.Dispose">
            <summary>
            释放游戏世界资源。
            </summary>
        </member>
        <member name="T:Fantasy.DataStructure.Collection.CircularBuffer">
            环形缓存（自增式缓存，自动扩充、不会收缩缓存、所以不要用这个操作过大的IO流）
            1、环大小8192，溢出的会自动增加环的大小。
            2、每个块都是一个环形缓存，当溢出的时候会自动添加到下一个环中。
            3、当读取完成后用过的环会放在缓存中，不会销毁掉。
            <summary>
            自增式缓存类，继承自 Stream 和 IDisposable 接口。
            环形缓存具有自动扩充的特性，但不会收缩，适用于操作不过大的 IO 流。
            </summary>
        </member>
        <member name="F:Fantasy.DataStructure.Collection.CircularBuffer.ChunkSize">
            <summary>
            环形缓存块的默认大小
            </summary>
        </member>
        <member name="P:Fantasy.DataStructure.Collection.CircularBuffer.FirstIndex">
            <summary>
            获取或设置环形缓存的第一个索引位置
            </summary>
        </member>
        <member name="P:Fantasy.DataStructure.Collection.CircularBuffer.LastIndex">
            <summary>
            获取或设置环形缓存的最后一个索引位置
            </summary>
        </member>
        <member name="P:Fantasy.DataStructure.Collection.CircularBuffer.Length">
            <summary>
            获取环形缓存的总长度
            </summary>
        </member>
        <member name="P:Fantasy.DataStructure.Collection.CircularBuffer.First">
            <summary>
            获取环形缓存的第一个块
            </summary>
        </member>
        <member name="P:Fantasy.DataStructure.Collection.CircularBuffer.Last">
            <summary>
            获取环形缓存的最后一个块
            </summary>
        </member>
        <member name="M:Fantasy.DataStructure.Collection.CircularBuffer.AddLast">
            <summary>
            向环形缓存中添加一个新的块
            </summary>
        </member>
        <member name="M:Fantasy.DataStructure.Collection.CircularBuffer.RemoveFirst">
            <summary>
            从环形缓存中移除第一个块
            </summary>
        </member>
        <member name="M:Fantasy.DataStructure.Collection.CircularBuffer.Read(System.IO.Stream,System.Int32)">
            <summary>
            从流中读取指定数量的数据到缓存。
            </summary>
            <param name="stream">源数据流。</param>
            <param name="count">要读取的字节数。</param>
        </member>
        <member name="M:Fantasy.DataStructure.Collection.CircularBuffer.Read(System.Memory{System.Byte},System.Int32)">
            <summary>
            从缓存中读取指定数量的数据到内存。
            </summary>
            <param name="memory">目标内存。</param>
            <param name="count">要读取的字节数。</param>
        </member>
        <member name="M:Fantasy.DataStructure.Collection.CircularBuffer.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            从自定义流中读取数据到指定的缓冲区。
            </summary>
            <param name="buffer">目标缓冲区，用于存储读取的数据。</param>
            <param name="offset">目标缓冲区中的起始偏移量。</param>
            <param name="count">要读取的字节数。</param>
            <returns>实际读取的字节数。</returns>
        </member>
        <member name="M:Fantasy.DataStructure.Collection.CircularBuffer.Write(System.Byte[])">
            <summary>
            将数据从给定的字节数组写入流中。
            </summary>
            <param name="buffer">包含要写入的数据的字节数组。</param>
        </member>
        <member name="M:Fantasy.DataStructure.Collection.CircularBuffer.Write(System.IO.Stream)">
            <summary>
            将数据从给定的流写入流中。
            </summary>
            <param name="stream">包含要写入的数据的流。</param>
        </member>
        <member name="M:Fantasy.DataStructure.Collection.CircularBuffer.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            将数据从给定的字节数组写入流中。
            </summary>
            <param name="buffer">包含要写入的数据的字节数组。</param>
            <param name="offset">开始写入的缓冲区中的索引。</param>
            <param name="count">要写入的字节数。</param>
        </member>
        <member name="P:Fantasy.DataStructure.Collection.CircularBuffer.CanRead">
            <summary>
            获取一个值，指示流是否支持读取操作。
            </summary>
        </member>
        <member name="P:Fantasy.DataStructure.Collection.CircularBuffer.CanSeek">
            <summary>
            获取一个值，指示流是否支持寻找操作。
            </summary>
        </member>
        <member name="P:Fantasy.DataStructure.Collection.CircularBuffer.CanWrite">
            <summary>
            获取一个值，指示流是否支持写入操作。
            </summary>
        </member>
        <member name="P:Fantasy.DataStructure.Collection.CircularBuffer.Position">
            <summary>
            获取或设置流中的位置。
            </summary>
        </member>
        <member name="M:Fantasy.DataStructure.Collection.CircularBuffer.Flush">
            <summary>
            刷新流（在此实现中引发未实现异常）。
            </summary>
        </member>
        <member name="M:Fantasy.DataStructure.Collection.CircularBuffer.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            在流中寻找特定位置（在此实现中引发未实现异常）。
            </summary>
        </member>
        <member name="M:Fantasy.DataStructure.Collection.CircularBuffer.SetLength(System.Int64)">
            <summary>
            设置流的长度（在此实现中引发未实现异常）。
            </summary>
        </member>
        <member name="M:Fantasy.DataStructure.Collection.CircularBuffer.Dispose">
            <summary>
            释放 CustomStream 使用的所有资源。
            </summary>
        </member>
        <member name="T:Fantasy.DataStructure.Collection.ConcurrentOneToManyListPool`2">
            <summary>
            并发的一对多列表池，用于维护具有相同键的多个值的关联关系，实现了 <see cref="T:System.IDisposable"/> 接口。
            </summary>
            <typeparam name="TKey">关键字的类型，不能为空。</typeparam>
            <typeparam name="TValue">值的类型。</typeparam>
        </member>
        <member name="M:Fantasy.DataStructure.Collection.ConcurrentOneToManyListPool`2.Create">
            <summary>
            创建一个 <see cref="T:Fantasy.DataStructure.Collection.ConcurrentOneToManyListPool`2"/> 的实例。
            </summary>
            <returns>创建的实例。</returns>
        </member>
        <member name="M:Fantasy.DataStructure.Collection.ConcurrentOneToManyListPool`2.Dispose">
            <summary>
            释放实例占用的资源。
            </summary>
        </member>
        <member name="M:Fantasy.DataStructure.Collection.ConcurrentOneToManyListPool`2.IsPool">
            <summary>
            获取一个值，该值指示当前实例是否为对象池中的实例。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fantasy.DataStructure.Collection.ConcurrentOneToManyListPool`2.SetIsPool(System.Boolean)">
            <summary>
            设置一个值，该值指示当前实例是否为对象池中的实例。
            </summary>
            <param name="isPool"></param>
        </member>
        <member name="T:Fantasy.DataStructure.Collection.ConcurrentOneToManyList`2">
            <summary>
            并发的一对多列表，用于维护具有相同键的多个值的关联关系。
            </summary>
            <typeparam name="TKey">关键字的类型，不能为空。</typeparam>
            <typeparam name="TValue">值的类型。</typeparam>
        </member>
        <member name="M:Fantasy.DataStructure.Collection.ConcurrentOneToManyList`2.#ctor">
            <summary>
            初始化 <see cref="T:Fantasy.DataStructure.Collection.ConcurrentOneToManyList`2"/> 类的新实例。
            </summary>
        </member>
        <member name="M:Fantasy.DataStructure.Collection.ConcurrentOneToManyList`2.#ctor(System.Int32)">
            <summary>
            设置最大缓存数量
            </summary>
            <param name="recyclingLimit">
            1:防止数据量过大、所以超过recyclingLimit的数据还是走GC.
            2:设置成0不控制数量，全部缓存
            </param>
        </member>
        <member name="M:Fantasy.DataStructure.Collection.ConcurrentOneToManyList`2.Contains(`0,`1)">
            <summary>
            判断指定键的列表是否包含指定值。
            </summary>
            <param name="key">要搜索的键。</param>
            <param name="value">要搜索的值。</param>
            <returns>如果列表包含值，则为 true；否则为 false。</returns>
        </member>
        <member name="M:Fantasy.DataStructure.Collection.ConcurrentOneToManyList`2.Add(`0,`1)">
            <summary>
            向指定键的列表中添加一个值。
            </summary>
            <param name="key">要添加值的键。</param>
            <param name="value">要添加的值。</param>
        </member>
        <member name="M:Fantasy.DataStructure.Collection.ConcurrentOneToManyList`2.First(`0)">
            <summary>
            获取指定键的列表中的第一个值。
            </summary>
            <param name="key">要获取第一个值的键。</param>
            <returns>指定键的列表中的第一个值，如果不存在则为默认值。</returns>
        </member>
        <member name="M:Fantasy.DataStructure.Collection.ConcurrentOneToManyList`2.RemoveValue(`0,`1)">
            <summary>
            从指定键的列表中移除一个值。
            </summary>
            <param name="key">要移除值的键。</param>
            <param name="value">要移除的值。</param>
        </member>
        <member name="M:Fantasy.DataStructure.Collection.ConcurrentOneToManyList`2.RemoveKey(`0)">
            <summary>
            从字典中移除指定键以及其关联的列表。
            </summary>
            <param name="key">要移除的键。</param>
        </member>
        <member name="M:Fantasy.DataStructure.Collection.ConcurrentOneToManyList`2.Fetch">
            <summary>
            从队列中获取一个列表，如果队列为空则创建一个新的列表。
            </summary>
            <returns>获取的列表。</returns>
        </member>
        <member name="M:Fantasy.DataStructure.Collection.ConcurrentOneToManyList`2.Recycle(System.Collections.Generic.List{`1})">
            <summary>
            将一个列表回收到队列中。
            </summary>
            <param name="list">要回收的列表。</param>
        </member>
        <member name="M:Fantasy.DataStructure.Collection.ConcurrentOneToManyList`2.Clear">
            <summary>
            清空当前类的数据，包括从基类继承的数据以及自定义的数据队列。
            </summary>
        </member>
        <member name="T:Fantasy.DataStructure.Collection.ConcurrentOneToManyQueuePool`2">
            <summary>
            表示一个并发的一对多队列池，用于维护具有相同键的多个值的关联关系，实现了 <see cref="T:System.IDisposable"/> 接口。
            </summary>
            <typeparam name="TKey">关键字的类型，不能为空。</typeparam>
            <typeparam name="TValue">值的类型。</typeparam>
        </member>
        <member name="M:Fantasy.DataStructure.Collection.ConcurrentOneToManyQueuePool`2.Create">
            <summary>
            创建并返回一个 <see cref="T:Fantasy.DataStructure.Collection.ConcurrentOneToManyQueuePool`2"/> 的实例。
            </summary>
            <returns>创建的实例。</returns>
        </member>
        <member name="M:Fantasy.DataStructure.Collection.ConcurrentOneToManyQueuePool`2.Dispose">
            <summary>
            释放当前实例所占用的资源，并将实例返回到对象池中，以便重用。
            </summary>
        </member>
        <member name="M:Fantasy.DataStructure.Collection.ConcurrentOneToManyQueuePool`2.IsPool">
            <summary>
            获取一个值，该值指示当前实例是否为对象池中的实例。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fantasy.DataStructure.Collection.ConcurrentOneToManyQueuePool`2.SetIsPool(System.Boolean)">
            <summary>
            设置一个值，该值指示当前实例是否为对象池中的实例。
            </summary>
            <param name="isPool"></param>
        </member>
        <member name="T:Fantasy.DataStructure.Collection.ConcurrentOneToManyQueue`2">
            <summary>
            表示一个并发的一对多队列，用于维护具有相同键的多个值的关联关系。
            </summary>
            <typeparam name="TKey">关键字的类型，不能为空。</typeparam>
            <typeparam name="TValue">值的类型。</typeparam>
        </member>
        <member name="M:Fantasy.DataStructure.Collection.ConcurrentOneToManyQueue`2.#ctor(System.Int32)">
            <summary>
            设置最大缓存数量
            </summary>
            <param name="recyclingLimit">
            1:防止数据量过大、所以超过recyclingLimit的数据还是走GC.
            2:设置成0不控制数量，全部缓存
            </param>
        </member>
        <member name="M:Fantasy.DataStructure.Collection.ConcurrentOneToManyQueue`2.Contains(`0,`1)">
            <summary>
            判断指定键的队列是否包含指定值。
            </summary>
            <param name="key">要搜索的键。</param>
            <param name="value">要搜索的值。</param>
            <returns>如果队列包含值，则为 true；否则为 false。</returns>
        </member>
        <member name="M:Fantasy.DataStructure.Collection.ConcurrentOneToManyQueue`2.Enqueue(`0,`1)">
            <summary>
            向指定键的队列中添加一个值。
            </summary>
            <param name="key">要添加值的键。</param>
            <param name="value">要添加的值。</param>
        </member>
        <member name="M:Fantasy.DataStructure.Collection.ConcurrentOneToManyQueue`2.Dequeue(`0)">
            <summary>
            从指定键的队列中出队并返回一个值。
            </summary>
            <param name="key">要出队的键。</param>
            <returns>出队的值，如果队列为空则为默认值。</returns>
        </member>
        <member name="M:Fantasy.DataStructure.Collection.ConcurrentOneToManyQueue`2.TryDequeue(`0,`1@)">
            <summary>
            尝试从指定键的队列中出队一个值。
            </summary>
            <param name="key">要出队的键。</param>
            <param name="value">出队的值，如果队列为空则为默认值。</param>
            <returns>如果成功出队，则为 true；否则为 false。</returns>
        </member>
        <member name="M:Fantasy.DataStructure.Collection.ConcurrentOneToManyQueue`2.RemoveKey(`0)">
            <summary>
            从字典中移除指定键以及其关联的队列。
            </summary>
            <param name="key">要移除的键。</param>
        </member>
        <member name="M:Fantasy.DataStructure.Collection.ConcurrentOneToManyQueue`2.Fetch">
            <summary>
            从队列中获取一个新的队列，如果队列为空则创建一个新的队列。
            </summary>
            <returns>获取的队列。</returns>
        </member>
        <member name="M:Fantasy.DataStructure.Collection.ConcurrentOneToManyQueue`2.Recycle(System.Collections.Generic.Queue{`1})">
            <summary>
            将一个队列回收到队列池中。
            </summary>
            <param name="list">要回收的队列。</param>
        </member>
        <member name="M:Fantasy.DataStructure.Collection.ConcurrentOneToManyQueue`2.Clear">
            <summary>
            清空当前类的数据，包括从基类继承的键值对字典中的数据以及自定义的队列池。
            </summary>
        </member>
        <member name="T:Fantasy.DataStructure.Collection.HashSetPool`1">
            <summary>
            可释放的哈希集合对象池。
            </summary>
            <typeparam name="T">哈希集合中元素的类型。</typeparam>
        </member>
        <member name="M:Fantasy.DataStructure.Collection.HashSetPool`1.Dispose">
            <summary>
            释放实例所占用的资源，并将实例返回到对象池中，以便重用。
            </summary>
        </member>
        <member name="M:Fantasy.DataStructure.Collection.HashSetPool`1.Create">
            <summary>
            创建一个 <see cref="T:Fantasy.DataStructure.Collection.HashSetPool`1"/> 哈希集合池的实例。
            </summary>
            <returns>创建的实例。</returns>
        </member>
        <member name="M:Fantasy.DataStructure.Collection.HashSetPool`1.IsPool">
            <summary>
            获取一个值，该值指示当前实例是否为对象池中的实例。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fantasy.DataStructure.Collection.HashSetPool`1.SetIsPool(System.Boolean)">
            <summary>
            设置一个值，该值指示当前实例是否为对象池中的实例。
            </summary>
            <param name="isPool"></param>
        </member>
        <member name="T:Fantasy.DataStructure.Collection.HashSetBasePool`1">
            <summary>
            基本哈希集合对象池，他自持有实际的哈希集合。
            </summary>
            <typeparam name="T">哈希集合中元素的类型。</typeparam>
        </member>
        <member name="F:Fantasy.DataStructure.Collection.HashSetBasePool`1.Set">
            <summary>
            存储实际的哈希集合
            </summary>
        </member>
        <member name="M:Fantasy.DataStructure.Collection.HashSetBasePool`1.Create">
            <summary>
            创建一个 <see cref="T:Fantasy.DataStructure.Collection.HashSetBasePool`1"/> 基本哈希集合对象池的实例。
            </summary>
            <returns>创建的实例。</returns>
        </member>
        <member name="M:Fantasy.DataStructure.Collection.HashSetBasePool`1.Dispose">
            <summary>
            释放实例所占用的资源，并将实例返回到对象池中，以便重用。
            </summary>
        </member>
        <member name="M:Fantasy.DataStructure.Collection.HashSetBasePool`1.IsPool">
            <summary>
            获取一个值，该值指示当前实例是否为对象池中的实例。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fantasy.DataStructure.Collection.HashSetBasePool`1.SetIsPool(System.Boolean)">
            <summary>
            设置一个值，该值指示当前实例是否为对象池中的实例。
            </summary>
            <param name="isPool"></param>
        </member>
        <member name="T:Fantasy.DataStructure.Collection.ListPool`1">
            <summary>
            可释放的列表（List）对象池。
            </summary>
            <typeparam name="T">列表中元素的类型。</typeparam>
        </member>
        <member name="M:Fantasy.DataStructure.Collection.ListPool`1.Dispose">
            <summary>
            释放实例所占用的资源，并将实例返回到对象池中，以便重用。
            </summary>
        </member>
        <member name="M:Fantasy.DataStructure.Collection.ListPool`1.Create(`0[])">
            <summary>
            使用指定的元素创建一个 <see cref="T:Fantasy.DataStructure.Collection.ListPool`1"/> 列表（List）对象池的实例。
            </summary>
            <param name="args">要添加到列表的元素。</param>
            <returns>创建的实例。</returns>
        </member>
        <member name="M:Fantasy.DataStructure.Collection.ListPool`1.Create(System.Collections.Generic.List{`0})">
            <summary>
            使用指定的列表创建一个 <see cref="T:Fantasy.DataStructure.Collection.ListPool`1"/> 列表（List）对象池的实例。
            </summary>
            <param name="args">要添加到列表的元素列表。</param>
            <returns>创建的实例。</returns>
        </member>
        <member name="M:Fantasy.DataStructure.Collection.ListPool`1.IsPool">
            <summary>
            获取一个值，该值指示当前实例是否为对象池中的实例。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fantasy.DataStructure.Collection.ListPool`1.SetIsPool(System.Boolean)">
            <summary>
            设置一个值，该值指示当前实例是否为对象池中的实例。
            </summary>
            <param name="isPool"></param>
        </member>
        <member name="T:Fantasy.DataStructure.Collection.OneToManyHashSetPool`2">
            <summary>
            一对多哈希集合（OneToManyHashSet）对象池。
            </summary>
            <typeparam name="TKey">键的类型。</typeparam>
            <typeparam name="TValue">值的类型。</typeparam>
        </member>
        <member name="M:Fantasy.DataStructure.Collection.OneToManyHashSetPool`2.Create">
            <summary>
            创建一个 <see cref="T:Fantasy.DataStructure.Collection.OneToManyHashSetPool`2"/> 一对多哈希集合（OneToManyHashSet）对象池的实例。
            </summary>
            <returns>创建的实例。</returns>
        </member>
        <member name="M:Fantasy.DataStructure.Collection.OneToManyHashSetPool`2.Dispose">
            <summary>
            释放实例所占用的资源，并将实例返回到对象池中，以便重用。
            </summary>
        </member>
        <member name="M:Fantasy.DataStructure.Collection.OneToManyHashSetPool`2.IsPool">
            <summary>
            获取一个值，该值指示当前实例是否为对象池中的实例。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fantasy.DataStructure.Collection.OneToManyHashSetPool`2.SetIsPool(System.Boolean)">
            <summary>
            设置一个值，该值指示当前实例是否为对象池中的实例。
            </summary>
            <param name="isPool"></param>
        </member>
        <member name="T:Fantasy.DataStructure.Collection.OneToManyHashSet`2">
            <summary>
            一对多哈希集合（OneToManyHashSet），用于创建和管理键对应多个值的集合。
            </summary>
            <typeparam name="TKey">键的类型。</typeparam>
            <typeparam name="TValue">值的类型。</typeparam>
        </member>
        <member name="F:Fantasy.DataStructure.Collection.OneToManyHashSet`2._queue">
            用于回收和重用的空闲值集合队列。
        </member>
        <member name="F:Fantasy.DataStructure.Collection.OneToManyHashSet`2._recyclingLimit">
            设置最大回收限制，用于控制值集合的最大数量。
        </member>
        <member name="F:Fantasy.DataStructure.Collection.OneToManyHashSet`2._empty">
            一个空的、不包含任何元素的哈希集合，用于在查找失败时返回。
        </member>
        <member name="M:Fantasy.DataStructure.Collection.OneToManyHashSet`2.#ctor">
            <summary>
            初始化 <see cref="T:Fantasy.DataStructure.Collection.OneToManyHashSet`2"/> 类的新实例。
            </summary>
        </member>
        <member name="M:Fantasy.DataStructure.Collection.OneToManyHashSet`2.#ctor(System.Int32)">
            <summary>
            设置最大缓存数量
            </summary>
            <param name="recyclingLimit">
                1:防止数据量过大、所以超过recyclingLimit的数据还是走GC.
                2:设置成0不控制数量，全部缓存
            </param>
        </member>
        <member name="M:Fantasy.DataStructure.Collection.OneToManyHashSet`2.Contains(`0,`1)">
            <summary>
            判断指定的键值对是否存在于集合中。
            </summary>
            <param name="key">键。</param>
            <param name="value">值。</param>
            <returns>如果存在则为 true，否则为 false。</returns>
        </member>
        <member name="M:Fantasy.DataStructure.Collection.OneToManyHashSet`2.Add(`0,`1)">
            <summary>
            添加指定的键值对到集合中。
            </summary>
            <param name="key">键。</param>
            <param name="value">值。</param>
        </member>
        <member name="M:Fantasy.DataStructure.Collection.OneToManyHashSet`2.RemoveValue(`0,`1)">
            <summary>
            从集合中移除指定键对应的值。
            </summary>
            <param name="key">键。</param>
            <param name="value">要移除的值。</param>
        </member>
        <member name="M:Fantasy.DataStructure.Collection.OneToManyHashSet`2.RemoveKey(`0)">
            <summary>
            从集合中移除指定键及其对应的值集合。
            </summary>
            <param name="key">键。</param>
        </member>
        <member name="M:Fantasy.DataStructure.Collection.OneToManyHashSet`2.GetValue(`0)">
            <summary>
            获取指定键对应的值集合，如果不存在则返回一个空的哈希集合。
            </summary>
            <param name="key">键。</param>
            <returns>对应的值集合或空的哈希集合。</returns>
        </member>
        <member name="M:Fantasy.DataStructure.Collection.OneToManyHashSet`2.Fetch">
            <summary>
            从队列中获取一个空闲的值集合，或者创建一个新的。
            </summary>
            <returns>值集合。</returns>
        </member>
        <member name="M:Fantasy.DataStructure.Collection.OneToManyHashSet`2.Recycle(System.Collections.Generic.HashSet{`1})">
            <summary>
            回收值集合到队列中，以便重复利用。
            </summary>
            <param name="list">要回收的值集合。</param>
        </member>
        <member name="M:Fantasy.DataStructure.Collection.OneToManyHashSet`2.Clear">
            <summary>
            清空集合中的数据并和队列。
            </summary>
        </member>
        <member name="T:Fantasy.DataStructure.Collection.OneToManyListPool`2">
            <summary>
            可回收的、一对多关系的列表池。
            </summary>
            <typeparam name="TKey">键的类型。</typeparam>
            <typeparam name="TValue">值的类型。</typeparam>
        </member>
        <member name="M:Fantasy.DataStructure.Collection.OneToManyListPool`2.Create">
            <summary>
            创建一个 <see cref="T:Fantasy.DataStructure.Collection.OneToManyListPool`2"/> 一对多关系的列表池的实例。
            </summary>
            <returns>创建的实例。</returns>
        </member>
        <member name="M:Fantasy.DataStructure.Collection.OneToManyListPool`2.Dispose">
            <summary>
            释放当前对象所占用的资源，并将对象回收到对象池中。
            </summary>
        </member>
        <member name="M:Fantasy.DataStructure.Collection.OneToManyListPool`2.IsPool">
            <summary>
            获取一个值，该值指示当前实例是否为对象池中的实例。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fantasy.DataStructure.Collection.OneToManyListPool`2.SetIsPool(System.Boolean)">
            <summary>
            设置一个值，该值指示当前实例是否为对象池中的实例。
            </summary>
            <param name="isPool"></param>
        </member>
        <member name="T:Fantasy.DataStructure.Collection.OneToManyList`2">
            <summary>
            一对多关系的列表字典。
            </summary>
            <typeparam name="TKey">键的类型。</typeparam>
            <typeparam name="TValue">值的类型。</typeparam>
        </member>
        <member name="M:Fantasy.DataStructure.Collection.OneToManyList`2.#ctor">
            <summary>
            初始化一个新的 <see cref="T:Fantasy.DataStructure.Collection.OneToManyList`2"/> 实例。
            </summary>
        </member>
        <member name="M:Fantasy.DataStructure.Collection.OneToManyList`2.#ctor(System.Int32)">
            <summary>
            设置最大缓存数量
            </summary>
            <param name="recyclingLimit">
            1:防止数据量过大、所以超过recyclingLimit的数据还是走GC.
            2:设置成0不控制数量，全部缓存
            </param>
        </member>
        <member name="M:Fantasy.DataStructure.Collection.OneToManyList`2.Contains(`0,`1)">
            <summary>
            判断给定的键和值是否存在于列表中。
            </summary>
            <param name="key">要搜索的键。</param>
            <param name="value">要搜索的值。</param>
            <returns>如果存在则为 <see langword="true"/>，否则为 <see langword="false"/>。</returns>
        </member>
        <member name="M:Fantasy.DataStructure.Collection.OneToManyList`2.Add(`0,`1)">
            <summary>
            向列表中添加指定键和值。
            </summary>
            <param name="key">要添加值的键。</param>
            <param name="value">要添加的值。</param>
        </member>
        <member name="M:Fantasy.DataStructure.Collection.OneToManyList`2.First(`0)">
            <summary>
            获取指定键对应的列表中的第一个值。
            </summary>
            <param name="key">要获取值的键。</param>
            <returns>键对应的列表中的第一个值。</returns>
        </member>
        <member name="M:Fantasy.DataStructure.Collection.OneToManyList`2.RemoveValue(`0,`1)">
            <summary>
            从列表中移除指定键和值。
            </summary>
            <param name="key">要移除值的键。</param>
            <param name="value">要移除的值。</param>
            <returns>如果成功移除则为 <see langword="true"/>，否则为 <see langword="false"/>。</returns>
        </member>
        <member name="M:Fantasy.DataStructure.Collection.OneToManyList`2.RemoveByKey(`0)">
            <summary>
            从列表中移除指定键及其关联的所有值。
            </summary>
            <param name="key">要移除的键。</param>
            <returns>如果成功移除则为 <see langword="true"/>，否则为 <see langword="false"/>。</returns>
        </member>
        <member name="M:Fantasy.DataStructure.Collection.OneToManyList`2.GetValues(`0)">
            <summary>
            获取指定键关联的所有值的列表。
            </summary>
            <param name="key">要获取值的键。</param>
            <returns>键关联的所有值的列表。</returns>
        </member>
        <member name="M:Fantasy.DataStructure.Collection.OneToManyList`2.Clear">
            <summary>
            清除字典中的所有键值对，并回收相关的值集合。
            </summary>
        </member>
        <member name="M:Fantasy.DataStructure.Collection.OneToManyList`2.Fetch">
            <summary>
            从空闲值集合队列中获取一个值集合，如果队列为空则创建一个新的值集合。
            </summary>
            <returns>从队列中获取的值集合。</returns>
        </member>
        <member name="M:Fantasy.DataStructure.Collection.OneToManyList`2.Recycle(System.Collections.Generic.List{`1})">
            <summary>
            回收一个不再使用的值集合到空闲值集合队列中。
            </summary>
            <param name="list">要回收的值集合。</param>
        </member>
        <member name="T:Fantasy.DataStructure.Collection.OneToManyQueuePool`2">
            <summary>
            支持一对多关系的队列池，用于存储具有相同键的值的队列集合。
            </summary>
            <typeparam name="TKey">键的类型。</typeparam>
            <typeparam name="TValue">值的类型。</typeparam>
        </member>
        <member name="M:Fantasy.DataStructure.Collection.OneToManyQueuePool`2.Create">
            <summary>
            创建一个 <see cref="T:Fantasy.DataStructure.Collection.OneToManyQueuePool`2"/> 一对多关系的队列池的实例。
            </summary>
            <returns>创建的实例。</returns>
        </member>
        <member name="M:Fantasy.DataStructure.Collection.OneToManyQueuePool`2.Dispose">
            <summary>
            释放当前实例所占用的资源，并将实例回收到对象池中。
            </summary>
        </member>
        <member name="M:Fantasy.DataStructure.Collection.OneToManyQueuePool`2.IsPool">
            <summary>
            获取一个值，该值指示当前实例是否为对象池中的实例。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fantasy.DataStructure.Collection.OneToManyQueuePool`2.SetIsPool(System.Boolean)">
            <summary>
            设置一个值，该值指示当前实例是否为对象池中的实例。
            </summary>
            <param name="isPool"></param>
        </member>
        <member name="T:Fantasy.DataStructure.Collection.OneToManyQueue`2">
            <summary>
            支持一对多关系的队列，用于存储具有相同键的值的队列集合。
            </summary>
            <typeparam name="TKey">键的类型。</typeparam>
            <typeparam name="TValue">值的类型。</typeparam>
        </member>
        <member name="M:Fantasy.DataStructure.Collection.OneToManyQueue`2.#ctor(System.Int32)">
            <summary>
            创建一个 <see cref="T:Fantasy.DataStructure.Collection.OneToManyQueue`2"/> 一对多关系的队列的实例。设置最大缓存数量
            </summary>
            <param name="recyclingLimit">
            1:防止数据量过大、所以超过recyclingLimit的数据还是走GC.
            2:设置成0不控制数量，全部缓存
            </param>
        </member>
        <member name="M:Fantasy.DataStructure.Collection.OneToManyQueue`2.Contains(`0,`1)">
            <summary>
            判断指定键的值队列是否包含指定的值。
            </summary>
            <param name="key">要查找的键。</param>
            <param name="value">要查找的值。</param>
            <returns>如果存在，则为 <c>true</c>；否则为 <c>false</c>。</returns>
        </member>
        <member name="M:Fantasy.DataStructure.Collection.OneToManyQueue`2.Enqueue(`0,`1)">
            <summary>
            将指定的值添加到指定键的值队列中。
            </summary>
            <param name="key">要添加值的键。</param>
            <param name="value">要添加的值。</param>
        </member>
        <member name="M:Fantasy.DataStructure.Collection.OneToManyQueue`2.Dequeue(`0)">
            <summary>
            从指定键的值队列中出队一个值。
            </summary>
            <param name="key">要出队的键。</param>
            <returns>出队的值。</returns>
        </member>
        <member name="M:Fantasy.DataStructure.Collection.OneToManyQueue`2.TryDequeue(`0,`1@)">
            <summary>
            尝试从指定键的值队列中出队一个值。
            </summary>
            <param name="key">要出队的键。</param>
            <param name="value">出队的值。</param>
            <returns>如果成功出队，则为 <c>true</c>；否则为 <c>false</c>。</returns>
        </member>
        <member name="M:Fantasy.DataStructure.Collection.OneToManyQueue`2.RemoveKey(`0)">
            <summary>
            从字典中移除指定键及其对应的值队列。
            </summary>
            <param name="key">要移除的键。</param>
        </member>
        <member name="M:Fantasy.DataStructure.Collection.OneToManyQueue`2.Fetch">
            <summary>
            从队列池中获取一个值队列。如果队列池为空，则创建一个新的值队列。
            </summary>
            <returns>获取的值队列。</returns>
        </member>
        <member name="M:Fantasy.DataStructure.Collection.OneToManyQueue`2.Recycle(System.Collections.Generic.Queue{`1})">
            <summary>
            回收一个不再使用的值队列到队列池中，以便重用。
            </summary>
            <param name="list">要回收的值队列。</param>
        </member>
        <member name="M:Fantasy.DataStructure.Collection.OneToManyQueue`2.Clear">
            <summary>
            清空当前实例的数据，同时回收所有值队列。
            </summary>
        </member>
        <member name="T:Fantasy.DataStructure.Collection.ReuseList`1">
            <summary>
            可重用的列表，继承自 <see cref="T:System.Collections.Generic.List`1"/> 类。该类支持通过对象池重用列表实例，以减少对象分配和释放的开销。
            </summary>
            <typeparam name="T">列表中元素的类型。</typeparam>
        </member>
        <member name="M:Fantasy.DataStructure.Collection.ReuseList`1.Create">
            <summary>
            创建一个 <see cref="T:Fantasy.DataStructure.Collection.ReuseList`1"/> 可重用的列表的实例。
            </summary>
            <returns>创建的实例。</returns>
        </member>
        <member name="M:Fantasy.DataStructure.Collection.ReuseList`1.Dispose">
            <summary>
            释放该实例所占用的资源，并将实例返回到对象池中，以便重用。
            </summary>
        </member>
        <member name="M:Fantasy.DataStructure.Collection.ReuseList`1.IsPool">
            <summary>
            获取一个值，该值指示当前实例是否为对象池中的实例。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fantasy.DataStructure.Collection.ReuseList`1.SetIsPool(System.Boolean)">
            <summary>
            设置一个值，该值指示当前实例是否为对象池中的实例。
            </summary>
            <param name="isPool"></param>
        </member>
        <member name="T:Fantasy.DataStructure.Collection.SortedConcurrentOneToManyListPool`2">
            <summary>
            基于排序字典和并发集合实现的一对多映射列表的对象池包装类，继承自 <see cref="T:Fantasy.DataStructure.Collection.SortedConcurrentOneToManyList`2"/> 类，
            同时实现了 <see cref="T:System.IDisposable"/> 接口，以支持对象的重用和释放。
            </summary>
            <typeparam name="TKey">键的类型。</typeparam>
            <typeparam name="TValue">值的类型。</typeparam>
        </member>
        <member name="M:Fantasy.DataStructure.Collection.SortedConcurrentOneToManyListPool`2.Create">
            <summary>
            创建一个新的 <see cref="T:Fantasy.DataStructure.Collection.SortedConcurrentOneToManyListPool`2"/> 实例，使用默认的参数设置。
            </summary>
            <returns>新创建的 <see cref="T:Fantasy.DataStructure.Collection.SortedConcurrentOneToManyListPool`2"/> 实例。</returns>
        </member>
        <member name="M:Fantasy.DataStructure.Collection.SortedConcurrentOneToManyListPool`2.Dispose">
            <summary>
            释放当前对象池实例，将其返回到对象池以供重用。
            </summary>
        </member>
        <member name="M:Fantasy.DataStructure.Collection.SortedConcurrentOneToManyListPool`2.IsPool">
            <summary>
            获取一个值，该值指示当前实例是否为对象池中的实例。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fantasy.DataStructure.Collection.SortedConcurrentOneToManyListPool`2.SetIsPool(System.Boolean)">
            <summary>
            设置一个值，该值指示当前实例是否为对象池中的实例。
            </summary>
            <param name="isPool"></param>
        </member>
        <member name="T:Fantasy.DataStructure.Collection.SortedConcurrentOneToManyList`2">
            <summary>
            基于排序字典和并发集合实现的一多对映射列表类，继承自 <see cref="T:System.Collections.Generic.SortedDictionary`2"/> 类，
            用于在多个值与一个键关联的情况下进行管理和存储。该类支持并发操作，适用于多线程环境。
            </summary>
            <typeparam name="TKey">键的类型。</typeparam>
            <typeparam name="TValue">值的类型。</typeparam>
        </member>
        <member name="F:Fantasy.DataStructure.Collection.SortedConcurrentOneToManyList`2._lockObject">
            用于同步操作的锁对象，它确保在多线程环境下对数据的安全访问。
        </member>
        <member name="F:Fantasy.DataStructure.Collection.SortedConcurrentOneToManyList`2._queue">
            用于存储缓存的队列。
        </member>
        <member name="F:Fantasy.DataStructure.Collection.SortedConcurrentOneToManyList`2._recyclingLimit">
            控制缓存回收的限制。当缓存的数量超过此限制时，旧的缓存将会被回收。
        </member>
        <member name="M:Fantasy.DataStructure.Collection.SortedConcurrentOneToManyList`2.#ctor">
            <summary>
            初始化一个新的 <see cref="T:Fantasy.DataStructure.Collection.SortedConcurrentOneToManyList`2"/> 类的实例，使用默认的参数设置。
            </summary>
        </member>
        <member name="M:Fantasy.DataStructure.Collection.SortedConcurrentOneToManyList`2.#ctor(System.Int32)">
            <summary>
            初始化一个新的 <see cref="T:Fantasy.DataStructure.Collection.SortedConcurrentOneToManyList`2"/> 类的实例，指定最大缓存数量。
            </summary>
            <param name="recyclingLimit">
            1:防止数据量过大、所以超过recyclingLimit的数据还是走GC.
            2:设置成0不控制数量，全部缓存
            </param>
        </member>
        <member name="M:Fantasy.DataStructure.Collection.SortedConcurrentOneToManyList`2.Contains(`0,`1)">
            <summary>
            检查指定的键和值是否存在于映射列表中。
            </summary>
            <param name="key">要检查的键。</param>
            <param name="value">要检查的值。</param>
            <returns>如果存在，则为 true；否则为 false。</returns>
        </member>
        <member name="M:Fantasy.DataStructure.Collection.SortedConcurrentOneToManyList`2.Add(`0,`1)">
            <summary>
            将指定的值添加到与指定键关联的列表中。
            </summary>
            <param name="key">要关联值的键。</param>
            <param name="value">要添加到列表的值。</param>
        </member>
        <member name="M:Fantasy.DataStructure.Collection.SortedConcurrentOneToManyList`2.First(`0)">
            <summary>
            获取与指定键关联的列表中的第一个值。
            如果列表不存在或为空，则返回默认值。
            </summary>
            <param name="key">要获取第一个值的键。</param>
            <returns>第一个值，或默认值。</returns>
        </member>
        <member name="M:Fantasy.DataStructure.Collection.SortedConcurrentOneToManyList`2.RemoveValue(`0,`1)">
            <summary>
            从与指定键关联的列表中移除指定的值。
            如果列表不存在或值不存在于列表中，则不执行任何操作。
            </summary>
            <param name="key">要移除值的键。</param>
            <param name="value">要移除的值。</param>
        </member>
        <member name="M:Fantasy.DataStructure.Collection.SortedConcurrentOneToManyList`2.RemoveKey(`0)">
            <summary>
            从映射列表中移除指定的键及其关联的列表。
            如果键不存在于映射列表中，则不执行任何操作。
            </summary>
            <param name="key">要移除的键。</param>
        </member>
        <member name="M:Fantasy.DataStructure.Collection.SortedConcurrentOneToManyList`2.Fetch">
            <summary>
            从缓存中获取一个可重用的列表。如果缓存中不存在列表，则创建一个新的列表并返回。
            </summary>
            <returns>可重用的列表。</returns>
        </member>
        <member name="M:Fantasy.DataStructure.Collection.SortedConcurrentOneToManyList`2.Recycle(System.Collections.Generic.List{`1})">
            <summary>
            将不再使用的列表回收到缓存中，以便重复利用。如果缓存数量超过限制，则丢弃列表而不进行回收。
            </summary>
            <param name="list">要回收的列表。</param>
        </member>
        <member name="M:Fantasy.DataStructure.Collection.SortedConcurrentOneToManyList`2.Clear">
            <summary>
            清空映射列表以及队列。
            </summary>
        </member>
        <member name="T:Fantasy.DataStructure.Collection.SortedOneToManyHashSetPool`2">
            <summary>
            基于排序字典实现的一对多关系的映射哈希集合的对象池包装类，将唯一键映射到多个值的哈希集合。
            同时实现了 <see cref="T:System.IDisposable"/> 接口，以支持对象的重用和释放。
            </summary>
            <typeparam name="TKey">字典中键的类型。</typeparam>
            <typeparam name="TValue">哈希集合中值的类型。</typeparam>
        </member>
        <member name="M:Fantasy.DataStructure.Collection.SortedOneToManyHashSetPool`2.Create">
            <summary>
            创建一个 <see cref="T:Fantasy.DataStructure.Collection.SortedOneToManyHashSetPool`2"/> 实例。
            </summary>
            <returns>新创建的实例。</returns>
        </member>
        <member name="M:Fantasy.DataStructure.Collection.SortedOneToManyHashSetPool`2.Dispose">
            <summary>
            释放当前对象池实例，将其返回到对象池以供重用。
            </summary>
        </member>
        <member name="M:Fantasy.DataStructure.Collection.SortedOneToManyHashSetPool`2.IsPool">
            <summary>
            获取一个值，该值指示当前实例是否为对象池中的实例。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fantasy.DataStructure.Collection.SortedOneToManyHashSetPool`2.SetIsPool(System.Boolean)">
            <summary>
            设置一个值，该值指示当前实例是否为对象池中的实例。
            </summary>
            <param name="isPool"></param>
        </member>
        <member name="T:Fantasy.DataStructure.Collection.SortedOneToManyHashSet`2">
            <summary>
            基于排序字典实现的一对多关系的映射哈希集合类，将唯一键映射到多个值的哈希集合。
            用于在多个值与一个键关联的情况下进行管理和存储。
            </summary>
            <typeparam name="TKey">字典中键的类型。</typeparam>
            <typeparam name="TValue">集合中值的类型。</typeparam>
        </member>
        <member name="M:Fantasy.DataStructure.Collection.SortedOneToManyHashSet`2.#ctor">
            <summary>
            创建一个新的 <see cref="T:Fantasy.DataStructure.Collection.SortedOneToManyHashSet`2"/> 实例。
            </summary>
        </member>
        <member name="M:Fantasy.DataStructure.Collection.SortedOneToManyHashSet`2.#ctor(System.Int32)">
            <summary>
            创建一个新的 <see cref="T:Fantasy.DataStructure.Collection.SortedOneToManyHashSet`2"/> 实例，设置最大缓存数量
            </summary>
            <param name="recyclingLimit">
            1:防止数据量过大、所以超过recyclingLimit的数据还是走GC.
            2:设置成0不控制数量，全部缓存
            </param>
        </member>
        <member name="M:Fantasy.DataStructure.Collection.SortedOneToManyHashSet`2.Contains(`0,`1)">
            <summary>
            判断哈希集合中是否包含指定的键值对。
            </summary>
            <param name="key">要查找的键。</param>
            <param name="value">要查找的值。</param>
            <returns>如果键值对存在，则为 true；否则为 false。</returns>
        </member>
        <member name="M:Fantasy.DataStructure.Collection.SortedOneToManyHashSet`2.Add(`0,`1)">
            <summary>
            将指定值添加到给定键关联的哈希集合中。
            </summary>
            <param name="key">要添加值的键。</param>
            <param name="value">要添加的值。</param>
        </member>
        <member name="M:Fantasy.DataStructure.Collection.SortedOneToManyHashSet`2.RemoveValue(`0,`1)">
            <summary>
            从指定键关联的哈希集合中移除特定值。
            如果哈希集合不存在或值不存在于集合中，则不执行任何操作。
            </summary>
            <param name="key">要移除值的键。</param>
            <param name="value">要移除的值。</param>
        </member>
        <member name="M:Fantasy.DataStructure.Collection.SortedOneToManyHashSet`2.RemoveKey(`0)">
            <summary>
            从字典中移除指定键以及关联的哈希集合，并将集合进行回收。
            如果键不存在于映射列表中，则不执行任何操作。
            </summary>
            <param name="key">要移除的键。</param>
        </member>
        <member name="M:Fantasy.DataStructure.Collection.SortedOneToManyHashSet`2.Fetch">
            <summary>
            获取一个空的或回收的哈希集合。
            </summary>
            <returns>获取的哈希集合实例。</returns>
        </member>
        <member name="M:Fantasy.DataStructure.Collection.SortedOneToManyHashSet`2.Recycle(System.Collections.Generic.HashSet{`1})">
            <summary>
            回收一个哈希集合，将其清空并放入回收队列中。
            </summary>
            <param name="list">要回收的哈希集合。</param>
        </member>
        <member name="M:Fantasy.DataStructure.Collection.SortedOneToManyHashSet`2.Clear">
            <summary>
            重写 Clear 方法，清空字典并清空回收队列。
            </summary>
        </member>
        <member name="T:Fantasy.DataStructure.Collection.SortedOneToManyListPool`2">
            <summary>
            基于排序字典实现的一对多映射列表的对象池包装类，继承自 <see cref="T:Fantasy.DataStructure.Collection.SortedOneToManyList`2"/> 类，
            同时实现了 <see cref="T:System.IDisposable"/> 接口，以支持对象的重用和释放。
            </summary>
            <typeparam name="TKey">字典中键的类型。</typeparam>
            <typeparam name="TValue">列表中值的类型。</typeparam>
        </member>
        <member name="M:Fantasy.DataStructure.Collection.SortedOneToManyListPool`2.Create">
            <summary>
            创建一个 <see cref="T:Fantasy.DataStructure.Collection.SortedOneToManyListPool`2"/> 实例。
            </summary>
            <returns>新创建的实例。</returns>
        </member>
        <member name="M:Fantasy.DataStructure.Collection.SortedOneToManyListPool`2.Dispose">
            <summary>
            释放当前对象池实例，将其返回到对象池以供重用。
            </summary>
        </member>
        <member name="M:Fantasy.DataStructure.Collection.SortedOneToManyListPool`2.IsPool">
            <summary>
            获取一个值，该值指示当前实例是否为对象池中的实例。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fantasy.DataStructure.Collection.SortedOneToManyListPool`2.SetIsPool(System.Boolean)">
            <summary>
            设置一个值，该值指示当前实例是否为对象池中的实例。
            </summary>
            <param name="isPool"></param>
        </member>
        <member name="T:Fantasy.DataStructure.Collection.SortedOneToManyList`2">
            <summary>
            基于排序字典实现的一对多关系的映射列表类，将唯一键映射到包含多个值的列表。
            用于在多个值与一个键关联的情况下进行管理和存储。
            </summary>
            <typeparam name="TKey">字典中键的类型。</typeparam>
            <typeparam name="TValue">列表中值的类型。</typeparam>
        </member>
        <member name="M:Fantasy.DataStructure.Collection.SortedOneToManyList`2.#ctor">
            <summary>
            创建一个新的 <see cref="T:Fantasy.DataStructure.Collection.SortedOneToManyList`2"/> 实例。
            </summary>
        </member>
        <member name="M:Fantasy.DataStructure.Collection.SortedOneToManyList`2.#ctor(System.Int32)">
            <summary>
            创建一个新的 <see cref="T:Fantasy.DataStructure.Collection.SortedOneToManyList`2"/> 实例，设置最大缓存数量
            </summary>
            <param name="recyclingLimit">
            1:防止数据量过大、所以超过recyclingLimit的数据还是走GC.
            2:设置成0不控制数量，全部缓存
            </param>
        </member>
        <member name="M:Fantasy.DataStructure.Collection.SortedOneToManyList`2.Contains(`0,`1)">
            <summary>
            判断列表中是否包含指定的键值对。
            </summary>
            <param name="key">要查找的键。</param>
            <param name="value">要查找的值。</param>
            <returns>如果键值对存在，则为 true；否则为 false。</returns>
        </member>
        <member name="M:Fantasy.DataStructure.Collection.SortedOneToManyList`2.Add(`0,`1)">
            <summary>
            将指定值添加到给定键关联的列表中。
            </summary>
            <param name="key">要添加值的键。</param>
            <param name="value">要添加的值。</param>
        </member>
        <member name="M:Fantasy.DataStructure.Collection.SortedOneToManyList`2.First(`0)">
            <summary>
            获取指定键关联的列表中的第一个值。
            </summary>
            <param name="key">要查找值的键。</param>
            <returns>指定键关联的列表中的第一个值，如果列表为空则返回默认值。</returns>
        </member>
        <member name="M:Fantasy.DataStructure.Collection.SortedOneToManyList`2.RemoveValue(`0,`1)">
            <summary>
            从指定键关联的列表中移除特定值。
            </summary>
            <param name="key">要移除值的键。</param>
            <param name="value">要移除的值。</param>
        </member>
        <member name="M:Fantasy.DataStructure.Collection.SortedOneToManyList`2.RemoveKey(`0)">
            <summary>
            从字典中移除指定键以及关联的列表，并将列表进行回收。
            </summary>
            <param name="key">要移除的键。</param>
        </member>
        <member name="M:Fantasy.DataStructure.Collection.SortedOneToManyList`2.Fetch">
            <summary>
            获取一个空的或回收的列表。
            </summary>
            <returns>获取的列表实例。</returns>
        </member>
        <member name="M:Fantasy.DataStructure.Collection.SortedOneToManyList`2.Recycle(System.Collections.Generic.List{`1})">
            <summary>
            回收一个列表，将其清空并放入回收队列中。如果缓存数量超过限制，则丢弃列表而不进行回收
            </summary>
            <param name="list">要回收的列表。</param>
        </member>
        <member name="M:Fantasy.DataStructure.Collection.SortedOneToManyList`2.Clear">
            <summary>
            重写 Clear 方法，清空字典并清空回收队列。
            </summary>
        </member>
        <member name="T:Fantasy.DataStructure.Dictionary.DictionaryExtensions">
            <summary>
            提供对字典的扩展方法。
            </summary>
        </member>
        <member name="M:Fantasy.DataStructure.Dictionary.DictionaryExtensions.TryRemove``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1@)">
            <summary>
            尝试从字典中移除指定键，并返回相应的值。
            </summary>
            <typeparam name="T">字典中键的类型。</typeparam>
            <typeparam name="TV">字典中值的类型。</typeparam>
            <param name="self">要操作的字典实例。</param>
            <param name="key">要移除的键。</param>
            <param name="value">从字典中移除的值（如果成功移除）。</param>
            <returns>如果成功移除键值对，则为 true；否则为 false。</returns>
        </member>
        <member name="T:Fantasy.DataStructure.Dictionary.DictionaryPool`2">
            <summary>
            提供一个可以使用对象池管理的字典类。
            </summary>
            <typeparam name="TM">字典中键的类型。</typeparam>
            <typeparam name="TN">字典中值的类型。</typeparam>
        </member>
        <member name="M:Fantasy.DataStructure.Dictionary.DictionaryPool`2.Dispose">
            <summary>
            释放实例占用的资源。
            </summary>
        </member>
        <member name="M:Fantasy.DataStructure.Dictionary.DictionaryPool`2.Create">
            <summary>
            创建一个新的 <see cref="T:Fantasy.DataStructure.Dictionary.DictionaryPool`2"/> 实例。
            </summary>
            <returns>新创建的实例。</returns>
        </member>
        <member name="M:Fantasy.DataStructure.Dictionary.DictionaryPool`2.IsPool">
            <summary>
            获取一个值，该值指示当前实例是否为对象池中的实例。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fantasy.DataStructure.Dictionary.DictionaryPool`2.SetIsPool(System.Boolean)">
            <summary>
            设置一个值，该值指示当前实例是否为对象池中的实例。
            </summary>
            <param name="isPool"></param>
        </member>
        <member name="T:Fantasy.DataStructure.Dictionary.DoubleMapDictionaryPool`2">
            <summary>
            提供一个双向映射字典对象池类，用于双向键值对映射。
            </summary>
            <typeparam name="TKey">字典中键的类型。</typeparam>
            <typeparam name="TValue">字典中值的类型。</typeparam>
        </member>
        <member name="M:Fantasy.DataStructure.Dictionary.DoubleMapDictionaryPool`2.Create">
            <summary>
            创建一个新的 <see cref="T:Fantasy.DataStructure.Dictionary.DoubleMapDictionaryPool`2"/> 实例。
            </summary>
            <returns>新创建的实例。</returns>
        </member>
        <member name="M:Fantasy.DataStructure.Dictionary.DoubleMapDictionaryPool`2.Dispose">
            <summary>
            释放实例占用的资源。
            </summary>
        </member>
        <member name="M:Fantasy.DataStructure.Dictionary.DoubleMapDictionaryPool`2.IsPool">
            <summary>
            获取一个值，该值指示当前实例是否为对象池中的实例。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fantasy.DataStructure.Dictionary.DoubleMapDictionaryPool`2.SetIsPool(System.Boolean)">
            <summary>
            设置一个值，该值指示当前实例是否为对象池中的实例。
            </summary>
            <param name="isPool"></param>
        </member>
        <member name="T:Fantasy.DataStructure.Dictionary.DoubleMapDictionary`2">
            <summary>
            可以实现双向映射的字典类，用于将键和值进行双向映射。
            </summary>
            <typeparam name="TK">键的类型，不能为 null。</typeparam>
            <typeparam name="TV">值的类型，不能为 null。</typeparam>
        </member>
        <member name="M:Fantasy.DataStructure.Dictionary.DoubleMapDictionary`2.#ctor">
            <summary>
            创建一个新的空的 <see cref="T:Fantasy.DataStructure.Dictionary.DoubleMapDictionary`2"/> 实例。
            </summary>
        </member>
        <member name="M:Fantasy.DataStructure.Dictionary.DoubleMapDictionary`2.#ctor(System.Int32)">
            <summary>
            创建一个新的具有指定初始容量的 <see cref="T:Fantasy.DataStructure.Dictionary.DoubleMapDictionary`2"/> 实例。
            </summary>
            <param name="capacity">初始容量。</param>
        </member>
        <member name="P:Fantasy.DataStructure.Dictionary.DoubleMapDictionary`2.Keys">
            <summary>
            获取包含字典中所有键的列表。
            </summary>
        </member>
        <member name="P:Fantasy.DataStructure.Dictionary.DoubleMapDictionary`2.Values">
            <summary>
            获取包含字典中所有值的列表。
            </summary>
        </member>
        <member name="M:Fantasy.DataStructure.Dictionary.DoubleMapDictionary`2.ForEach(System.Action{`0,`1})">
            <summary>
            对字典中的每个键值对执行指定的操作。
            </summary>
            <param name="action">要执行的操作。</param>
        </member>
        <member name="M:Fantasy.DataStructure.Dictionary.DoubleMapDictionary`2.Add(`0,`1)">
            <summary>
            将指定的键值对添加到字典中。
            </summary>
            <param name="key">要添加的键。</param>
            <param name="value">要添加的值。</param>
        </member>
        <member name="M:Fantasy.DataStructure.Dictionary.DoubleMapDictionary`2.GetValueByKey(`0)">
            <summary>
            根据指定的键获取相应的值。
            </summary>
            <param name="key">要查找值的键。</param>
            <returns>与指定键关联的值，如果找不到键，则返回默认值。</returns>
        </member>
        <member name="M:Fantasy.DataStructure.Dictionary.DoubleMapDictionary`2.TryGetValueByKey(`0,`1@)">
            <summary>
            尝试根据指定的键获取相应的值。
            </summary>
            <param name="key">要查找值的键。</param>
            <param name="value">如果找到，则为与指定键关联的值；否则为值的默认值。</param>
            <returns>如果找到键，则为 true；否则为 false。</returns>
        </member>
        <member name="M:Fantasy.DataStructure.Dictionary.DoubleMapDictionary`2.GetKeyByValue(`1)">
            <summary>
            根据指定的值获取相应的键。
            </summary>
            <param name="value">要查找键的值。</param>
            <returns>与指定值关联的键，如果找不到值，则返回默认键。</returns>
        </member>
        <member name="M:Fantasy.DataStructure.Dictionary.DoubleMapDictionary`2.TryGetKeyByValue(`1,`0@)">
            <summary>
            尝试根据指定的值获取相应的键。
            </summary>
            <param name="value">要查找键的值。</param>
            <param name="key">如果找到，则为与指定值关联的键；否则为键的默认值。</param>
            <returns>如果找到值，则为 true；否则为 false。</returns>
        </member>
        <member name="M:Fantasy.DataStructure.Dictionary.DoubleMapDictionary`2.RemoveByKey(`0)">
            <summary>
            根据指定的键移除键值对。
            </summary>
            <param name="key">要移除的键。</param>
        </member>
        <member name="M:Fantasy.DataStructure.Dictionary.DoubleMapDictionary`2.RemoveByValue(`1)">
            <summary>
            根据指定的值移除键值对。
            </summary>
            <param name="value">要移除的值。</param>
        </member>
        <member name="M:Fantasy.DataStructure.Dictionary.DoubleMapDictionary`2.Clear">
            <summary>
            清空字典中的所有键值对。
            </summary>
        </member>
        <member name="M:Fantasy.DataStructure.Dictionary.DoubleMapDictionary`2.ContainsKey(`0)">
            <summary>
            判断字典是否包含指定的键。
            </summary>
            <param name="key">要检查的键。</param>
            <returns>如果字典包含指定的键，则为 true；否则为 false。</returns>
        </member>
        <member name="M:Fantasy.DataStructure.Dictionary.DoubleMapDictionary`2.ContainsValue(`1)">
            <summary>
            判断字典是否包含指定的值。
            </summary>
            <param name="value">要检查的值。</param>
            <returns>如果字典包含指定的值，则为 true；否则为 false。</returns>
        </member>
        <member name="M:Fantasy.DataStructure.Dictionary.DoubleMapDictionary`2.Contains(`0,`1)">
            <summary>
            判断字典是否包含指定的键值对。
            </summary>
            <param name="key">要检查的键。</param>
            <param name="value">要检查的值。</param>
            <returns>如果字典包含指定的键值对，则为 true；否则为 false。</returns>
        </member>
        <member name="T:Fantasy.DataStructure.Dictionary.EntityDictionary`2">
            <summary>
            提供一个带资源释放功能的实体字典类，支持使用对象池管理。
            </summary>
            <typeparam name="TM">字典中键的类型。</typeparam>
            <typeparam name="TN">字典中值的类型，必须实现 IDisposable 接口。</typeparam>
        </member>
        <member name="M:Fantasy.DataStructure.Dictionary.EntityDictionary`2.Create">
            <summary>
            创建一个新的 <see cref="T:Fantasy.DataStructure.Dictionary.EntityDictionary`2"/> 实例。
            </summary>
            <returns>新创建的实例。</returns>
        </member>
        <member name="M:Fantasy.DataStructure.Dictionary.EntityDictionary`2.Clear">
            <summary>
            清空字典中的所有键值对，并释放值的资源。
            </summary>
        </member>
        <member name="M:Fantasy.DataStructure.Dictionary.EntityDictionary`2.ClearNotDispose">
            <summary>
            清空字典中的所有键值对，但不释放值的资源。
            </summary>
        </member>
        <member name="M:Fantasy.DataStructure.Dictionary.EntityDictionary`2.Dispose">
            <summary>
            释放实例占用的资源。
            </summary>
        </member>
        <member name="M:Fantasy.DataStructure.Dictionary.EntityDictionary`2.IsPool">
            <summary>
            获取一个值，该值指示当前实例是否为对象池中的实例。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fantasy.DataStructure.Dictionary.EntityDictionary`2.SetIsPool(System.Boolean)">
            <summary>
            设置一个值，该值指示当前实例是否为对象池中的实例。
            </summary>
            <param name="isPool"></param>
        </member>
        <member name="T:Fantasy.DataStructure.Dictionary.OneToManyDictionaryPool`3">
            <summary>
            一对多映射关系的字典对象池。
            </summary>
            <typeparam name="TKey">外部字典中的键类型。</typeparam>
            <typeparam name="TValueKey">内部字典中的键类型。</typeparam>
            <typeparam name="TValue">内部字典中的值类型。</typeparam>
        </member>
        <member name="M:Fantasy.DataStructure.Dictionary.OneToManyDictionaryPool`3.Create">
            <summary>
            创建一个 <see cref="T:Fantasy.DataStructure.Dictionary.OneToManyDictionaryPool`3"/> 的实例。
            </summary>
            <returns>新创建的 OneToManyDictionaryPool 实例。</returns>
        </member>
        <member name="M:Fantasy.DataStructure.Dictionary.OneToManyDictionaryPool`3.Dispose">
            <summary>
            释放当前实例及其资源。
            </summary>
        </member>
        <member name="M:Fantasy.DataStructure.Dictionary.OneToManyDictionaryPool`3.IsPool">
            <summary>
            获取一个值，该值指示当前实例是否为对象池中的实例。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fantasy.DataStructure.Dictionary.OneToManyDictionaryPool`3.SetIsPool(System.Boolean)">
            <summary>
            设置一个值，该值指示当前实例是否为对象池中的实例。
            </summary>
            <param name="isPool"></param>
        </member>
        <member name="T:Fantasy.DataStructure.Dictionary.OneToManyDictionary`3">
            <summary>
            一对多映射关系的字典。每个键都对应一个内部字典，该内部字典将键值映射到相应的值。
            </summary>
            <typeparam name="TKey">外部字典中的键类型。</typeparam>
            <typeparam name="TValueKey">内部字典中的键类型。</typeparam>
            <typeparam name="TValue">内部字典中的值类型。</typeparam>
        </member>
        <member name="M:Fantasy.DataStructure.Dictionary.OneToManyDictionary`3.#ctor">
            <summary>
            创建一个新的 <see cref="T:Fantasy.DataStructure.Dictionary.OneToManyDictionary`3"/> 实例。
            </summary>
        </member>
        <member name="M:Fantasy.DataStructure.Dictionary.OneToManyDictionary`3.#ctor(System.Int32)">
            <summary>
            创建一个新的 <see cref="T:Fantasy.DataStructure.Dictionary.OneToManyDictionary`3"/> 实例，并指定最大缓存数量。
            </summary>
            <param name="recyclingLimit">
            1:防止数据量过大、所以超过recyclingLimit的数据还是走GC.
            2:设置成0不控制数量，全部缓存
            </param>
        </member>
        <member name="M:Fantasy.DataStructure.Dictionary.OneToManyDictionary`3.Contains(`0,`1)">
            <summary>
            检查是否包含指定的键值对。
            </summary>
            <param name="key">外部字典中的键。</param>
            <param name="valueKey">内部字典中的键。</param>
            <returns>如果包含指定的键值对，则为 true；否则为 false。</returns>
        </member>
        <member name="M:Fantasy.DataStructure.Dictionary.OneToManyDictionary`3.TryGetValue(`0,`1,`2@)">
            <summary>
            尝试获取指定键值对的值。
            </summary>
            <param name="key">外部字典中的键。</param>
            <param name="valueKey">内部字典中的键。</param>
            <param name="value">获取的值，如果操作成功，则为值；否则为默认值。</param>
            <returns>如果操作成功，则为 true；否则为 false。</returns>
        </member>
        <member name="M:Fantasy.DataStructure.Dictionary.OneToManyDictionary`3.First(`0)">
            <summary>
            获取指定键的第一个值。
            </summary>
            <param name="key">要获取第一个值的键。</param>
        </member>
        <member name="M:Fantasy.DataStructure.Dictionary.OneToManyDictionary`3.Add(`0,`1,`2)">
            <summary>
            向字典中添加指定的键值对。
            </summary>
            <param name="key">要添加键值对的键。</param>
            <param name="valueKey">要添加键值对的内部字典键。</param>
            <param name="value">要添加的值。</param>
        </member>
        <member name="M:Fantasy.DataStructure.Dictionary.OneToManyDictionary`3.Remove(`0,`1)">
            <summary>
            从字典中移除指定的键值对。
            </summary>
            <param name="key">要移除键值对的键。</param>
            <param name="valueKey">要移除键值对的内部字典键。</param>
            <returns>如果成功移除键值对，则为 true；否则为 false。</returns>
        </member>
        <member name="M:Fantasy.DataStructure.Dictionary.OneToManyDictionary`3.Remove(`0,`1,`2@)">
            <summary>
            从字典中移除指定的键值对。
            </summary>
            <param name="key">要移除键值对的键。</param>
            <param name="valueKey">要移除键值对的内部字典键。</param>
            <param name="value">如果成功移除键值对，则为移除的值；否则为默认值。</param>
            <returns>如果成功移除键值对，则为 true；否则为 false。</returns>
        </member>
        <member name="M:Fantasy.DataStructure.Dictionary.OneToManyDictionary`3.RemoveKey(`0)">
            <summary>
            移除字典中的指定键及其相关的所有键值对。
            </summary>
            <param name="key">要移除的键。</param>
        </member>
        <member name="M:Fantasy.DataStructure.Dictionary.OneToManyDictionary`3.Fetch">
            <summary>
            从对象池中获取一个内部字典实例，如果池中没有，则创建一个新实例。
            </summary>
            <returns>获取的内部字典实例。</returns>
        </member>
        <member name="M:Fantasy.DataStructure.Dictionary.OneToManyDictionary`3.Recycle(System.Collections.Generic.Dictionary{`1,`2})">
            <summary>
            将不再使用的内部字典实例放回对象池中，以便后续重用。
            </summary>
            <param name="dic">要放回对象池的内部字典实例。</param>
        </member>
        <member name="M:Fantasy.DataStructure.Dictionary.OneToManyDictionary`3.Clear">
            <summary>
            清空字典中的所有键值对，并将不再使用的内部字典实例放回对象池中。
            </summary>
        </member>
        <member name="T:Fantasy.DataStructure.Dictionary.OneToManySortedDictionaryPool`3">
            <summary>
            一对多映射关系的排序字典对象池。
            </summary>
            <typeparam name="TKey">外部字典中的键类型。</typeparam>
            <typeparam name="TSortedKey">内部字典中的排序键类型。</typeparam>
            <typeparam name="TValue">内部字典中的值类型。</typeparam>
        </member>
        <member name="M:Fantasy.DataStructure.Dictionary.OneToManySortedDictionaryPool`3.Create">
            <summary>
            创建一个 <see cref="T:Fantasy.DataStructure.Dictionary.OneToManySortedDictionaryPool`3"/> 的实例。
            </summary>
            <returns>新创建的 OneToManySortedDictionaryPool 实例。</returns>
        </member>
        <member name="M:Fantasy.DataStructure.Dictionary.OneToManySortedDictionaryPool`3.Dispose">
            <summary>
            释放当前实例及其资源。
            </summary>
        </member>
        <member name="M:Fantasy.DataStructure.Dictionary.OneToManySortedDictionaryPool`3.IsPool">
            <summary>
            获取一个值，该值指示当前实例是否为对象池中的实例。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fantasy.DataStructure.Dictionary.OneToManySortedDictionaryPool`3.SetIsPool(System.Boolean)">
            <summary>
            设置一个值，该值指示当前实例是否为对象池中的实例。
            </summary>
            <param name="isPool"></param>
        </member>
        <member name="T:Fantasy.DataStructure.Dictionary.OneToManySortedDictionary`3">
            <summary>
            一对多映射关系的排序字典。每个外部键映射到一个内部排序字典，该内部排序字典将排序键映射到相应的值。
            </summary>
            <typeparam name="TKey">外部字典中的键类型。</typeparam>
            <typeparam name="TSortedKey">内部字典中的排序键类型。</typeparam>
            <typeparam name="TValue">内部字典中的值类型。</typeparam>
        </member>
        <member name="F:Fantasy.DataStructure.Dictionary.OneToManySortedDictionary`3._recyclingLimit">
            缓存队列的回收限制
        </member>
        <member name="F:Fantasy.DataStructure.Dictionary.OneToManySortedDictionary`3._queue">
            缓存队列，用于存储已回收的内部排序字典
        </member>
        <member name="M:Fantasy.DataStructure.Dictionary.OneToManySortedDictionary`3.#ctor">
            <summary>
            创建一个新的 <see cref="T:Fantasy.DataStructure.Dictionary.OneToManySortedDictionary`3"/> 实例。
            </summary>
        </member>
        <member name="M:Fantasy.DataStructure.Dictionary.OneToManySortedDictionary`3.#ctor(System.Int32)">
            <summary>
            创建一个新的 <see cref="T:Fantasy.DataStructure.Dictionary.OneToManySortedDictionary`3"/> 实例。设置最大缓存数量
            </summary>
            <param name="recyclingLimit">
            1:防止数据量过大、所以超过recyclingLimit的数据还是走GC.
            2:设置成0不控制数量，全部缓存
            </param>
        </member>
        <member name="M:Fantasy.DataStructure.Dictionary.OneToManySortedDictionary`3.Contains(`0)">
            <summary>
            检查字典是否包含指定的外部键。
            </summary>
            <param name="key">要检查的外部键。</param>
            <returns>如果字典包含指定的外部键，则为 true；否则为 false。</returns>
        </member>
        <member name="M:Fantasy.DataStructure.Dictionary.OneToManySortedDictionary`3.Contains(`0,`1)">
            <summary>
            检查字典是否包含指定的外部键和排序键。
            </summary>
            <param name="key">要检查的外部键。</param>
            <param name="sortedKey">要检查的排序键。</param>
            <returns>如果字典包含指定的外部键和排序键，则为 true；否则为 false。</returns>
        </member>
        <member name="M:Fantasy.DataStructure.Dictionary.OneToManySortedDictionary`3.TryGetValue(`0,System.Collections.Generic.SortedDictionary{`1,`2}@)">
            <summary>
            尝试从字典中获取指定外部键对应的内部排序字典。
            </summary>
            <param name="key">要获取内部排序字典的外部键。</param>
            <param name="dic">获取到的内部排序字典，如果找不到则为 null。</param>
            <returns>如果找到内部排序字典，则为 true；否则为 false。</returns>
        </member>
        <member name="M:Fantasy.DataStructure.Dictionary.OneToManySortedDictionary`3.TryGetValueBySortedKey(`0,`1,`2@)">
            <summary>
            尝试从字典中获取指定外部键和排序键对应的值。
            </summary>
            <param name="key">要获取值的外部键。</param>
            <param name="sortedKey">要获取值的排序键。</param>
            <param name="value">获取到的值，如果找不到则为 default。</param>
            <returns>如果找到值，则为 true；否则为 false。</returns>
        </member>
        <member name="M:Fantasy.DataStructure.Dictionary.OneToManySortedDictionary`3.Add(`0,`1,`2)">
            <summary>
            向字典中添加一个值，关联到指定的外部键和排序键。
            </summary>
            <param name="key">要关联值的外部键。</param>
            <param name="sortedKey">要关联值的排序键。</param>
            <param name="value">要添加的值。</param>
        </member>
        <member name="M:Fantasy.DataStructure.Dictionary.OneToManySortedDictionary`3.RemoveSortedKey(`0,`1)">
            <summary>
            从字典中移除指定外部键和排序键关联的值。
            </summary>
            <param name="key">要移除值的外部键。</param>
            <param name="sortedKey">要移除值的排序键。</param>
            <returns>如果成功移除值，则为 true；否则为 false。</returns>
        </member>
        <member name="M:Fantasy.DataStructure.Dictionary.OneToManySortedDictionary`3.RemoveKey(`0)">
            <summary>
            从字典中移除指定外部键及其关联的所有值。
            </summary>
            <param name="key">要移除的外部键。</param>
            <returns>如果成功移除外部键及其关联的所有值，则为 true；否则为 false。</returns>
        </member>
        <member name="M:Fantasy.DataStructure.Dictionary.OneToManySortedDictionary`3.Fetch">
            <summary>
            从缓存队列中获取一个内部排序字典。
            </summary>
            <returns>一个内部排序字典。</returns>
        </member>
        <member name="M:Fantasy.DataStructure.Dictionary.OneToManySortedDictionary`3.Recycle(System.Collections.Generic.SortedDictionary{`1,`2})">
            <summary>
            回收一个内部排序字典到缓存队列。
            </summary>
            <param name="dic">要回收的内部排序字典。</param>
        </member>
        <member name="M:Fantasy.DataStructure.Dictionary.OneToManySortedDictionary`3.Clear">
            <summary>
            清空字典以及内部排序字典缓存队列，释放所有资源。
            </summary>
        </member>
        <member name="T:Fantasy.DataStructure.Dictionary.ReuseDictionary`2">
            <summary>
            提供一个可以重用的字典类，支持使用对象池管理。
            </summary>
            <typeparam name="TM">字典中键的类型。</typeparam>
            <typeparam name="TN">字典中值的类型。</typeparam>
        </member>
        <member name="M:Fantasy.DataStructure.Dictionary.ReuseDictionary`2.Create">
            <summary>
            创建一个新的 <see cref="T:Fantasy.DataStructure.Dictionary.ReuseDictionary`2"/> 实例。
            </summary>
            <returns>新创建的实例。</returns>
        </member>
        <member name="M:Fantasy.DataStructure.Dictionary.ReuseDictionary`2.Dispose">
            <summary>
            释放实例占用的资源。
            </summary>
        </member>
        <member name="M:Fantasy.DataStructure.Dictionary.ReuseDictionary`2.IsPool">
            <summary>
            获取一个值，该值指示当前实例是否为对象池中的实例。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fantasy.DataStructure.Dictionary.ReuseDictionary`2.SetIsPool(System.Boolean)">
            <summary>
            设置一个值，该值指示当前实例是否为对象池中的实例。
            </summary>
            <param name="isPool"></param>
        </member>
        <member name="T:Fantasy.DataStructure.Dictionary.SortedDictionaryPool`2">
            <summary>
            提供一个可以使用对象池管理的排序字典类。
            </summary>
            <typeparam name="TM"></typeparam>
            <typeparam name="TN"></typeparam>
        </member>
        <member name="M:Fantasy.DataStructure.Dictionary.SortedDictionaryPool`2.Dispose">
            <summary>
            释放实例占用的资源。
            </summary>
        </member>
        <member name="M:Fantasy.DataStructure.Dictionary.SortedDictionaryPool`2.Create">
            <summary>
            创建一个新的 <see cref="T:Fantasy.DataStructure.Dictionary.SortedDictionaryPool`2"/> 实例。
            </summary>
            <returns>新创建的实例。</returns>
        </member>
        <member name="M:Fantasy.DataStructure.Dictionary.SortedDictionaryPool`2.IsPool">
            <summary>
            获取一个值，该值指示当前实例是否为对象池中的实例。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fantasy.DataStructure.Dictionary.SortedDictionaryPool`2.SetIsPool(System.Boolean)">
            <summary>
            设置一个值，该值指示当前实例是否为对象池中的实例。
            </summary>
            <param name="isPool"></param>
        </member>
        <member name="T:Fantasy.DataStructure.PriorityQueue.PriorityQueue`2">
            <summary>
            优先队列
            </summary>
            <typeparam name="TElement">节点数据</typeparam>
            <typeparam name="TPriority">排序的类型、</typeparam>
        </member>
        <member name="T:Fantasy.DataStructure.SkipTable.SkipTable`1">
            <summary>
            跳表数据结构（升序版）
            </summary>
            <typeparam name="TValue">跳表中存储的值的类型。</typeparam>
        </member>
        <member name="M:Fantasy.DataStructure.SkipTable.SkipTable`1.#ctor(System.Int32)">
            <summary>
            创建一个新的跳表实例。
            </summary>
            <param name="maxLayer">跳表的最大层数。</param>
        </member>
        <member name="M:Fantasy.DataStructure.SkipTable.SkipTable`1.Add(System.Int64,System.Int64,System.Int64,`0)">
            <summary>
            向跳表中添加一个新节点。
            </summary>
            <param name="sortKey">节点的主排序键。</param>
            <param name="viceKey">节点的副排序键。</param>
            <param name="key">节点的唯一键。</param>
            <param name="value">要添加的值。</param>
        </member>
        <member name="M:Fantasy.DataStructure.SkipTable.SkipTable`1.Remove(System.Int64,System.Int64,System.Int64,`0@)">
            <summary>
            从跳表中移除一个节点。
            </summary>
            <param name="sortKey">节点的主排序键。</param>
            <param name="viceKey">节点的副排序键。</param>
            <param name="key">节点的唯一键。</param>
            <param name="value">被移除的节点的值。</param>
            <returns>如果成功移除节点，则为 true；否则为 false。</returns>
        </member>
        <member name="T:Fantasy.DataStructure.SkipTable.SkipTableBase`1">
            <summary>
            抽象的跳表基类，提供跳表的基本功能和操作。
            </summary>
            <typeparam name="TValue">跳表中存储的值的类型。</typeparam>
        </member>
        <member name="F:Fantasy.DataStructure.SkipTable.SkipTableBase`1.MaxLayer">
            <summary>
            跳表的最大层数
            </summary>
        </member>
        <member name="F:Fantasy.DataStructure.SkipTable.SkipTableBase`1.TopHeader">
            <summary>
            跳表的顶部头节点
            </summary>
        </member>
        <member name="F:Fantasy.DataStructure.SkipTable.SkipTableBase`1.BottomHeader">
            <summary>
            跳表的底部头节点
            </summary>
        </member>
        <member name="P:Fantasy.DataStructure.SkipTable.SkipTableBase`1.Count">
            <summary>
            跳表中节点的数量，使用了 Node 字典的计数
            </summary>
        </member>
        <member name="F:Fantasy.DataStructure.SkipTable.SkipTableBase`1.Random">
            <summary>
            用于生成随机数的随机数生成器
            </summary>
        </member>
        <member name="F:Fantasy.DataStructure.SkipTable.SkipTableBase`1.Node">
            <summary>
            存储跳表节点的字典
            </summary>
        </member>
        <member name="F:Fantasy.DataStructure.SkipTable.SkipTableBase`1.AntiFindStack">
            <summary>
            用于辅助反向查找的栈
            </summary>
        </member>
        <member name="M:Fantasy.DataStructure.SkipTable.SkipTableBase`1.#ctor(System.Int32)">
            <summary>
            初始化一个新的跳表实例。
            </summary>
            <param name="maxLayer">跳表的最大层数，默认为 8。</param>
        </member>
        <member name="P:Fantasy.DataStructure.SkipTable.SkipTableBase`1.Item(System.Int64)">
            <summary>
            获取指定键的节点的值，若不存在则返回默认值。
            </summary>
            <param name="key">要查找的键。</param>
        </member>
        <member name="M:Fantasy.DataStructure.SkipTable.SkipTableBase`1.GetRanking(System.Int64)">
            <summary>
            获取指定键的节点在跳表中的排名。
            </summary>
            <param name="key">要查找的键。</param>
            <returns>节点的排名。</returns>
        </member>
        <member name="M:Fantasy.DataStructure.SkipTable.SkipTableBase`1.GetAntiRanking(System.Int64)">
            <summary>
            获取指定键的反向排名，即在比该键更大的节点中的排名。
            </summary>
            <param name="key">要查找的键。</param>
            <returns>反向排名。</returns>
        </member>
        <member name="M:Fantasy.DataStructure.SkipTable.SkipTableBase`1.TryGetValueByKey(System.Int64,`0@)">
            <summary>
            尝试通过键获取节点的值。
            </summary>
            <param name="key">要查找的键。</param>
            <param name="value">获取到的节点的值，如果键不存在则为默认值。</param>
            <returns>是否成功获取节点的值。</returns>
        </member>
        <member name="M:Fantasy.DataStructure.SkipTable.SkipTableBase`1.TryGetNodeByKey(System.Int64,Fantasy.DataStructure.SkipTable.SkipTableNode{`0}@)">
            <summary>
            尝试通过键获取节点。
            </summary>
            <param name="key">要查找的键。</param>
            <param name="node">获取到的节点，如果键不存在则为 <c>null</c>。</param>
            <returns>是否成功获取节点。</returns>
        </member>
        <member name="M:Fantasy.DataStructure.SkipTable.SkipTableBase`1.Find(System.Int32,System.Int32,Fantasy.DataStructure.Collection.ListPool{Fantasy.DataStructure.SkipTable.SkipTableNode{`0}})">
            <summary>
            在跳表中查找节点，返回从起始位置到结束位置的节点列表。
            </summary>
            <param name="start">起始位置的排名。</param>
            <param name="end">结束位置的排名。</param>
            <param name="list">用于存储节点列表的 <see cref="T:Fantasy.DataStructure.Collection.ListPool`1"/> 实例。</param>
        </member>
        <member name="M:Fantasy.DataStructure.SkipTable.SkipTableBase`1.AntiFind(System.Int32,System.Int32,Fantasy.DataStructure.Collection.ListPool{Fantasy.DataStructure.SkipTable.SkipTableNode{`0}})">
            <summary>
            在跳表中进行反向查找节点，返回从结束位置到起始位置的节点列表。
            </summary>
            <param name="start">结束位置的排名。</param>
            <param name="end">起始位置的排名。</param>
            <param name="list">用于存储节点列表的 <see cref="T:Fantasy.DataStructure.Collection.ListPool`1"/> 实例。</param>
        </member>
        <member name="M:Fantasy.DataStructure.SkipTable.SkipTableBase`1.GetLastValue">
            <summary>
            获取跳表中最后一个节点的值。
            </summary>
            <returns>最后一个节点的值。</returns>
        </member>
        <member name="M:Fantasy.DataStructure.SkipTable.SkipTableBase`1.Remove(System.Int64)">
            <summary>
            移除跳表中指定键的节点。
            </summary>
            <param name="key">要移除的节点的键。</param>
            <returns>移除是否成功。</returns>
        </member>
        <member name="M:Fantasy.DataStructure.SkipTable.SkipTableBase`1.Add(System.Int64,System.Int64,System.Int64,`0)">
            <summary>
            向跳表中添加节点。
            </summary>
            <param name="sortKey">节点的排序键。</param>
            <param name="viceKey">节点的副键。</param>
            <param name="key">节点的键。</param>
            <param name="value">节点的值。</param>
        </member>
        <member name="M:Fantasy.DataStructure.SkipTable.SkipTableBase`1.Remove(System.Int64,System.Int64,System.Int64,`0@)">
            <summary>
            从跳表中移除指定键的节点。
            </summary>
            <param name="sortKey">节点的排序键。</param>
            <param name="viceKey">节点的副键。</param>
            <param name="key">节点的键。</param>
            <param name="value">被移除的节点的值。</param>
            <returns>移除是否成功。</returns>
        </member>
        <member name="M:Fantasy.DataStructure.SkipTable.SkipTableBase`1.GetEnumerator">
            <summary>
            返回一个枚举器，用于遍历跳表中的节点。
            </summary>
            <returns>一个可用于遍历跳表节点的枚举器。</returns>
        </member>
        <member name="M:Fantasy.DataStructure.SkipTable.SkipTableBase`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            返回一个非泛型枚举器，用于遍历跳表中的节点。
            </summary>
            <returns>一个非泛型枚举器，可用于遍历跳表节点。</returns>
        </member>
        <member name="T:Fantasy.DataStructure.SkipTable.SkipTableDesc`1">
            <summary>
            跳表降序版，用于存储降序排列的数据。
            </summary>
            <typeparam name="TValue">存储的值的类型。</typeparam>
        </member>
        <member name="M:Fantasy.DataStructure.SkipTable.SkipTableDesc`1.#ctor(System.Int32)">
            <summary>
            初始化跳表降序版的新实例。
            </summary>
            <param name="maxLayer">跳表的最大层数，默认为 8。</param>
        </member>
        <member name="M:Fantasy.DataStructure.SkipTable.SkipTableDesc`1.Add(System.Int64,System.Int64,System.Int64,`0)">
            <summary>
            向跳表中添加一个节点，根据降序规则进行插入。
            </summary>
            <param name="sortKey">排序主键。</param>
            <param name="viceKey">副键。</param>
            <param name="key">键。</param>
            <param name="value">值。</param>
        </member>
        <member name="M:Fantasy.DataStructure.SkipTable.SkipTableDesc`1.Remove(System.Int64,System.Int64,System.Int64,`0@)">
            <summary>
            从跳表中移除一个节点，根据降序规则进行移除。
            </summary>
            <param name="sortKey">排序主键。</param>
            <param name="viceKey">副键。</param>
            <param name="key">键。</param>
            <param name="value">移除的节点值。</param>
            <returns>如果成功移除节点，则返回 true，否则返回 false。</returns>
        </member>
        <member name="T:Fantasy.DataStructure.SkipTable.SkipTableNode`1">
            <summary>
            跳跃表节点。
            </summary>
            <typeparam name="TValue">节点的值的类型。</typeparam>
        </member>
        <member name="F:Fantasy.DataStructure.SkipTable.SkipTableNode`1.Index">
            <summary>
            节点在跳跃表中的索引。
            </summary>
        </member>
        <member name="F:Fantasy.DataStructure.SkipTable.SkipTableNode`1.Key">
            <summary>
            节点的主键。
            </summary>
        </member>
        <member name="F:Fantasy.DataStructure.SkipTable.SkipTableNode`1.SortKey">
            <summary>
            节点的排序键。
            </summary>
        </member>
        <member name="F:Fantasy.DataStructure.SkipTable.SkipTableNode`1.ViceKey">
            <summary>
            节点的副键。
            </summary>
        </member>
        <member name="F:Fantasy.DataStructure.SkipTable.SkipTableNode`1.Value">
            <summary>
            节点存储的值。
            </summary>
        </member>
        <member name="F:Fantasy.DataStructure.SkipTable.SkipTableNode`1.Left">
            <summary>
            指向左侧节点的引用。
            </summary>
        </member>
        <member name="F:Fantasy.DataStructure.SkipTable.SkipTableNode`1.Right">
            <summary>
            指向右侧节点的引用。
            </summary>
        </member>
        <member name="F:Fantasy.DataStructure.SkipTable.SkipTableNode`1.Down">
            <summary>
            指向下一层节点的引用。
            </summary>
        </member>
        <member name="M:Fantasy.DataStructure.SkipTable.SkipTableNode`1.#ctor(System.Int64,System.Int64,System.Int64,`0,System.Int32,Fantasy.DataStructure.SkipTable.SkipTableNode{`0},Fantasy.DataStructure.SkipTable.SkipTableNode{`0},Fantasy.DataStructure.SkipTable.SkipTableNode{`0})">
            <summary>
            初始化跳跃表节点的新实例。
            </summary>
            <param name="sortKey">节点的排序键。</param>
            <param name="viceKey">节点的副键。</param>
            <param name="key">节点的主键。</param>
            <param name="value">节点存储的值。</param>
            <param name="index">节点在跳跃表中的索引。</param>
            <param name="l">指向左侧节点的引用。</param>
            <param name="r">指向右侧节点的引用。</param>
            <param name="d">指向下一层节点的引用。</param>
        </member>
        <member name="T:Fantasy.Async.CoroutineLockPool">
            <summary>
            协程锁专用的对象池
            </summary>
        </member>
        <member name="M:Fantasy.Async.CoroutineLockPool.#ctor">
            <summary>
            协程锁专用的对象池的构造函数
            </summary>
        </member>
        <member name="T:Fantasy.Async.CoroutineLock">
            <summary>
            协程锁
            </summary>
        </member>
        <member name="F:Fantasy.Async.CoroutineLock._isPool">
            <summary>
            表示是否是对象池中创建的
            </summary>
        </member>
        <member name="P:Fantasy.Async.CoroutineLock.CoroutineLockType">
            <summary>
            协程锁的类型
            </summary>
        </member>
        <member name="M:Fantasy.Async.CoroutineLock.Dispose">
            <summary>
            销毁协程锁，如果调用了该方法，所有使用当前协程锁等待的逻辑会按照顺序释放锁。
            </summary>
        </member>
        <member name="M:Fantasy.Async.CoroutineLock.Wait(System.Int64,System.String,System.Int32)">
            <summary>
            等待上一个任务完成
            </summary>
            <param name="coroutineLockQueueKey">需要等待的Id</param>
            <param name="tag">用于查询协程锁的标记，可不传入，只有在超时的时候排查是哪个锁超时时使用</param>
            <param name="timeOut">等待多久会超时，当到达设定的时候会把当前锁给按照超时处理</param>
            <returns></returns>
        </member>
        <member name="M:Fantasy.Async.CoroutineLock.Release(System.Int64)">
            <summary>
            按照先入先出的顺序，释放最早的一个协程锁
            </summary>
            <param name="coroutineLockQueueKey"></param>
        </member>
        <member name="M:Fantasy.Async.CoroutineLock.IsPool">
            <summary>
            获取一个值，该值指示当前实例是否为对象池中的实例。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fantasy.Async.CoroutineLock.SetIsPool(System.Boolean)">
            <summary>
            设置一个值，该值指示当前实例是否为对象池中的实例。
            </summary>
            <param name="isPool"></param>
        </member>
        <member name="T:Fantasy.Async.CoroutineLockComponent">
            <summary>
            协程锁组件
            </summary>
        </member>
        <member name="M:Fantasy.Async.CoroutineLockComponent.Create(System.Int64)">
            <summary>
            创建一个新的协程锁
            使用这个方法创建的协程锁，需要手动释放管理CoroutineLock。
            不会再CoroutineLockComponent理进行管理。
            </summary>
            <param name="coroutineLockType"></param>
            <returns></returns>
        </member>
        <member name="M:Fantasy.Async.CoroutineLockComponent.Wait(System.Int64,System.Int64,System.String,System.Int32)">
            <summary>
            请求一个协程锁。
            使用这个方法创建的协程锁，会自动释放CoroutineLockQueueType。
            </summary>
            <param name="coroutineLockType">锁类型</param>
            <param name="coroutineLockQueueKey">锁队列Id</param>
            <param name="tag">当某些锁超时，需要一个标记来方便排查问题，正常的情况下这个默认为null就可以。</param>
            <param name="time">设置锁的超时时间，让超过设置的时间会触发超时，保证锁不会因为某一个锁一直不解锁导致卡住的问题。</param>
            <returns>
            返回的WaitCoroutineLock通过Dispose来解除这个锁、建议用using来保住这个锁。
            也可以返回的WaitCoroutineLock通过CoroutineLockComponent.UnLock来解除这个锁。
            </returns>
        </member>
        <member name="M:Fantasy.Async.CoroutineLockComponent.Release(System.Int32,System.Int64)">
            <summary>
            解除一个协程锁。
            </summary>
            <param name="coroutineLockType"></param>
            <param name="coroutineLockQueueKey"></param>
        </member>
        <member name="M:Fantasy.Async.CoroutineLockQueue.IsPool">
            <summary>
            获取一个值，该值指示当前实例是否为对象池中的实例。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fantasy.Async.CoroutineLockQueue.SetIsPool(System.Boolean)">
            <summary>
            设置一个值，该值指示当前实例是否为对象池中的实例。
            </summary>
            <param name="isPool"></param>
        </member>
        <member name="T:Fantasy.Async.WaitCoroutineLock">
            <summary>
            一个协程锁的实例，用户可以用过这个手动释放锁
            </summary>
        </member>
        <member name="M:Fantasy.Async.WaitCoroutineLock.Dispose">
            <summary>
            释放协程锁
            </summary>
        </member>
        <member name="M:Fantasy.Async.WaitCoroutineLock.IsPool">
            <summary>
            获取一个值，该值指示当前实例是否为对象池中的实例。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fantasy.Async.WaitCoroutineLock.SetIsPool(System.Boolean)">
            <summary>
            设置一个值，该值指示当前实例是否为对象池中的实例。
            </summary>
            <param name="isPool"></param>
        </member>
        <member name="T:Fantasy.Async.FCancellationToken">
            <summary>
            用于FTask取消的CancellationToken
            </summary>
        </member>
        <member name="P:Fantasy.Async.FCancellationToken.IsCancel">
            <summary>
            当前CancellationToken是否已经取消过了
            </summary>
        </member>
        <member name="M:Fantasy.Async.FCancellationToken.Add(System.Action)">
            <summary>
            添加一个取消要执行的Action
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:Fantasy.Async.FCancellationToken.Remove(System.Action)">
            <summary>
            移除一个取消要执行的Action
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:Fantasy.Async.FCancellationToken.Cancel">
            <summary>
            取消CancellationToken
            </summary>
        </member>
        <member name="M:Fantasy.Async.FCancellationToken.Dispose">
            <summary>
            销毁掉CancellationToken，会执行Cancel方法。
            </summary>
        </member>
        <member name="P:Fantasy.Async.FCancellationToken.ToKen">
            <summary>
            获取一个新的CancellationToken
            </summary>
        </member>
        <member name="T:Fantasy.Async.FTask">
            <summary>
            一个异步任务
            </summary>
        </member>
        <member name="P:Fantasy.Async.FTask.CompletedTask">
            <summary>
            创建一个空的任务
            </summary>
        </member>
        <member name="M:Fantasy.Async.FTask.Create(System.Boolean)">
            <summary>
            创建一个任务
            </summary>
            <param name="isPool">是否从对象池中创建</param>
            <returns></returns>
        </member>
        <member name="M:Fantasy.Async.FTask.Wait(Fantasy.Scene,System.Int64,Fantasy.Async.FCancellationToken)">
            <summary>
            异步等待指定时间
            </summary>
            <param name="scene"></param>
            <param name="time"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Fantasy.Async.FTask.WaitTill(Fantasy.Scene,System.Int64,Fantasy.Async.FCancellationToken)">
            <summary>
            异步等待直到指定时间
            </summary>
            <param name="scene"></param>
            <param name="time"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Fantasy.Async.FTask.WaitFrame(Fantasy.Scene)">
            <summary>
            异步等待一帧时间
            </summary>
            <param name="scene"></param>
            <returns></returns>
        </member>
        <member name="M:Fantasy.Async.FTask.OnceTimer(Fantasy.Scene,System.Int64,System.Action)">
            <summary>
            创建一个只执行一次的计时器，直到指定时间
            </summary>
            <param name="scene"></param>
            <param name="time"></param>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:Fantasy.Async.FTask.OnceTillTimer(Fantasy.Scene,System.Int64,System.Action)">
            <summary>
            创建一个只执行一次的计时器，直到指定时间。
            </summary>
            <param name="scene"></param>
            <param name="time"></param>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:Fantasy.Async.FTask.OnceTimer``1(Fantasy.Scene,System.Int64,``0)">
            <summary>
            创建一个只执行一次的计时器，用于发布指定类型的事件。
            </summary>
            <param name="scene"></param>
            <param name="time"></param>
            <param name="timerHandlerType"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Fantasy.Async.FTask.OnceTillTimer``1(Fantasy.Scene,System.Int64,``0)">
            <summary>
            创建一个只执行一次的计时器，直到指定时间，用于发布指定类型的事件。
            </summary>
            <param name="scene"></param>
            <param name="tillTime"></param>
            <param name="timerHandlerType"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Fantasy.Async.FTask.RepeatedTimer(Fantasy.Scene,System.Int64,System.Action)">
            <summary>
            创建一个重复执行的计时器。
            </summary>
            <param name="scene"></param>
            <param name="time"></param>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:Fantasy.Async.FTask.RepeatedTimer``1(Fantasy.Scene,System.Int64,``0)">
            <summary>
            创建一个重复执行的计时器，用于发布指定类型的事件。
            </summary>
            <param name="scene"></param>
            <param name="time"></param>
            <param name="timerHandlerType"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Fantasy.Async.FTask.RemoveTimer(Fantasy.Scene,System.Int64@)">
            <summary>
            移除指定 ID 的计时器。
            </summary>
            <param name="scene"></param>
            <param name="timerId"></param>
            <returns></returns>
        </member>
        <member name="M:Fantasy.Async.FTask.Run(System.Func{Fantasy.Async.FTask})">
            <summary>
            创建并运行一个异步任务
            </summary>
            <param name="factory"></param>
            <returns></returns>
        </member>
        <member name="M:Fantasy.Async.FTask.Run``1(System.Func{Fantasy.Async.FTask{``0}})">
            <summary>
            创建并运行一个带有结果的异步任务
            </summary>
            <param name="factory"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Fantasy.Async.FTask.WaitAll(System.Collections.Generic.List{Fantasy.Async.FTask})">
            <summary>
            等待所有任务完成
            </summary>
            <param name="tasks"></param>
        </member>
        <member name="M:Fantasy.Async.FTask.WaitAny(System.Collections.Generic.List{Fantasy.Async.FTask})">
            <summary>
            等待其中一个任务完成
            </summary>
            <param name="tasks"></param>
        </member>
        <member name="T:Fantasy.Async.FTask`1">
            <summary>
            一个异步任务
            </summary>
            <typeparam name="T">任务的泛型类型</typeparam>
        </member>
        <member name="M:Fantasy.Async.FTask`1.Create(System.Boolean)">
            <summary>
            创建一个任务
            </summary>
            <param name="isPool">是否从对象池中创建</param>
            <returns></returns>
        </member>
        <member name="T:Fantasy.Entitas.EntityComponent">
            <summary>
            Entity管理组件
            </summary>
        </member>
        <member name="M:Fantasy.Entitas.EntityComponent.Awake(Fantasy.Entitas.Entity)">
            <summary>
            触发实体的唤醒方法
            </summary>
            <param name="entity">实体对象</param>
        </member>
        <member name="M:Fantasy.Entitas.EntityComponent.Destroy(Fantasy.Entitas.Entity)">
            <summary>
            触发实体的销毁方法
            </summary>
            <param name="entity">实体对象</param>
        </member>
        <member name="M:Fantasy.Entitas.EntityComponent.Deserialize(Fantasy.Entitas.Entity)">
            <summary>
            触发实体的反序列化方法
            </summary>
            <param name="entity">实体对象</param>
        </member>
        <member name="M:Fantasy.Entitas.EntityComponent.StartUpdate(Fantasy.Entitas.Entity)">
            <summary>
            将实体加入更新队列，准备进行更新
            </summary>
            <param name="entity">实体对象</param>
        </member>
        <member name="M:Fantasy.Entitas.EntityComponent.StopUpdate(Fantasy.Entitas.Entity)">
            <summary>
            停止实体进行更新
            </summary>
            <param name="entity">实体对象</param>
        </member>
        <member name="M:Fantasy.Entitas.EntityComponent.Update">
            <summary>
            执行实体系统的更新逻辑
            </summary>
        </member>
        <member name="M:Fantasy.Entitas.EntityComponent.FrameUpdate">
            <summary>
            执行实体系统的帧更新逻辑
            </summary>
        </member>
        <member name="M:Fantasy.Entitas.EntityComponent.Dispose">
            <summary>
            释放实体系统管理器资源
            </summary>
        </member>
        <member name="T:Fantasy.Entitas.MessagePoolComponent">
            <summary>
            消息的对象池组件
            </summary>
        </member>
        <member name="M:Fantasy.Entitas.MessagePoolComponent.Dispose">
            <summary>
            销毁组件
            </summary>
        </member>
        <member name="M:Fantasy.Entitas.MessagePoolComponent.Rent``1">
            <summary>
            从对象池里获取一个消息，如果没有就创建一个新的
            </summary>
            <typeparam name="T">消息的泛型类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:Fantasy.Entitas.MessagePoolComponent.Rent(System.Type)">
            <summary>
            <see cref="M:Fantasy.Entitas.MessagePoolComponent.Rent(System.Type)"/>
            </summary>
            <param name="type">消息的类型</param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:Fantasy.Entitas.MessagePoolComponent.Return(Fantasy.Serialize.AMessage)">
            <summary>
            返还一个消息到对象池中
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Fantasy.Entitas.MessagePoolComponent.Return``1(``0)">
            <summary>
            <see cref="M:Fantasy.Entitas.MessagePoolComponent.Return(Fantasy.Serialize.AMessage)"/>
            </summary>
            <param name="obj">返还的消息</param>
            <typeparam name="T">返还的消息泛型类型</typeparam>
        </member>
        <member name="T:Fantasy.Entitas.IEntity">
            <summary>
            用来表示一个Entity
            </summary>
        </member>
        <member name="T:Fantasy.Entitas.Entity">
            <summary>
            Entity的抽象类，任何Entity必须继承这个接口才可以使用
            </summary>
        </member>
        <member name="F:Fantasy.Entitas.Entity._isPool">
            <summary>
            获取一个值，表示实体是否支持对象池。
            </summary>
        </member>
        <member name="P:Fantasy.Entitas.Entity.Id">
            <summary>
            实体的Id
            </summary>
        </member>
        <member name="P:Fantasy.Entitas.Entity.RuntimeId">
            <summary>
            实体的RunTimeId，其他系统可以通过这个Id发送Route消息，这个Id也可以理解为RouteId
            </summary>
        </member>
        <member name="P:Fantasy.Entitas.Entity.IsDisposed">
            <summary>
            当前实体是否已经被销毁
            </summary>
        </member>
        <member name="P:Fantasy.Entitas.Entity.Scene">
            <summary>
            当前实体所归属的Scene
            </summary>
        </member>
        <member name="P:Fantasy.Entitas.Entity.Parent">
            <summary>
            实体的父实体
            </summary>
        </member>
        <member name="P:Fantasy.Entitas.Entity.Type">
            <summary>
            实体的真实Type
            </summary>
        </member>
        <member name="M:Fantasy.Entitas.Entity.GetParent``1">
            <summary>
            获得父Entity
            </summary>
            <typeparam name="T">父实体的泛型类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:Fantasy.Entitas.Entity.Create(Fantasy.Scene,System.Type,System.Boolean,System.Boolean)">
            <summary>
            创建一个实体
            </summary>
            <param name="scene">所属的Scene</param>
            <param name="type">实体的Type</param>
            <param name="isPool">是否从对象池创建，如果选择的是，销毁的时候同样会进入对象池</param>
            <param name="isRunEvent">是否执行实体事件</param>
            <returns></returns>
        </member>
        <member name="M:Fantasy.Entitas.Entity.Create(Fantasy.Scene,System.Type,System.Int64,System.Boolean,System.Boolean)">
            <summary>
            创建一个实体
            </summary>
            <param name="scene">所属的Scene</param>
            <param name="type">实体的Type</param>
            <param name="id">指定实体的Id</param>
            <param name="isPool">是否从对象池创建，如果选择的是，销毁的时候同样会进入对象池</param>
            <param name="isRunEvent">是否执行实体事件</param>
            <returns></returns>
        </member>
        <member name="M:Fantasy.Entitas.Entity.Create``1(Fantasy.Scene,System.Boolean,System.Boolean)">
            <summary>
            创建一个实体
            </summary>
            <param name="scene">所属的Scene</param>
            <param name="isPool">是否从对象池创建，如果选择的是，销毁的时候同样会进入对象池</param>
            <param name="isRunEvent">是否执行实体事件</param>
            <typeparam name="T">要创建的实体泛型类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:Fantasy.Entitas.Entity.Create``1(Fantasy.Scene,System.Int64,System.Boolean,System.Boolean)">
            <summary>
            创建一个实体
            </summary>
            <param name="scene">所属的Scene</param>
            <param name="id">指定实体的Id</param>
            <param name="isPool">是否从对象池创建，如果选择的是，销毁的时候同样会进入对象池</param>
            <param name="isRunEvent">是否执行实体事件</param>
            <typeparam name="T">要创建的实体泛型类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:Fantasy.Entitas.Entity.AddComponent``1(System.Boolean)">
            <summary>
            添加一个组件到当前实体上
            </summary>
            <param name="isPool">是否从对象池里创建</param>
            <typeparam name="T">要添加组件的泛型类型</typeparam>
            <returns>返回添加到实体上组件的实例</returns>
        </member>
        <member name="M:Fantasy.Entitas.Entity.AddComponent``1(System.Int64,System.Boolean)">
            <summary>
            添加一个组件到当前实体上
            </summary>
            <param name="id">要添加组件的Id</param>
            <param name="isPool">是否从对象池里创建</param>
            <typeparam name="T">要添加组件的泛型类型</typeparam>
            <returns>返回添加到实体上组件的实例</returns>
        </member>
        <member name="M:Fantasy.Entitas.Entity.AddComponent(Fantasy.Entitas.Entity)">
            <summary>
            添加一个组件到当前实体上
            </summary>
            <param name="component">要添加的实体实例</param>
        </member>
        <member name="M:Fantasy.Entitas.Entity.AddComponent``1(``0)">
            <summary>
            添加一个组件到当前实体上
            </summary>
            <param name="component">要添加的实体实例</param>
            <typeparam name="T">要添加组件的泛型类型</typeparam>
        </member>
        <member name="M:Fantasy.Entitas.Entity.AddComponent(System.Type,System.Boolean)">
            <summary>
             添加一个组件到当前实体上
            </summary>
            <param name="type">组件的类型</param>
            <param name="isPool">是否在对象池创建</param>
            <returns></returns>
        </member>
        <member name="M:Fantasy.Entitas.Entity.HasComponent``1">
            <summary>
            当前实体上是否有指定类型的组件
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Fantasy.Entitas.Entity.HasComponent(System.Type)">
            <summary>
            当前实体上是否有指定类型的组件
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Fantasy.Entitas.Entity.HasComponent``1(System.Int64)">
            <summary>
            当前实体上是否有指定类型的组件
            </summary>
            <param name="id"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Fantasy.Entitas.Entity.GetComponent``1">
            <summary>
            当前实体上查找一个字实体
            </summary>
            <typeparam name="T">要查找实体泛型类型</typeparam>
            <returns>查找的实体实例</returns>
        </member>
        <member name="M:Fantasy.Entitas.Entity.GetComponent(System.Type)">
            <summary>
            当前实体上查找一个字实体
            </summary>
            <param name="type">要查找实体类型</param>
            <returns>查找的实体实例</returns>
        </member>
        <member name="M:Fantasy.Entitas.Entity.GetComponent``1(System.Int64)">
            <summary>
            当前实体上查找一个字实体
            </summary>
            <param name="id">要查找实体的Id</param>
            <typeparam name="T">要查找实体泛型类型</typeparam>
            <returns>查找的实体实例</returns>
        </member>
        <member name="M:Fantasy.Entitas.Entity.GetOrAddComponent``1(System.Boolean)">
            <summary>
            当前实体上查找一个字实体，如果没有就创建一个新的并添加到当前实体上
            </summary>
            <param name="isPool">是否从对象池创建</param>
            <typeparam name="T">要查找或添加实体泛型类型</typeparam>
            <returns>查找的实体实例</returns>
        </member>
        <member name="M:Fantasy.Entitas.Entity.RemoveComponent``1(System.Boolean)">
            <summary>
            当前实体下删除一个实体
            </summary>
            <param name="isDispose">是否执行删除实体的Dispose方法</param>
            <typeparam name="T">实体的泛型类型</typeparam>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:Fantasy.Entitas.Entity.RemoveComponent``1(System.Int64,System.Boolean)">
            <summary>
            当前实体下删除一个实体
            </summary>
            <param name="id">要删除的实体Id</param>
            <param name="isDispose">是否执行删除实体的Dispose方法</param>
            <typeparam name="T">实体的泛型类型</typeparam>
        </member>
        <member name="M:Fantasy.Entitas.Entity.RemoveComponent(Fantasy.Entitas.Entity,System.Boolean)">
            <summary>
            当前实体下删除一个实体
            </summary>
            <param name="component">要删除的实体实例</param>
            <param name="isDispose">是否执行删除实体的Dispose方法</param>
        </member>
        <member name="M:Fantasy.Entitas.Entity.RemoveComponent``1(``0,System.Boolean)">
            <summary>
            当前实体下删除一个实体
            </summary>
            <param name="component">要删除的实体实例</param>
            <param name="isDispose">是否执行删除实体的Dispose方法</param>
            <typeparam name="T">实体的泛型类型</typeparam>
        </member>
        <member name="M:Fantasy.Entitas.Entity.Deserialize(Fantasy.Scene,System.Boolean)">
            <summary>
            反序列化当前实体，因为在数据库加载过来的或通过协议传送过来的实体并没有跟当前Scene做关联。
            所以必须要执行一下这个反序列化的方法才可以使用。
            </summary>
            <param name="scene">Scene</param>
            <param name="resetId">是否是重新生成实体的Id,如果是数据库加载过来的一般是不需要的</param>
        </member>
        <member name="P:Fantasy.Entitas.Entity.ForEachSingleCollection">
            <summary>
            查询当前实体下支持数据库分表存储实体
            </summary>
        </member>
        <member name="P:Fantasy.Entitas.Entity.ForEachTransfer">
            <summary>
            查询当前实体下支持传送实体
            </summary>
        </member>
        <member name="P:Fantasy.Entitas.Entity.ForEachMultiEntity">
            <summary>
            查询当前实体下的实现了ISupportedMultiEntity接口的实体
            </summary>
        </member>
        <member name="P:Fantasy.Entitas.Entity.ForEachEntity">
            <summary>
            查找当前实体下的所有实体，不包括实现ISupportedMultiEntity接口的实体
            </summary>
        </member>
        <member name="M:Fantasy.Entitas.Entity.Dispose">
            <summary>
            销毁当前实体，销毁后会自动销毁当前实体下的所有实体。
            </summary>
        </member>
        <member name="M:Fantasy.Entitas.Entity.IsPool">
            <summary>
            获取一个值，该值指示当前实例是否为对象池中的实例。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fantasy.Entitas.Entity.SetIsPool(System.Boolean)">
            <summary>
            设置一个值，该值指示当前实例是否为对象池中的实例。
            </summary>
            <param name="isPool"></param>
        </member>
        <member name="M:Fantasy.Entitas.EntityList`1.IsPool">
            <summary>
            获取一个值，该值指示当前实例是否为对象池中的实例。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fantasy.Entitas.EntityList`1.SetIsPool(System.Boolean)">
            <summary>
            设置一个值，该值指示当前实例是否为对象池中的实例。
            </summary>
            <param name="isPool"></param>
        </member>
        <member name="M:Fantasy.Entitas.EntitySortedDictionary`2.IsPool">
            <summary>
            获取一个值，该值指示当前实例是否为对象池中的实例。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fantasy.Entitas.EntitySortedDictionary`2.SetIsPool(System.Boolean)">
            <summary>
            设置一个值，该值指示当前实例是否为对象池中的实例。
            </summary>
            <param name="isPool"></param>
        </member>
        <member name="T:Fantasy.Entitas.EntityReference`1">
            <summary>
            实体引用检查组件
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Fantasy.Entitas.EntityReference`1.op_Implicit(`0)~Fantasy.Entitas.EntityReference{`0}">
            <summary>
            将一个实体转换为EntityReference
            </summary>
            <param name="t">实体泛型类型</param>
            <returns>返回一个EntityReference</returns>
        </member>
        <member name="M:Fantasy.Entitas.EntityReference`1.op_Implicit(Fantasy.Entitas.EntityReference{`0})~`0">
            <summary>
            将一个EntityReference转换为实体
            </summary>
            <param name="v">实体泛型类型</param>
            <returns>当实体已经被销毁过会返回null</returns>
        </member>
        <member name="T:Fantasy.Entitas.Interface.ISingleCollectionRoot">
            <summary>
            Entity保存到数据库的时候会根据子组件设置分离存储特性分表存储在不同的集合表中
            </summary>
        </member>
        <member name="T:Fantasy.Entitas.Interface.ISupportedDataBase">
            <summary>
            Entity支持数据库
            </summary>
        </member>
        <member name="T:Fantasy.Entitas.Interface.ISupportedMultiEntity">
            <summary>
            支持再一个组件里添加多个同类型组件
            </summary>
        </member>
        <member name="T:Fantasy.Entitas.Interface.ISupportedSingleCollection">
            <summary>
            定义实体支持单一集合存储的接口。当实体需要单独存储在一个集合中，并且在保存到数据库时不会与父组件一起保存在同一个集合中时，应实现此接口。
            </summary>
        </member>
        <member name="T:Fantasy.Entitas.Interface.SingleCollectionAttribute">
            <summary>
            表示用于指定实体的单一集合存储属性。此属性用于配合 <see cref="T:Fantasy.Entitas.Interface.ISupportedSingleCollection"/> 接口使用，
            用于定义实体属于哪个父实体的子集合，以及在数据库中使用的集合名称。
            </summary>
        </member>
        <member name="F:Fantasy.Entitas.Interface.SingleCollectionAttribute.RootType">
            <summary>
            获取父实体的类型，指示此实体是属于哪个父实体的子集合。
            </summary>
        </member>
        <member name="F:Fantasy.Entitas.Interface.SingleCollectionAttribute.CollectionName">
            <summary>
            获取在数据库中使用的集合名称。
            </summary>
        </member>
        <member name="M:Fantasy.Entitas.Interface.SingleCollectionAttribute.#ctor(System.Type,System.String)">
            <summary>
            初始化 <see cref="T:Fantasy.Entitas.Interface.SingleCollectionAttribute"/> 类的新实例，指定父实体类型和集合名称。
            </summary>
            <param name="rootType">父实体的类型。</param>
            <param name="collectionName">在数据库中使用的集合名称。</param>
        </member>
        <member name="T:Fantasy.Entitas.Interface.ISupportedTransfer">
            <summary>
            Entity支持传送
            </summary>
        </member>
        <member name="T:Fantasy.Entitas.Interface.AwakeSystem`1">
            <summary>
            实体的Awake事件的抽象接口
            </summary>
            <typeparam name="T">实体的泛型类型</typeparam>
        </member>
        <member name="M:Fantasy.Entitas.Interface.AwakeSystem`1.EntitiesType">
            <summary>
            实体的类型
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fantasy.Entitas.Interface.AwakeSystem`1.Awake(`0)">
            <summary>
            事件的抽象方法，需要自己实现这个方法
            </summary>
            <param name="self">触发事件的实体实例</param>
        </member>
        <member name="M:Fantasy.Entitas.Interface.AwakeSystem`1.Invoke(Fantasy.Entitas.Entity)">
            <summary>
            框架内部调用的触发Awake的方法。
            </summary>
            <param name="self">触发事件的实体实例</param>
        </member>
        <member name="T:Fantasy.Entitas.Interface.ICustomEntitiesSystem">
            <summary>
            自定义组件事件系统接口
            如果需要自定义组件事件系统，请继承此接口。
            这个接口内部使用。不对外开放。
            </summary>
        </member>
        <member name="P:Fantasy.Entitas.Interface.ICustomEntitiesSystem.CustomEventType">
            <summary>
            事件类型
            用于触发这个组件事件关键因素。
            </summary>
        </member>
        <member name="M:Fantasy.Entitas.Interface.ICustomEntitiesSystem.EntitiesType">
            <summary>
            实体的类型
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fantasy.Entitas.Interface.ICustomEntitiesSystem.Invoke(Fantasy.Entitas.Entity)">
            <summary>
            框架内部调用的触发事件方法
            </summary>
            <param name="entity"></param>
        </member>
        <member name="T:Fantasy.Entitas.Interface.CustomSystem`1">
            <summary>
            自定义组件事件系统抽象类
            如果需要自定义组件事件系统，请继承此抽象类。
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Fantasy.Entitas.Interface.CustomSystem`1.CustomEventType">
            <summary>
            这个1表示是一个自定义事件类型，执行这个事件是时候需要用到这个1.
            </summary>
        </member>
        <member name="M:Fantasy.Entitas.Interface.CustomSystem`1.Custom(`0)">
            <summary>
            事件的抽象方法，需要自己实现这个方法
            </summary>
            <param name="self">触发事件的实体实例</param>
        </member>
        <member name="M:Fantasy.Entitas.Interface.CustomSystem`1.EntitiesType">
            <summary>
            实体的类型
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fantasy.Entitas.Interface.CustomSystem`1.Invoke(Fantasy.Entitas.Entity)">
            <summary>
            框架内部调用的触发Awake的方法。
            </summary>
            <param name="self">触发事件的实体实例</param>
        </member>
        <member name="T:Fantasy.Entitas.Interface.DeserializeSystem`1">
            <summary>
            实体的反序列化事件的抽象接口
            </summary>
            <typeparam name="T">实体的泛型数据</typeparam>
        </member>
        <member name="M:Fantasy.Entitas.Interface.DeserializeSystem`1.EntitiesType">
            <summary>
            实体的类型
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fantasy.Entitas.Interface.DeserializeSystem`1.Deserialize(`0)">
            <summary>
            事件的抽象方法，需要自己实现这个方法
            </summary>
            <param name="self">触发事件的实体实例</param>
        </member>
        <member name="M:Fantasy.Entitas.Interface.DeserializeSystem`1.Invoke(Fantasy.Entitas.Entity)">
            <summary>
            框架内部调用的触发Deserialize的方法
            </summary>
            <param name="self">触发事件的实体实例</param>
        </member>
        <member name="T:Fantasy.Entitas.Interface.DestroySystem`1">
            <summary>
            实体销毁事件的抽象接口
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Fantasy.Entitas.Interface.DestroySystem`1.EntitiesType">
            <summary>
            实体的类型
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fantasy.Entitas.Interface.DestroySystem`1.Destroy(`0)">
            <summary>
            事件的抽象方法，需要自己实现这个方法
            </summary>
            <param name="self">触发事件的实体实例</param>
        </member>
        <member name="M:Fantasy.Entitas.Interface.DestroySystem`1.Invoke(Fantasy.Entitas.Entity)">
            <summary>
            框架内部调用的触发Destroy的方法
            </summary>
            <param name="self"></param>
        </member>
        <member name="T:Fantasy.Entitas.Interface.IEntitiesSystem">
            <summary>
            ECS事件系统的核心接口，任何事件都是要继承这个接口
            </summary>
        </member>
        <member name="M:Fantasy.Entitas.Interface.IEntitiesSystem.EntitiesType">
            <summary>
            实体的类型
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fantasy.Entitas.Interface.IEntitiesSystem.Invoke(Fantasy.Entitas.Entity)">
            <summary>
            框架内部调用的触发事件方法
            </summary>
            <param name="entity"></param>
        </member>
        <member name="T:Fantasy.Entitas.Interface.FrameUpdateSystem`1">
            <summary>
            帧更新时间的抽象接口
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Fantasy.Entitas.Interface.FrameUpdateSystem`1.EntitiesType">
            <summary>
            实体的类型
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fantasy.Entitas.Interface.FrameUpdateSystem`1.FrameUpdate(`0)">
            <summary>
            事件的抽象方法，需要自己实现这个方法
            </summary>
            <param name="self">触发事件的实体实例</param>
        </member>
        <member name="M:Fantasy.Entitas.Interface.FrameUpdateSystem`1.Invoke(Fantasy.Entitas.Entity)">
            <summary>
            框架内部调用的触发FrameUpdate的方法
            </summary>
            <param name="self"></param>
        </member>
        <member name="T:Fantasy.Entitas.Interface.UpdateSystem`1">
            <summary>
            Update事件的抽象接口
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Fantasy.Entitas.Interface.UpdateSystem`1.EntitiesType">
            <summary>
            实体的类型
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fantasy.Entitas.Interface.UpdateSystem`1.Update(`0)">
            <summary>
            事件的抽象方法，需要自己实现这个方法
            </summary>
            <param name="self">触发事件的实体实例</param>
        </member>
        <member name="M:Fantasy.Entitas.Interface.UpdateSystem`1.Invoke(Fantasy.Entitas.Entity)">
            <summary>
            框架内部调用的触发Update的方法
            </summary>
            <param name="self">触发事件的实体实例</param>
        </member>
        <member name="M:Fantasy.Event.EventComponent.Publish``1(``0)">
            <summary>
            发布一个值类型的事件数据。
            </summary>
            <typeparam name="TEventData">事件数据类型（值类型）。</typeparam>
            <param name="eventData">事件数据实例。</param>
        </member>
        <member name="M:Fantasy.Event.EventComponent.Publish``1(``0,System.Boolean)">
            <summary>
            发布一个继承自 Entity 的事件数据。
            </summary>
            <typeparam name="TEventData">事件数据类型（继承自 Entity）。</typeparam>
            <param name="eventData">事件数据实例。</param>
            <param name="isDisposed">是否释放事件数据。</param>
        </member>
        <member name="M:Fantasy.Event.EventComponent.PublishAsync``1(``0)">
            <summary>
            异步发布一个值类型的事件数据。
            </summary>
            <typeparam name="TEventData">事件数据类型（值类型）。</typeparam>
            <param name="eventData">事件数据实例。</param>
            <returns>表示异步操作的任务。</returns>
        </member>
        <member name="M:Fantasy.Event.EventComponent.PublishAsync``1(``0,System.Boolean)">
            <summary>
            异步发布一个继承自 Entity 的事件数据。
            </summary>
            <typeparam name="TEventData">事件数据类型（继承自 Entity）。</typeparam>
            <param name="eventData">事件数据实例。</param>
            <param name="isDisposed">是否释放事件数据。</param>
            <returns>表示异步操作的任务。</returns>
        </member>
        <member name="T:Fantasy.Event.IEvent">
            <summary>
            事件的接口
            </summary>
        </member>
        <member name="M:Fantasy.Event.IEvent.EventType">
            <summary>
            用于指定事件的Type
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fantasy.Event.IEvent.Invoke(System.Object)">
            <summary>
            时间内部使用的入口
            </summary>
            <param name="self"></param>
        </member>
        <member name="T:Fantasy.Event.IAsyncEvent">
            <summary>
            异步事件的接口
            </summary>
        </member>
        <member name="M:Fantasy.Event.IAsyncEvent.EventType">
            <summary>
            <see cref="M:Fantasy.Event.IEvent.EventType"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fantasy.Event.IAsyncEvent.InvokeAsync(System.Object)">
            <summary>
            <see cref="M:Fantasy.Event.IEvent.Invoke(System.Object)"/>
            </summary>
            <returns></returns>
        </member>
        <member name="T:Fantasy.Event.EventSystem`1">
            <summary>
            事件的抽象类，要使用事件必须要继承这个抽象接口。
            </summary>
            <typeparam name="T">要监听的事件泛型类型</typeparam>
        </member>
        <member name="M:Fantasy.Event.EventSystem`1.EventType">
            <summary>
            <see cref="M:Fantasy.Event.IEvent.EventType"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fantasy.Event.EventSystem`1.Handler(`0)">
            <summary>
            事件调用的方法，要在这个方法里编写事件发生的逻辑
            </summary>
            <param name="self"></param>
        </member>
        <member name="M:Fantasy.Event.EventSystem`1.Invoke(System.Object)">
            <summary>
            <see cref="M:Fantasy.Event.IEvent.Invoke(System.Object)"/>
            </summary>
            <returns></returns>
        </member>
        <member name="T:Fantasy.Event.AsyncEventSystem`1">
            <summary>
            异步事件的抽象类，要使用事件必须要继承这个抽象接口。
            </summary>
            <typeparam name="T">要监听的事件泛型类型</typeparam>
        </member>
        <member name="M:Fantasy.Event.AsyncEventSystem`1.EventType">
            <summary>
            <see cref="M:Fantasy.Event.IEvent.EventType"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fantasy.Event.AsyncEventSystem`1.Handler(`0)">
            <summary>
            事件调用的方法，要在这个方法里编写事件发生的逻辑
            </summary>
            <param name="self"></param>
        </member>
        <member name="M:Fantasy.Event.AsyncEventSystem`1.InvokeAsync(System.Object)">
            <summary>
            <see cref="M:Fantasy.Event.IEvent.Invoke(System.Object)"/>
            </summary>
            <returns></returns>
        </member>
        <member name="T:Fantasy.SingleCollection.SingleCollectionComponent">
            <summary>
            用于处理Entity下的实体进行数据库分表存储的组件
            </summary>
        </member>
        <member name="M:Fantasy.SingleCollection.SingleCollectionComponent.GetCollections``1(``0)">
            <summary>
            通过数据库获取某一个实体类型下所有的分表数据到当前实体下，并且会自动建立父子关系。
            </summary>
            <param name="entity">实体实例</param>
            <typeparam name="T">实体泛型类型</typeparam>
        </member>
        <member name="M:Fantasy.SingleCollection.SingleCollectionComponent.SaveCollections``1(``0)">
            <summary>
            存储当前实体下支持分表的组件到数据中，包括存储实体本身。
            </summary>
            <param name="entity">实体实例</param>
            <typeparam name="T">实体泛型类型</typeparam>
        </member>
        <member name="T:Fantasy.Timer.TimerHandler`1">
            <summary>
            计时器抽象类，提供了一个基础框架，用于创建处理计时器事件的具体类。
            </summary>
            <typeparam name="T">事件的类型参数</typeparam>
        </member>
        <member name="T:Fantasy.Timer.TimerComponent">
            <summary>
            时间调度组件
            </summary>
        </member>
        <member name="P:Fantasy.Timer.TimerComponent.Net">
            <summary>
            使用系统时间创建的计时器核心。
            </summary>
        </member>
        <member name="T:Fantasy.Timer.TimerSchedulerNet">
            <summary>
            基于系统事件的任务调度系统
            </summary>
        </member>
        <member name="M:Fantasy.Timer.TimerSchedulerNet.#ctor(Fantasy.Scene)">
            <summary>
            构造函数
            </summary>
            <param name="scene">当前的Scene</param>
        </member>
        <member name="M:Fantasy.Timer.TimerSchedulerNet.Update">
            <summary>
            驱动方法，只有调用这个方法任务系统才会正常运转。
            </summary>
        </member>
        <member name="M:Fantasy.Timer.TimerSchedulerNet.WaitAsync(System.Int64,Fantasy.Async.FCancellationToken)">
            <summary>
            异步等待指定时间。
            </summary>
            <param name="time">等待的时间长度。</param>
            <param name="cancellationToken">取消令牌。</param>
            <returns>等待是否成功。</returns>
        </member>
        <member name="M:Fantasy.Timer.TimerSchedulerNet.WaitTillAsync(System.Int64,Fantasy.Async.FCancellationToken)">
            <summary>
            异步等待直到指定时间。
            </summary>
            <param name="tillTime">等待的目标时间。</param>
            <param name="cancellationToken">取消令牌。</param>
            <returns>等待是否成功。</returns>
        </member>
        <member name="M:Fantasy.Timer.TimerSchedulerNet.WaitFrameAsync">
            <summary>
            异步等待一帧时间。
            </summary>
            <returns>等待是否成功。</returns>
        </member>
        <member name="M:Fantasy.Timer.TimerSchedulerNet.OnceTimer(System.Int64,System.Action)">
            <summary>
            创建一个只执行一次的计时器，直到指定时间
            </summary>
            <param name="time">计时器执行的目标时间。</param>
            <param name="action">计时器回调方法。</param>
            <returns></returns>
        </member>
        <member name="M:Fantasy.Timer.TimerSchedulerNet.OnceTillTimer(System.Int64,System.Action)">
            <summary>
            创建一个只执行一次的计时器，直到指定时间。
            </summary>
            <param name="tillTime">计时器执行的目标时间。</param>
            <param name="action">计时器回调方法。</param>
            <returns>计时器的 ID。</returns>
        </member>
        <member name="M:Fantasy.Timer.TimerSchedulerNet.OnceTimer``1(System.Int64,``0)">
            <summary>
            创建一个只执行一次的计时器，用于发布指定类型的事件。
            </summary>
            <typeparam name="T">事件类型。</typeparam>
            <param name="time">计时器执行的延迟时间。</param>
            <param name="timerHandlerType">事件处理器类型。</param>
            <returns>计时器的 ID。</returns>
        </member>
        <member name="M:Fantasy.Timer.TimerSchedulerNet.OnceTillTimer``1(System.Int64,``0)">
            <summary>
            创建一个只执行一次的计时器，直到指定时间，用于发布指定类型的事件。
            </summary>
            <typeparam name="T">事件类型。</typeparam>
            <param name="tillTime">计时器执行的目标时间。</param>
            <param name="timerHandlerType">事件处理器类型。</param>
            <returns>计时器的 ID。</returns>
        </member>
        <member name="M:Fantasy.Timer.TimerSchedulerNet.FrameTimer(System.Action)">
            <summary>
            创建一个帧任务
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:Fantasy.Timer.TimerSchedulerNet.RepeatedTimer(System.Int64,System.Action)">
            <summary>
            创建一个重复执行的计时器。
            </summary>
            <param name="time">计时器重复间隔的时间。</param>
            <param name="action">计时器回调方法。</param>
            <returns>计时器的 ID。</returns>
        </member>
        <member name="M:Fantasy.Timer.TimerSchedulerNet.RepeatedTimer``1(System.Int64,``0)">
            <summary>
            创建一个重复执行的计时器，用于发布指定类型的事件。
            </summary>
            <typeparam name="T">事件类型。</typeparam>
            <param name="time">计时器重复间隔的时间。</param>
            <param name="timerHandlerType">事件处理器类型。</param>
            <returns>计时器的 ID。</returns>
        </member>
        <member name="M:Fantasy.Timer.TimerSchedulerNet.Remove(System.Int64@)">
            <summary>
            移除指定 ID 的计时器。
            </summary>
            <param name="timerId"></param>
            <returns></returns>
        </member>
        <member name="M:Fantasy.Timer.TimerSchedulerNet.Remove(System.Int64)">
            <summary>
            移除指定 ID 的计时器。
            </summary>
            <param name="timerId">计时器的 ID。</param>
        </member>
        <member name="T:Fantasy.Timer.TimerType">
            <summary>
            枚举对象TimerType
            </summary>
        </member>
        <member name="F:Fantasy.Timer.TimerType.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:Fantasy.Timer.TimerType.OnceWaitTimer">
            <summary>
            一次等待定时器
            </summary>
        </member>
        <member name="F:Fantasy.Timer.TimerType.OnceTimer">
            <summary>
            一次性定时器
            </summary>
        </member>
        <member name="F:Fantasy.Timer.TimerType.RepeatedTimer">
            <summary>
            重复定时器
            </summary>
        </member>
        <member name="T:Fantasy.Helper.ByteHelper">
            <summary>
            提供字节操作辅助方法的静态类。
            </summary>
        </member>
        <member name="M:Fantasy.Helper.ByteHelper.ReadInt64(System.IO.FileStream)">
            <summary>
            从指定的文件流中读取一个 64 位整数。
            </summary>
        </member>
        <member name="M:Fantasy.Helper.ByteHelper.ReadInt32(System.IO.FileStream)">
            <summary>
            从指定的文件流中读取一个 32 位整数。
            </summary>
        </member>
        <member name="M:Fantasy.Helper.ByteHelper.ReadInt64(System.IO.MemoryStream)">
            <summary>
            从指定的内存流中读取一个 64 位整数。
            </summary>
        </member>
        <member name="M:Fantasy.Helper.ByteHelper.ReadInt32(System.IO.MemoryStream)">
            <summary>
            从指定的内存流中读取一个 32 位整数。
            </summary>
        </member>
        <member name="M:Fantasy.Helper.ByteHelper.ToHex(System.Byte)">
            <summary>
            将字节转换为十六进制字符串表示。
            </summary>
        </member>
        <member name="M:Fantasy.Helper.ByteHelper.ToHex(System.Byte[])">
            <summary>
            将字节数组转换为十六进制字符串表示。
            </summary>
        </member>
        <member name="M:Fantasy.Helper.ByteHelper.ToHex(System.Byte[],System.String)">
            <summary>
            将字节数组按指定格式转换为十六进制字符串表示。
            </summary>
        </member>
        <member name="M:Fantasy.Helper.ByteHelper.ToHex(System.Byte[],System.Int32,System.Int32)">
            <summary>
            将字节数组的指定范围按十六进制格式转换为字符串表示。
            </summary>
        </member>
        <member name="M:Fantasy.Helper.ByteHelper.ToStr(System.Byte[])">
            <summary>
            将字节数组转换为默认编码的字符串表示。
            </summary>
        </member>
        <member name="M:Fantasy.Helper.ByteHelper.ToStr(System.Byte[],System.Int32,System.Int32)">
            <summary>
            将字节数组的指定范围按默认编码转换为字符串表示。
            </summary>
        </member>
        <member name="M:Fantasy.Helper.ByteHelper.Utf8ToStr(System.Byte[])">
            <summary>
            将字节数组转换为 UTF-8 编码的字符串表示。
            </summary>
        </member>
        <member name="M:Fantasy.Helper.ByteHelper.Utf8ToStr(System.Byte[],System.Int32,System.Int32)">
            <summary>
            将字节数组的指定范围按 UTF-8 编码转换为字符串表示。
            </summary>
        </member>
        <member name="M:Fantasy.Helper.ByteHelper.WriteTo(System.Byte[],System.Int32,System.UInt32)">
            <summary>
            将无符号整数写入字节数组的指定偏移位置。
            </summary>
        </member>
        <member name="M:Fantasy.Helper.ByteHelper.WriteTo(System.Byte[],System.Int32,System.Int32)">
            <summary>
            将有符号整数写入字节数组的指定偏移位置。
            </summary>
        </member>
        <member name="M:Fantasy.Helper.ByteHelper.WriteTo(System.Byte[],System.Int32,System.Byte)">
            <summary>
            将字节写入字节数组的指定偏移位置。
            </summary>
        </member>
        <member name="M:Fantasy.Helper.ByteHelper.WriteTo(System.Byte[],System.Int32,System.Int16)">
            <summary>
            将有符号短整数写入字节数组的指定偏移位置。
            </summary>
        </member>
        <member name="M:Fantasy.Helper.ByteHelper.WriteTo(System.Byte[],System.Int32,System.UInt16)">
            <summary>
            将无符号短整数写入字节数组的指定偏移位置。
            </summary>
        </member>
        <member name="M:Fantasy.Helper.ByteHelper.ToReadableSpeed(System.Int64)">
            <summary>
            将字节数转换为可读的速度表示。
            </summary>
            <param name="byteCount">字节数</param>
            <returns>可读的速度表示</returns>
        </member>
        <member name="M:Fantasy.Helper.ByteHelper.ToReadableSpeed(System.UInt64)">
            <summary>
            将字节数转换为可读的速度表示。
            </summary>
            <param name="byteCount">字节数</param>
            <returns>可读的速度表示</returns>
        </member>
        <member name="M:Fantasy.Helper.ByteHelper.MergeBytes(System.Byte[],System.Byte[])">
            <summary>
            合并两个字节数组。
            </summary>
            <param name="bytes">第一个字节数组</param>
            <param name="otherBytes">第二个字节数组</param>
            <returns>合并后的字节数组</returns>
        </member>
        <member name="M:Fantasy.Helper.ByteHelper.GetBytes(System.Int32,System.Byte[])">
            <summary>
            根据int值获取字节数组。
            </summary>
            <param name="value"></param>
            <param name="buffer"></param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Fantasy.Helper.ByteHelper.WriteBytes(System.IO.MemoryStream,System.Int32)">
            <summary>
            根据int值获取字节数组。
            </summary>
            <param name="memoryStream"></param>
            <param name="value"></param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Fantasy.Helper.ByteHelper.GetBytes(System.UInt32@,System.Byte[])">
            <summary>
            根据uint值获取字节数组。
            </summary>
            <param name="value"></param>
            <param name="buffer"></param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Fantasy.Helper.ByteHelper.WriteBytes(System.IO.MemoryStream,System.UInt32)">
            <summary>
            根据uint值获取字节数组。
            </summary>
            <param name="memoryStream"></param>
            <param name="value"></param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Fantasy.Helper.ByteHelper.GetBytes(System.Int64,System.Byte[])">
            <summary>
            根据int值获取字节数组。
            </summary>
            <param name="value"></param>
            <param name="buffer"></param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Fantasy.Helper.ByteHelper.WriteBytes(System.IO.MemoryStream,System.Int64)">
            <summary>
            根据uint值获取字节数组。
            </summary>
            <param name="memoryStream"></param>
            <param name="value"></param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="T:Fantasy.Helper.EncryptHelper">
            <summary>
            提供计算 MD5 散列值的辅助方法。
            </summary>
        </member>
        <member name="M:Fantasy.Helper.EncryptHelper.ComputeSha256Hash(System.Byte[])">
            <summary>
            计算指定字节数组的Sha256。
            </summary>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="M:Fantasy.Helper.EncryptHelper.FileMD5(System.String)">
            <summary>
            计算指定文件的 MD5 散列值。
            </summary>
            <param name="filePath">要计算散列值的文件路径。</param>
            <returns>表示文件的 MD5 散列值的字符串。</returns>
        </member>
        <member name="M:Fantasy.Helper.EncryptHelper.FileMD5(System.IO.FileStream)">
            <summary>
            计算给定文件流的 MD5 散列值。
            </summary>
            <param name="fileStream">要计算散列值的文件流。</param>
            <returns>表示文件流的 MD5 散列值的字符串。</returns>
        </member>
        <member name="M:Fantasy.Helper.EncryptHelper.BytesMD5(System.Byte[])">
            <summary>
            计算给定字节数组的 MD5 散列值。
            </summary>
            <param name="bytes">要计算散列值的字节数组。</param>
            <returns>表示字节数组的 MD5 散列值的字符串。</returns>
        </member>
        <member name="T:Fantasy.Helper.FileHelper">
            <summary>
            文件操作助手类，提供了各种文件操作方法。
            </summary>
        </member>
        <member name="M:Fantasy.Helper.FileHelper.GetFullPath(System.String)">
            <summary>
            获取相对路径的完整路径。
            </summary>
            <param name="relativePath">相对路径。</param>
            <returns>完整路径。</returns>
        </member>
        <member name="M:Fantasy.Helper.FileHelper.GetFullPath(System.String,System.String)">
            <summary>
            获取相对路径的完整路径。
            </summary>
            <param name="relativePath">相对于指定的目录的相对路径。</param>
            <param name="srcDir">指定的目录</param>
            <returns>完整路径。</returns>
        </member>
        <member name="M:Fantasy.Helper.FileHelper.GetTextByRelativePath(System.String)">
            <summary>
            获取相对路径的的文本信息。
            </summary>
            <param name="relativePath"></param>
            <returns></returns>
        </member>
        <member name="M:Fantasy.Helper.FileHelper.GetText(System.String)">
            <summary>
            获取绝对路径的的文本信息。
            </summary>
            <param name="fullPath"></param>
            <returns></returns>
        </member>
        <member name="M:Fantasy.Helper.FileHelper.CreateDirectory(System.String)">
            <summary>
            根据文件夹路径创建文件夹，如果文件夹不存在会自动创建文件夹。
            </summary>
            <param name="directoryPath"></param>
        </member>
        <member name="M:Fantasy.Helper.FileHelper.Copy(System.String,System.String,System.Boolean)">
            <summary>
            将文件复制到目标路径，如果目标目录不存在会自动创建目录。
            </summary>
            <param name="sourceFile">源文件路径。</param>
            <param name="destinationFile">目标文件路径。</param>
            <param name="overwrite">是否覆盖已存在的目标文件。</param>
        </member>
        <member name="M:Fantasy.Helper.FileHelper.GetDirectoriesByFilePath(System.String)">
            <summary>
            获取文件路径内的所有文件夹路径。
            </summary>
            <param name="filePath">文件路径。</param>
            <returns>文件夹路径列表。</returns>
        </member>
        <member name="M:Fantasy.Helper.FileHelper.CopyDirectory(System.String,System.String,System.Boolean)">
            <summary>
            将文件夹内的所有内容复制到目标位置。
            </summary>
            <param name="sourceDirectory">源文件夹路径。</param>
            <param name="destinationDirectory">目标文件夹路径。</param>
            <param name="overwrite">是否覆盖已存在的文件。</param>
        </member>
        <member name="M:Fantasy.Helper.FileHelper.GetDirectoryFile(System.String,System.String,System.IO.SearchOption)">
            <summary>
            获取目录下的所有文件
            </summary>
            <param name="folderPath">文件夹路径。</param>
            <param name="searchPattern">需要查找的文件通配符</param>
            <param name="searchOption">查找的类型</param>
            <returns></returns>
        </member>
        <member name="M:Fantasy.Helper.FileHelper.ClearDirectoryFile(System.String)">
            <summary>
            清空文件夹内的所有文件。
            </summary>
            <param name="folderPath">文件夹路径。</param>
        </member>
        <member name="T:Fantasy.Helper.HashCodeHelper">
            <summary>
            HashCode算法帮助类
            </summary>
        </member>
        <member name="M:Fantasy.Helper.HashCodeHelper.GetBKDRHashCode(System.String)">
            <summary>
            使用bkdr算法生成一个long的值
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Fantasy.Helper.HashCodeHelper.MurmurHash3(System.String)">
            <summary>
            使用MurmurHash3算法生成一个uint的值
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Fantasy.Helper.HashCodeHelper.ComputeHash64(System.String)">
            <summary>
            使用MurmurHash3算法生成一个long的值
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Fantasy.Helper.HashCodeHelper.ComputeSha256HashAsInt(System.String)">
            <summary>
            根据字符串计算一个Hash值
            </summary>
            <param name="rawData"></param>
            <returns></returns>
        </member>
        <member name="T:Fantasy.Helper.JsonHelper">
            <summary>
            提供操作 JSON 数据的辅助方法。
            </summary>
        </member>
        <member name="M:Fantasy.Helper.JsonHelper.ToJson``1(``0)">
            <summary>
            将对象序列化为 JSON 字符串。
            </summary>
            <typeparam name="T">要序列化的对象类型。</typeparam>
            <param name="t">要序列化的对象。</param>
            <returns>表示序列化对象的 JSON 字符串。</returns>
        </member>
        <member name="M:Fantasy.Helper.JsonHelper.Deserialize(System.String,System.Type,System.Boolean)">
            <summary>
            反序列化 JSON 字符串为指定类型的对象。
            </summary>
            <param name="json">要反序列化的 JSON 字符串。</param>
            <param name="type">目标对象的类型。</param>
            <param name="reflection">是否使用反射进行反序列化（默认为 true）。</param>
            <returns>反序列化后的对象。</returns>
        </member>
        <member name="M:Fantasy.Helper.JsonHelper.Deserialize``1(System.String)">
            <summary>
            反序列化 JSON 字符串为指定类型的对象。
            </summary>
            <typeparam name="T">目标对象的类型。</typeparam>
            <param name="json">要反序列化的 JSON 字符串。</param>
            <returns>反序列化后的对象。</returns>
        </member>
        <member name="M:Fantasy.Helper.JsonHelper.Clone``1(``0)">
            <summary>
            克隆对象，通过将对象序列化为 JSON，然后再进行反序列化。
            </summary>
            <typeparam name="T">要克隆的对象类型。</typeparam>
            <param name="t">要克隆的对象。</param>
            <returns>克隆后的对象。</returns>
        </member>
        <member name="T:Fantasy.Helper.NetworkHelper">
            <summary>
            提供网络操作相关的帮助方法。
            </summary>
        </member>
        <member name="M:Fantasy.Helper.NetworkHelper.GetIPEndPoint(System.String)">
            <summary>
            根据字符串获取一个IPEndPoint
            </summary>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="M:Fantasy.Helper.NetworkHelper.Clone(System.Net.EndPoint)">
            <summary>
            克隆一个IPEndPoint
            </summary>
            <param name="endPoint"></param>
            <returns></returns>
        </member>
        <member name="M:Fantasy.Helper.NetworkHelper.IPEndPointEquals(System.Net.EndPoint,System.Net.IPEndPoint)">
            <summary>
            比较两个IPEndPoint是否相等
            </summary>
            <param name="endPoint"></param>
            <param name="ipEndPoint"></param>
            <returns></returns>
        </member>
        <member name="M:Fantasy.Helper.NetworkHelper.IPEndPointEquals(System.Net.IPEndPoint,System.Net.IPEndPoint)">
            <summary>
            比较两个IPEndPoint是否相等
            </summary>
            <param name="endPoint"></param>
            <param name="ipEndPoint"></param>
            <returns></returns>
        </member>
        <member name="M:Fantasy.Helper.NetworkHelper.SocketAddressToByte(System.Net.SocketAddress,System.Byte[],System.Int32)">
            <summary>
            将SocketAddress写入到Byte[]中
            </summary>
            <param name="socketAddress"></param>
            <param name="buffer"></param>
            <param name="offset"></param>
        </member>
        <member name="M:Fantasy.Helper.NetworkHelper.ByteToSocketAddress(System.Byte[],System.Int32,System.Net.SocketAddress@)">
            <summary>
            将byre[]转换为SocketAddress
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="socketAddress"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Fantasy.Helper.NetworkHelper.ByteToSocketAddress(System.ReadOnlyMemory{System.Byte},System.Int32,System.Net.SocketAddress@)">
            <summary>
            将ReadOnlyMemory转换为SocketAddress
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="socketAddress"></param>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Fantasy.Helper.NetworkHelper.GetIPEndPoint(System.Net.SocketAddress)">
            <summary>
            根据SocketAddress获得IPEndPoint
            </summary>
            <param name="socketAddress"></param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:Fantasy.Helper.NetworkHelper.GetAddressIPs">
            <summary>
            获取本机所有网络适配器的IP地址。
            </summary>
            <returns>IP地址数组。</returns>
        </member>
        <member name="M:Fantasy.Helper.NetworkHelper.ToIPEndPoint(System.String,System.Int32)">
            <summary>
            将主机名和端口号转换为 <see cref="T:System.Net.IPEndPoint"/> 实例。
            </summary>
            <param name="host">主机名。</param>
            <param name="port">端口号。</param>
            <returns><see cref="T:System.Net.IPEndPoint"/> 实例。</returns>
        </member>
        <member name="M:Fantasy.Helper.NetworkHelper.ToIPEndPoint(System.String)">
            <summary>
            将地址字符串转换为 <see cref="T:System.Net.IPEndPoint"/> 实例。
            </summary>
            <param name="address">地址字符串，格式为 "主机名:端口号"。</param>
            <returns><see cref="T:System.Net.IPEndPoint"/> 实例。</returns>
        </member>
        <member name="M:Fantasy.Helper.NetworkHelper.IPEndPointToStr(System.Net.IPEndPoint)">
            <summary>
            将 <see cref="T:System.Net.IPEndPoint"/> 实例转换为字符串表示形式。
            </summary>
            <param name="self"><see cref="T:System.Net.IPEndPoint"/> 实例。</param>
            <returns>表示 <see cref="T:System.Net.IPEndPoint"/> 的字符串。</returns>
        </member>
        <member name="M:Fantasy.Helper.NetworkHelper.SetSioUdpConnReset(System.Net.Sockets.Socket)">
            <summary>
            针对 Windows 平台设置UDP连接重置选项。
            </summary>
            <param name="socket">要设置选项的 <see cref="T:System.Net.Sockets.Socket"/> 实例。</param>
        </member>
        <member name="M:Fantasy.Helper.NetworkHelper.SetSocketBufferToOsLimit(System.Net.Sockets.Socket)">
            <summary>
            将 Socket 缓冲区大小设置为操作系统限制。
            </summary>
            <param name="socket">要设置缓冲区大小的 Socket。</param>
        </member>
        <member name="M:Fantasy.Helper.NetworkHelper.SetReceiveBufferToOSLimit(System.Net.Sockets.Socket,System.Int32,System.Int32)">
            <summary>
            将 Socket 接收缓冲区大小设置为操作系统限制。
            尝试增加接收缓冲区大小的次数 = 默认 + 最大增加 100 MB。
            </summary>
            <param name="socket">要设置接收缓冲区大小的 Socket。</param>
            <param name="stepSize">每次增加的步长大小。</param>
            <param name="attempts">尝试增加缓冲区大小的次数。</param>
        </member>
        <member name="M:Fantasy.Helper.NetworkHelper.SetSendBufferToOSLimit(System.Net.Sockets.Socket,System.Int32,System.Int32)">
            <summary>
            将 Socket 发送缓冲区大小设置为操作系统限制。
            尝试增加发送缓冲区大小的次数 = 默认 + 最大增加 100 MB。
            </summary>
            <param name="socket">要设置发送缓冲区大小的 Socket。</param>
            <param name="stepSize">每次增加的步长大小。</param>
            <param name="attempts">尝试增加缓冲区大小的次数。</param>
        </member>
        <member name="T:Fantasy.Helper.RandomHelper">
            <summary>
            随机数操作助手类，提供各种随机数生成和操作方法。
            </summary>
        </member>
        <member name="M:Fantasy.Helper.RandomHelper.RandUInt64">
            <summary>
            生成一个随机的无符号 64 位整数。
            </summary>
            <returns>无符号 64 位整数。</returns>
        </member>
        <member name="M:Fantasy.Helper.RandomHelper.RandInt64">
            <summary>
            生成一个随机的 64 位整数。
            </summary>
            <returns>64 位整数。</returns>
        </member>
        <member name="M:Fantasy.Helper.RandomHelper.RandUInt32">
            <summary>
            生成一个随机的无符号 32 位整数。
            </summary>
            <returns>无符号 32 位整数。</returns>
        </member>
        <member name="M:Fantasy.Helper.RandomHelper.RandUInt16">
            <summary>
            生成一个随机的无符号 16 位整数。
            </summary>
            <returns>无符号 16 位整数。</returns>
        </member>
        <member name="M:Fantasy.Helper.RandomHelper.RandomNumber(System.Int32,System.Int32)">
            <summary>
            在指定范围内生成一个随机整数（包含下限，不包含上限）。
            </summary>
            <param name="lower">下限。</param>
            <param name="upper">上限。</param>
            <returns>生成的随机整数。</returns>
        </member>
        <member name="M:Fantasy.Helper.RandomHelper.RandomBool">
            <summary>
            生成一个随机的布尔值。
            </summary>
            <returns>随机的布尔值。</returns>
        </member>
        <member name="M:Fantasy.Helper.RandomHelper.RandomArray``1(``0[])">
            <summary>
            从数组中随机选择一个元素。
            </summary>
            <typeparam name="T">数组元素的类型。</typeparam>
            <param name="array">要选择的数组。</param>
            <returns>随机选择的数组元素。</returns>
        </member>
        <member name="M:Fantasy.Helper.RandomHelper.RandomArray``1(System.Collections.Generic.List{``0})">
            <summary>
            从列表中随机选择一个元素。
            </summary>
            <typeparam name="T">列表元素的类型。</typeparam>
            <param name="array">要选择的列表。</param>
            <returns>随机选择的列表元素。</returns>
        </member>
        <member name="M:Fantasy.Helper.RandomHelper.BreakRank``1(System.Collections.Generic.List{``0})">
            <summary>
            打乱列表中元素的顺序。
            </summary>
            <typeparam name="T">列表元素的类型。</typeparam>
            <param name="arr">要打乱顺序的列表。</param>
        </member>
        <member name="M:Fantasy.Helper.RandomHelper.RandFloat01">
            <summary>
            生成一个介于 0 和 1 之间的随机单精度浮点数。
            </summary>
            <returns>随机单精度浮点数。</returns>
        </member>
        <member name="M:Fantasy.Helper.RandomHelper.RandomByWeight(System.Int32[])">
            <summary>
            根据权重随机选择一个索引。
            </summary>
            <param name="weights">权重数组，每个元素表示相应索引的权重。</param>
            <returns>随机选择的索引值。</returns>
        </member>
        <member name="M:Fantasy.Helper.RandomHelper.RandomByFixedProbability(System.Int32[])">
            <summary>
            根据固定概率随机选择一个索引，即某个数值上限内随机多少次。
            </summary>
            <param name="args">概率数组，每个元素表示相应索引的概率。</param>
            <returns>随机选择的索引值。</returns>
        </member>
        <member name="M:Fantasy.Helper.RandomHelper.NextFloat(System.Boolean)">
            <summary>
            返回随机数。
            </summary>
            <param name="containNegative">是否包含负数。</param>
            <returns>返回一个随机的单精度浮点数。</returns>
        </member>
        <member name="M:Fantasy.Helper.RandomHelper.NextFloat(System.Single)">
            <summary>
            返回一个小于所指定最大值的非负随机数。
            </summary>
            <param name="maxValue">要生成的随机数的上限（随机数不能取该上限值）。 maxValue 必须大于或等于零。</param>
            <returns>大于等于零且小于 maxValue 的单精度浮点数，即：返回值的范围通常包括零但不包括 maxValue。 不过，如果 maxValue 等于零，则返回 maxValue。</returns>
        </member>
        <member name="M:Fantasy.Helper.RandomHelper.NextFloat(System.Single,System.Single)">
            <summary>
            返回一个指定范围内的随机数。
            </summary>
            <param name="minValue">返回的随机数的下界（随机数可取该下界值）。</param>
            <param name="maxValue">返回的随机数的上界（随机数不能取该上界值）。 maxValue 必须大于或等于 minValue。</param>
            <returns>一个大于等于 minValue 且小于 maxValue 的单精度浮点数，即：返回的值范围包括 minValue 但不包括 maxValue。 如果 minValue 等于 maxValue，则返回 minValue。</returns>
        </member>
        <member name="M:Fantasy.Helper.RandomHelper.NextVector2(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            在指定的矩形区域内随机生成一个二维向量位置。
            </summary>
            <param name="minX">X轴最小值。</param>
            <param name="maxX">X轴最大值。</param>
            <param name="minY">Y轴最小值。</param>
            <param name="maxY">Y轴最大值。</param>
            <returns>随机生成的二维向量位置。</returns>
        </member>
        <member name="M:Fantasy.Helper.RandomHelper.RandomNumberCode(System.Int32)">
            <summary>
            生成指定长度的随机数字代码。
            </summary>
            <param name="len">数字代码的长度。</param>
            <returns>生成的随机数字代码。</returns>
        </member>
        <member name="T:Fantasy.Helper.SocketHelper">
            <summary>
            Socket帮助类
            </summary>
        </member>
        <member name="T:Fantasy.Helper.TimeHelper">
            <summary>
            提供与时间相关的帮助方法。
            </summary>
        </member>
        <member name="F:Fantasy.Helper.TimeHelper.Hour">
            <summary>
            一小时的毫秒值。
            </summary>
        </member>
        <member name="F:Fantasy.Helper.TimeHelper.Minute">
            <summary>
            一分钟的毫秒值。
            </summary>
        </member>
        <member name="F:Fantasy.Helper.TimeHelper.OneDay">
            <summary>
            一天的毫秒值。
            </summary>
        </member>
        <member name="P:Fantasy.Helper.TimeHelper.Now">
            <summary>
            获取当前时间的毫秒数，从1970年1月1日开始计算。
            </summary>
        </member>
        <member name="M:Fantasy.Helper.TimeHelper.Transition(System.DateTime)">
            <summary>
            根据时间获取时间戳
            </summary>
        </member>
        <member name="M:Fantasy.Helper.TimeHelper.TransitionToSeconds(System.DateTime)">
            <summary>
            根据时间获取 时间戳
            </summary>
        </member>
        <member name="M:Fantasy.Helper.TimeHelper.Transition(System.Int64)">
            <summary>
            将毫秒数转换为日期时间。
            </summary>
            <param name="timeStamp">要转换的毫秒数。</param>
            <returns>转换后的日期时间。</returns>
        </member>
        <member name="M:Fantasy.Helper.TimeHelper.TransitionLocal(System.Int64)">
            <summary>
            将毫秒数转换为本地时间的日期时间。
            </summary>
            <param name="timeStamp">要转换的毫秒数。</param>
            <returns>转换后的本地时间的日期时间。</returns>
        </member>
        <member name="T:Fantasy.Helper.WebSocketHelper">
            <summary>
            WebSocket帮助类
            </summary>
        </member>
        <member name="M:Fantasy.Helper.WebSocketHelper.GetWebSocketAddress(System.String,System.Boolean)">
            <summary>
            根据字符串获取WebSocket的连接地址
            </summary>
            <param name="address">目标服务器地址格式为:127.0.0.1:2000</param>
            <param name="isHttps">目标服务器是否为加密连接也就是https</param>
            <returns></returns>
            <exception cref="T:System.FormatException"></exception>
        </member>
        <member name="T:Fantasy.Helper.WinPeriod">
            <summary>
            精度设置
            </summary>
        </member>
        <member name="M:Fantasy.Helper.WinPeriod.Initialize">
            <summary>
            针对Windows平台设置精度
            </summary>
        </member>
        <member name="T:Fantasy.Http.HttpClientHelper">
            <summary>
            HTTP帮助类
            </summary>
        </member>
        <member name="M:Fantasy.Http.HttpClientHelper.CallNotDeserializeByPost(System.String,System.Net.Http.HttpContent)">
            <summary>
            用Post方式请求string数据
            </summary>
            <param name="url"></param>
            <param name="content"></param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:Fantasy.Http.HttpClientHelper.CallNotDeserializeByGet(System.String)">
            <summary>
            用Get方式请求string数据
            </summary>
            <param name="url"></param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:Fantasy.Http.HttpClientHelper.CallByPost``1(System.String,System.Net.Http.HttpContent)">
            <summary>
            用Post方式请求JSON数据，并自动把JSON转换为对象。
            </summary>
            <param name="url"></param>
            <param name="content"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Fantasy.Http.HttpClientHelper.CallByPost``1(System.String,System.Net.Http.HttpMethod)">
            <summary>
            用Post方式请求JSON数据，并自动把JSON转换为对象。
            </summary>
            <param name="url"></param>
            <param name="method"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Fantasy.Http.HttpClientHelper.CallByGet``1(System.String)">
            <summary>
            用Get方式请求JSON数据，并自动把JSON转换为对象。
            </summary>
            <param name="url"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Fantasy.Http.HttpClientHelper.Call``2(System.String,System.Int32,System.Net.Http.Headers.AuthenticationHeaderValue,System.String,System.Object[])">
            <summary>
            用Post方式请求JSON数据，并自动把JSON转换为对象。
            </summary>
            <param name="url"></param>
            <param name="id"></param>
            <param name="authentication"></param>
            <param name="method"></param>
            <param name="params"></param>
            <typeparam name="TRequest"></typeparam>
            <typeparam name="TResponse"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Fantasy.Http.IJsonRpcRequest">
            <summary>
            一个JsonRPC的接口
            </summary>
        </member>
        <member name="M:Fantasy.Http.IJsonRpcRequest.Init(System.String,System.Int32,System.Object[])">
            <summary>
            用于初始化这个Json对象
            </summary>
            <param name="method"></param>
            <param name="id"></param>
            <param name="params"></param>
        </member>
        <member name="T:Fantasy.IdFactory.EntityIdStruct">
            <summary>
            表示一个唯一实体的ID。
            </summary>
        </member>
        <member name="M:Fantasy.IdFactory.EntityIdStruct.#ctor(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            WorldEntityIdStruct（如果超过下面参数的设定该ID会失效）。
            </summary>
            <param name="time">time不能超过1073741823</param>
            <param name="sceneId">sceneId不能超过65535</param>
            <param name="sequence">sequence不能超过262143</param>
        </member>
        <member name="T:Fantasy.IdFactory.RuntimeIdStruct">
            <summary>
            表示一个运行时的ID。
            </summary>
        </member>
        <member name="M:Fantasy.IdFactory.RuntimeIdStruct.#ctor(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            RuntimeIdStruct（如果超过下面参数的设定该ID会失效）。
            </summary>
            <param name="time">time不能超过8388607</param>
            <param name="sceneId">sceneId不能超过65535</param>
            <param name="sequence">sequence不能超过33554431</param>
        </member>
        <member name="T:Fantasy.IdFactory.IdFactoryHelper">
            <summary>
            Id生成器帮助类
            </summary>
        </member>
        <member name="P:Fantasy.IdFactory.IdFactoryHelper.EntityIdTool">
            <summary>
            EntityId工具
            </summary>
        </member>
        <member name="P:Fantasy.IdFactory.IdFactoryHelper.RuntimeIdTool">
            <summary>
            RuntimeId工具
            </summary>
        </member>
        <member name="M:Fantasy.IdFactory.IdFactoryHelper.Initialize(Fantasy.IdFactory.IdFactoryType)">
            <summary>
            初始化
            </summary>
            <param name="idFactoryType"></param>
        </member>
        <member name="T:Fantasy.IdFactory.IdFactoryType">
            <summary>
            ID生成器规则
            </summary>
        </member>
        <member name="F:Fantasy.IdFactory.IdFactoryType.None">
            <summary>
            空。
            </summary>
        </member>
        <member name="F:Fantasy.IdFactory.IdFactoryType.Default">
            <summary>
            默认生成器
            Scene最大为65535个。
            </summary>
        </member>
        <member name="F:Fantasy.IdFactory.IdFactoryType.World">
            <summary>
            ID中包含World,使用这种方式可以不用管理合区的ID重复的问题。
            但Scene的数量也会限制到255个。
            </summary>
        </member>
        <member name="T:Fantasy.IdFactory.IEntityIdFactory">
            <summary>
            EntityId生成器接口类
            </summary>
        </member>
        <member name="P:Fantasy.IdFactory.IEntityIdFactory.Create">
            <summary>
            创建一个新的Id
            </summary>
        </member>
        <member name="T:Fantasy.IdFactory.IRuntimeIdFactory">
            <summary>
            RuntimeId生成器接口类
            </summary>
        </member>
        <member name="P:Fantasy.IdFactory.IRuntimeIdFactory.Create">
            <summary>
            创建一个新的Id
            </summary>
        </member>
        <member name="T:Fantasy.IdFactory.IIdFactoryTool">
            <summary>
            Id扩展工具接口
            </summary>
        </member>
        <member name="M:Fantasy.IdFactory.IIdFactoryTool.GetTime(System.Int64@)">
            <summary>
            获得创建时间
            </summary>
            <param name="entityId"></param>
            <returns></returns>
        </member>
        <member name="M:Fantasy.IdFactory.IIdFactoryTool.GetSceneId(System.Int64@)">
            <summary>
            获得SceneId
            </summary>
            <param name="entityId"></param>
            <returns></returns>
        </member>
        <member name="M:Fantasy.IdFactory.IIdFactoryTool.GetWorldId(System.Int64@)">
            <summary>
            获得WorldId
            </summary>
            <param name="entityId"></param>
            <returns></returns>
        </member>
        <member name="T:Fantasy.IdFactory.WorldEntityIdStruct">
            <summary>
            表示一个唯一实体的ID。
            </summary>
        </member>
        <member name="M:Fantasy.IdFactory.WorldEntityIdStruct.#ctor(System.UInt32,System.UInt32,System.Byte,System.UInt32)">
            <summary>
            WorldEntityIdStruct（如果超过下面参数的设定该ID会失效）。
            </summary>
            <param name="time">time不能超过1073741823</param>
            <param name="sceneId">sceneId不能超过255</param>
            <param name="wordId">wordId不能超过255</param>
            <param name="sequence">sequence不能超过262143</param>
        </member>
        <member name="T:Fantasy.IdFactory.WorldRuntimeIdStruct">
            <summary>
            表示一个运行时的ID。
            </summary>
        </member>
        <member name="M:Fantasy.IdFactory.WorldRuntimeIdStruct.#ctor(System.UInt32,System.UInt32,System.Byte,System.UInt32)">
            <summary>
            WorldRuntimeIdStruct（如果超过下面参数的设定该ID会失效）。
            </summary>
            <param name="time">time不能超过8388607</param>
            <param name="sceneId">sceneId不能超过255</param>
            <param name="wordId">wordId不能超过255</param>
            <param name="sequence">sequence不能超过33554431</param>
        </member>
        <member name="T:Fantasy.ConsoleLog">
            <summary>
            标准的控制台Log
            </summary>
        </member>
        <member name="M:Fantasy.ConsoleLog.Initialize(Fantasy.Platform.Net.ProcessMode)">
            <summary>
            初始化方法
            </summary>
            <param name="processMode"></param>
        </member>
        <member name="M:Fantasy.ConsoleLog.Trace(System.String)">
            <summary>
            记录跟踪级别的日志消息。
            </summary>
            <param name="message">日志消息。</param>
        </member>
        <member name="M:Fantasy.ConsoleLog.Warning(System.String)">
            <summary>
            记录警告级别的日志消息。
            </summary>
            <param name="message">日志消息。</param>
        </member>
        <member name="M:Fantasy.ConsoleLog.Info(System.String)">
            <summary>
            记录信息级别的日志消息。
            </summary>
            <param name="message">日志消息。</param>
        </member>
        <member name="M:Fantasy.ConsoleLog.Debug(System.String)">
            <summary>
            记录调试级别的日志消息。
            </summary>
            <param name="message">日志消息。</param>
        </member>
        <member name="M:Fantasy.ConsoleLog.Error(System.String)">
            <summary>
            记录错误级别的日志消息。
            </summary>
            <param name="message">日志消息。</param>
        </member>
        <member name="M:Fantasy.ConsoleLog.Fatal(System.String)">
            <summary>
            记录严重错误级别的日志消息。
            </summary>
            <param name="message">日志消息。</param>
        </member>
        <member name="M:Fantasy.ConsoleLog.Trace(System.String,System.Object[])">
            <summary>
            记录跟踪级别的格式化日志消息。
            </summary>
            <param name="message">日志消息模板。</param>
            <param name="args">格式化参数。</param>
        </member>
        <member name="M:Fantasy.ConsoleLog.Warning(System.String,System.Object[])">
            <summary>
            记录警告级别的格式化日志消息。
            </summary>
            <param name="message">日志消息模板。</param>
            <param name="args">格式化参数。</param>
        </member>
        <member name="M:Fantasy.ConsoleLog.Info(System.String,System.Object[])">
            <summary>
            记录信息级别的格式化日志消息。
            </summary>
            <param name="message">日志消息模板。</param>
            <param name="args">格式化参数。</param>
        </member>
        <member name="M:Fantasy.ConsoleLog.Debug(System.String,System.Object[])">
            <summary>
            记录调试级别的格式化日志消息。
            </summary>
            <param name="message">日志消息模板。</param>
            <param name="args">格式化参数。</param>
        </member>
        <member name="M:Fantasy.ConsoleLog.Error(System.String,System.Object[])">
            <summary>
            记录错误级别的格式化日志消息。
            </summary>
            <param name="message">日志消息模板。</param>
            <param name="args">格式化参数。</param>
        </member>
        <member name="M:Fantasy.ConsoleLog.Fatal(System.String,System.Object[])">
            <summary>
            记录严重错误级别的格式化日志消息。
            </summary>
            <param name="message">日志消息模板。</param>
            <param name="args">格式化参数。</param>
        </member>
        <member name="T:Fantasy.ILog">
            <summary>
            定义日志记录功能的接口。
            </summary>
        </member>
        <member name="M:Fantasy.ILog.Initialize(Fantasy.Platform.Net.ProcessMode)">
            <summary>
            初始化
            </summary>
            <param name="processMode"></param>
        </member>
        <member name="M:Fantasy.ILog.Trace(System.String)">
            <summary>
            记录跟踪级别的日志消息。
            </summary>
            <param name="message">日志消息。</param>
        </member>
        <member name="M:Fantasy.ILog.Warning(System.String)">
            <summary>
            记录警告级别的日志消息。
            </summary>
            <param name="message">日志消息。</param>
        </member>
        <member name="M:Fantasy.ILog.Info(System.String)">
            <summary>
            记录信息级别的日志消息。
            </summary>
            <param name="message">日志消息。</param>
        </member>
        <member name="M:Fantasy.ILog.Debug(System.String)">
            <summary>
            记录调试级别的日志消息。
            </summary>
            <param name="message">日志消息。</param>
        </member>
        <member name="M:Fantasy.ILog.Error(System.String)">
            <summary>
            记录错误级别的日志消息。
            </summary>
            <param name="message">日志消息。</param>
        </member>
        <member name="M:Fantasy.ILog.Trace(System.String,System.Object[])">
            <summary>
            记录跟踪级别的格式化日志消息。
            </summary>
            <param name="message">日志消息模板。</param>
            <param name="args">格式化参数。</param>
        </member>
        <member name="M:Fantasy.ILog.Warning(System.String,System.Object[])">
            <summary>
            记录警告级别的格式化日志消息。
            </summary>
            <param name="message">日志消息模板。</param>
            <param name="args">格式化参数。</param>
        </member>
        <member name="M:Fantasy.ILog.Info(System.String,System.Object[])">
            <summary>
            记录信息级别的格式化日志消息。
            </summary>
            <param name="message">日志消息模板。</param>
            <param name="args">格式化参数。</param>
        </member>
        <member name="M:Fantasy.ILog.Debug(System.String,System.Object[])">
            <summary>
            记录调试级别的格式化日志消息。
            </summary>
            <param name="message">日志消息模板。</param>
            <param name="args">格式化参数。</param>
        </member>
        <member name="M:Fantasy.ILog.Error(System.String,System.Object[])">
            <summary>
            记录错误级别的格式化日志消息。
            </summary>
            <param name="message">日志消息模板。</param>
            <param name="args">格式化参数。</param>
        </member>
        <member name="T:Fantasy.Log">
            <summary>
            提供日志记录功能的静态类。
            </summary>
        </member>
        <member name="M:Fantasy.Log.Initialize">
            <summary>
            初始化Log系统
            </summary>
        </member>
        <member name="M:Fantasy.Log.Register(Fantasy.ILog)">
            <summary>
            注册一个日志系统
            </summary>
            <param name="log"></param>
        </member>
        <member name="M:Fantasy.Log.Trace(System.String)">
            <summary>
            记录跟踪级别的日志消息。
            </summary>
            <param name="msg">日志消息。</param>
        </member>
        <member name="M:Fantasy.Log.Debug(System.String)">
            <summary>
            记录调试级别的日志消息。
            </summary>
            <param name="msg">日志消息。</param>
        </member>
        <member name="M:Fantasy.Log.Info(System.String)">
            <summary>
            记录信息级别的日志消息。
            </summary>
            <param name="msg">日志消息。</param>
        </member>
        <member name="M:Fantasy.Log.TraceInfo(System.String)">
            <summary>
            记录跟踪级别的日志消息，并附带调用栈信息。
            </summary>
            <param name="msg">日志消息。</param>
        </member>
        <member name="M:Fantasy.Log.Warning(System.String)">
            <summary>
            记录警告级别的日志消息。
            </summary>
            <param name="msg">日志消息。</param>
        </member>
        <member name="M:Fantasy.Log.Error(System.String)">
            <summary>
            记录错误级别的日志消息，并附带调用栈信息。
            </summary>
            <param name="msg">日志消息。</param>
        </member>
        <member name="M:Fantasy.Log.Error(System.Exception)">
            <summary>
            记录异常的错误级别的日志消息，并附带调用栈信息。
            </summary>
            <param name="e">异常对象。</param>
        </member>
        <member name="M:Fantasy.Log.Trace(System.String,System.Object[])">
            <summary>
            记录跟踪级别的格式化日志消息，并附带调用栈信息。
            </summary>
            <param name="message">日志消息模板。</param>
            <param name="args">格式化参数。</param>
        </member>
        <member name="M:Fantasy.Log.Warning(System.String,System.Object[])">
            <summary>
            记录警告级别的格式化日志消息。
            </summary>
            <param name="message">日志消息模板。</param>
            <param name="args">格式化参数。</param>
        </member>
        <member name="M:Fantasy.Log.Info(System.String,System.Object[])">
            <summary>
            记录信息级别的格式化日志消息。
            </summary>
            <param name="message">日志消息模板。</param>
            <param name="args">格式化参数。</param>
        </member>
        <member name="M:Fantasy.Log.Debug(System.String,System.Object[])">
            <summary>
            记录调试级别的格式化日志消息。
            </summary>
            <param name="message">日志消息模板。</param>
            <param name="args">格式化参数。</param>
        </member>
        <member name="M:Fantasy.Log.Error(System.String,System.Object[])">
            <summary>
            记录错误级别的格式化日志消息，并附带调用栈信息。
            </summary>
            <param name="message">日志消息模板。</param>
            <param name="args">格式化参数。</param>
        </member>
        <member name="T:Fantasy.PacketParser.BufferPacketParser">
            <summary>
            BufferPacketParser消息格式化器抽象类
            这个不会用在TCP协议中、因此不用考虑分包和粘包的问题。
            目前这个只会用在KCP协议中、因为KCP出来的就是一个完整的包、所以可以一次性全部解析出来。
            如果是用在其他协议上可能会出现问题。
            </summary>
        </member>
        <member name="M:Fantasy.PacketParser.BufferPacketParser.UnPack(System.Byte[],System.Int32@,Fantasy.PacketParser.Interface.APackInfo@)">
            <summary>
            解包方法
            </summary>
            <param name="buffer">buffer</param>
            <param name="count">count</param>
            <param name="packInfo">packInfo</param>
            <returns></returns>
        </member>
        <member name="T:Fantasy.PacketParser.InnerBufferPacketParser">
            <summary>
            服务器之间专用的BufferPacketParser消息格式化器
            </summary>
        </member>
        <member name="M:Fantasy.PacketParser.InnerBufferPacketParser.UnPack(System.Byte[],System.Int32@,Fantasy.PacketParser.Interface.APackInfo@)">
            <summary>
            <see cref="M:Fantasy.PacketParser.BufferPacketParser.UnPack(System.Byte[],System.Int32@,Fantasy.PacketParser.Interface.APackInfo@)"/>
            </summary>
            <param name="buffer"></param>
            <param name="count"></param>
            <param name="packInfo"></param>
            <returns></returns>
            <exception cref="T:Fantasy.Network.ScanException"></exception>
        </member>
        <member name="T:Fantasy.PacketParser.OuterBufferPacketParser">
            <summary>
            客户端和服务器之间专用的BufferPacketParser消息格式化器
            </summary>
        </member>
        <member name="M:Fantasy.PacketParser.OuterBufferPacketParser.UnPack(System.Byte[],System.Int32@,Fantasy.PacketParser.Interface.APackInfo@)">
            <summary>
            <see cref="M:Fantasy.PacketParser.BufferPacketParser.UnPack(System.Byte[],System.Int32@,Fantasy.PacketParser.Interface.APackInfo@)"/>
            </summary>
            <param name="buffer"></param>
            <param name="count"></param>
            <param name="packInfo"></param>
            <returns></returns>
            <exception cref="T:Fantasy.Network.ScanException"></exception>
        </member>
        <member name="T:Fantasy.PacketParser.OuterWebglBufferPacketParser">
            <summary>
            Webgl专用的客户端和服务器之间专用的BufferPacketParser消息格式化器
            </summary>
        </member>
        <member name="M:Fantasy.PacketParser.OuterWebglBufferPacketParser.UnPack(System.Byte[],System.Int32@,Fantasy.PacketParser.Interface.APackInfo@)">
            <summary>
            <see cref="M:Fantasy.PacketParser.BufferPacketParser.UnPack(System.Byte[],System.Int32@,Fantasy.PacketParser.Interface.APackInfo@)"/>
            </summary>
            <param name="buffer"></param>
            <param name="count"></param>
            <param name="packInfo"></param>
            <returns></returns>
            <exception cref="T:Fantasy.Network.ScanException"></exception>
        </member>
        <member name="T:Fantasy.PacketParser.OuterBufferPacketParserHelper">
            <summary>
            打包Outer消息的帮助类
            </summary>
        </member>
        <member name="M:Fantasy.PacketParser.OuterBufferPacketParserHelper.Pack(Fantasy.Scene,System.UInt32,Fantasy.Network.Interface.IMessage,System.Int32@)">
            <summary>
            打包一个网络消息
            </summary>
            <param name="scene">scene</param>
            <param name="rpcId">如果是RPC消息需要传递一个rpcId</param>
            <param name="message">打包的网络消息</param>
            <param name="memoryStreamLength">序列化后流的长度</param>
            <returns>打包完成会返回一个MemoryStreamBuffer</returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="F:Fantasy.PacketParser.ReadOnlyMemoryPacketParser.PackInfo">
            <summary>
            一个网络消息包
            </summary>
        </member>
        <member name="T:Fantasy.PacketParser.Interface.APacketParser">
            <summary>
            抽象的包解析器基类，用于解析网络通信数据包。
            </summary>
        </member>
        <member name="T:Fantasy.PacketParser.Packet">
            <summary>
            提供关于消息包的常量定义。
            </summary>
        </member>
        <member name="F:Fantasy.PacketParser.Packet.PacketBodyMaxLength">
            <summary>
            消息体最大长度
            </summary>
        </member>
        <member name="F:Fantasy.PacketParser.Packet.PacketLength">
            <summary>
            消息体长度在消息头占用的长度
            </summary>
        </member>
        <member name="F:Fantasy.PacketParser.Packet.ProtocolCodeLength">
            <summary>
            协议编号在消息头占用的长度
            </summary>
        </member>
        <member name="F:Fantasy.PacketParser.Packet.PacketRouteIdLength">
            <summary>
            RouteId长度
            </summary>
        </member>
        <member name="F:Fantasy.PacketParser.Packet.RpcIdLength">
            <summary>
            RpcId在消息头占用的长度
            </summary>
        </member>
        <member name="F:Fantasy.PacketParser.Packet.OuterPacketRpcIdLocation">
            <summary>
            OuterRPCId所在的位置
            </summary>
        </member>
        <member name="F:Fantasy.PacketParser.Packet.InnerPacketRpcIdLocation">
            <summary>
            InnerRPCId所在的位置
            </summary>
        </member>
        <member name="F:Fantasy.PacketParser.Packet.InnerPacketRouteRouteIdLocation">
            <summary>
            RouteId所在的位置
            </summary>
        </member>
        <member name="F:Fantasy.PacketParser.Packet.OuterPacketHeadLength">
            <summary>
            外网消息头长度（消息体长度在消息头占用的长度 + 协议编号在消息头占用的长度 + RPCId长度 + RouteId长度）
            </summary>
        </member>
        <member name="F:Fantasy.PacketParser.Packet.InnerPacketHeadLength">
            <summary>
            内网消息头长度（消息体长度在消息头占用的长度 + 协议编号在消息头占用的长度 + RPCId长度 + RouteId长度）
            </summary>
        </member>
        <member name="M:Fantasy.PacketParser.OuterPackInfo.Deserialize(System.Type)">
            <summary>
            将消息数据从内存反序列化为指定的消息类型实例。
            </summary>
            <param name="messageType">目标消息类型。</param>
            <returns>反序列化后的消息类型实例。</returns>
        </member>
        <member name="T:Fantasy.Scheduler.InnerMessageScheduler">
            <summary>
            提供了一个机制来调度和处理内部网络消息。
            </summary>
        </member>
        <member name="M:Fantasy.Scheduler.InnerMessageScheduler.#ctor(Fantasy.Scene)">
            <summary>
            提供了一个机制来调度和处理内部网络消息。
            </summary>
        </member>
        <member name="T:Fantasy.Scheduler.MessageSender">
            <summary>
            网络消息发送者的类。
            </summary>
        </member>
        <member name="P:Fantasy.Scheduler.MessageSender.RpcId">
            <summary>
            获取或设置 RPC ID。
            </summary>
        </member>
        <member name="P:Fantasy.Scheduler.MessageSender.RouteId">
            <summary>
            获取或设置路由 ID。
            </summary>
        </member>
        <member name="P:Fantasy.Scheduler.MessageSender.CreateTime">
            <summary>
            获取或设置创建时间。
            </summary>
        </member>
        <member name="P:Fantasy.Scheduler.MessageSender.MessageType">
            <summary>
            获取或设置消息类型。
            </summary>
        </member>
        <member name="P:Fantasy.Scheduler.MessageSender.Request">
            <summary>
            获取或设置请求消息。
            </summary>
        </member>
        <member name="P:Fantasy.Scheduler.MessageSender.Tcs">
            <summary>
            获取或设置任务。
            </summary>
        </member>
        <member name="M:Fantasy.Scheduler.MessageSender.Dispose">
            <summary>
            释放资源。
            </summary>
        </member>
        <member name="M:Fantasy.Scheduler.MessageSender.Create(System.UInt32,System.Type,Fantasy.Async.FTask{Fantasy.Network.Interface.IResponse})">
            <summary>
            创建一个 <see cref="T:Fantasy.Scheduler.MessageSender"/> 实例。
            </summary>
            <param name="rpcId">RPC ID。</param>
            <param name="requestType">请求消息类型。</param>
            <param name="tcs">任务。</param>
            <returns>创建的 <see cref="T:Fantasy.Scheduler.MessageSender"/> 实例。</returns>
        </member>
        <member name="M:Fantasy.Scheduler.MessageSender.Create(System.UInt32,Fantasy.Network.Interface.IRequest,Fantasy.Async.FTask{Fantasy.Network.Interface.IResponse})">
            <summary>
            创建一个 <see cref="T:Fantasy.Scheduler.MessageSender"/> 实例。
            </summary>
            <param name="rpcId">RPC ID。</param>
            <param name="request">请求消息。</param>
            <param name="tcs">任务。</param>
            <returns>创建的 <see cref="T:Fantasy.Scheduler.MessageSender"/> 实例。</returns>
        </member>
        <member name="M:Fantasy.Scheduler.MessageSender.Create(System.UInt32,System.Int64,Fantasy.Network.Interface.IRouteMessage,Fantasy.Async.FTask{Fantasy.Network.Interface.IResponse})">
            <summary>
            创建一个 <see cref="T:Fantasy.Scheduler.MessageSender"/> 实例。
            </summary>
            <param name="rpcId">RPC ID。</param>
            <param name="routeId">路由 ID。</param>
            <param name="request">路由消息请求。</param>
            <param name="tcs">任务。</param>
            <returns>创建的 <see cref="T:Fantasy.Scheduler.MessageSender"/> 实例。</returns>
        </member>
        <member name="T:Fantasy.Scheduler.OnNetworkMessageUpdateCheckTimeout">
            <summary>
            网络消息更新检查超时。
            </summary>
        </member>
        <member name="F:Fantasy.Scheduler.OnNetworkMessageUpdateCheckTimeout.Timeout">
            <summary>
            超时时间（毫秒）。
            </summary>
        </member>
        <member name="M:Fantasy.Scheduler.OnNetworkMessageUpdateCheckTimeout.Handler(Fantasy.Scheduler.NetworkMessageUpdate)">
            <summary>
            处理网络消息更新检查超时。
            </summary>
            <param name="self"></param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Fantasy.Scheduler.OuterMessageScheduler">
            <summary>
            提供了一个机制来调度和处理外部网络消息。
            </summary>
        </member>
        <member name="M:Fantasy.Scheduler.OuterMessageScheduler.#ctor(Fantasy.Scene)">
            <summary>
            提供了一个机制来调度和处理外部网络消息。
            </summary>
        </member>
        <member name="T:Fantasy.Platform.Net.MachineConfigData">
            <summary>
            用于记录服务器物理信息
            </summary>
        </member>
        <member name="F:Fantasy.Platform.Net.MachineConfigData.List">
            <summary>
            存放所有MachineConfigInfo信息
            </summary>
        </member>
        <member name="P:Fantasy.Platform.Net.MachineConfigData.Instance">
            <summary>
            获得MachineConfig的实例
            </summary>
        </member>
        <member name="M:Fantasy.Platform.Net.MachineConfigData.Initialize(System.String)">
            <summary>
            初始化MachineConfig
            </summary>
            <param name="machineConfigJson"></param>
        </member>
        <member name="M:Fantasy.Platform.Net.MachineConfigData.Get(System.UInt32)">
            <summary>
            根据Id获取MachineConfig
            </summary>
            <param name="id"></param>
            <returns></returns>
            <exception cref="T:System.IO.FileNotFoundException"></exception>
        </member>
        <member name="M:Fantasy.Platform.Net.MachineConfigData.TryGet(System.UInt32,Fantasy.Platform.Net.MachineConfig@)">
            <summary>
            根据Id获取MachineConfig
            </summary>
            <param name="id"></param>
            <param name="config"></param>
            <returns></returns>
        </member>
        <member name="T:Fantasy.Platform.Net.MachineConfig">
            <summary>
            表示一个物理服务器的信息
            </summary>
        </member>
        <member name="P:Fantasy.Platform.Net.MachineConfig.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:Fantasy.Platform.Net.MachineConfig.OuterIP">
            <summary>
            外网IP
            </summary>
        </member>
        <member name="P:Fantasy.Platform.Net.MachineConfig.OuterBindIP">
            <summary>
            外网绑定IP
            </summary>
        </member>
        <member name="P:Fantasy.Platform.Net.MachineConfig.InnerBindIP">
            <summary>
            内网绑定IP
            </summary>
        </member>
        <member name="T:Fantasy.Platform.Net.ProcessConfigData">
            <summary>
             用于管理进程信息
            </summary>
        </member>
        <member name="F:Fantasy.Platform.Net.ProcessConfigData.List">
            <summary>
            存放所有ProcessConfig信息
            </summary>
        </member>
        <member name="P:Fantasy.Platform.Net.ProcessConfigData.Instance">
            <summary>
            获得ProcessConfigData的实例
            </summary>
        </member>
        <member name="M:Fantasy.Platform.Net.ProcessConfigData.Initialize(System.String)">
            <summary>
            初始化MachineConfig
            </summary>
            <param name="processConfigJson"></param>
        </member>
        <member name="M:Fantasy.Platform.Net.ProcessConfigData.Get(System.UInt32)">
            <summary>
            根据Id获取ProcessConfig
            </summary>
            <param name="id"></param>
            <returns></returns>
            <exception cref="T:System.IO.FileNotFoundException"></exception>
        </member>
        <member name="M:Fantasy.Platform.Net.ProcessConfigData.TryGet(System.UInt32,Fantasy.Platform.Net.ProcessConfig@)">
            <summary>
            根据Id获取ProcessConfig
            </summary>
            <param name="id"></param>
            <param name="config"></param>
            <returns></returns>
        </member>
        <member name="M:Fantasy.Platform.Net.ProcessConfigData.ForEachByStartupGroup(System.UInt32)">
            <summary>
            按照startupGroup寻找属于startupGroup组的ProcessConfig
            </summary>
            <param name="startupGroup">startupGroup</param>
            <returns></returns>
        </member>
        <member name="T:Fantasy.Platform.Net.ProcessConfig">
            <summary>
            表示一个进程配置信息
            </summary>
        </member>
        <member name="P:Fantasy.Platform.Net.ProcessConfig.Id">
            <summary>
            进程Id
            </summary>
        </member>
        <member name="P:Fantasy.Platform.Net.ProcessConfig.MachineId">
            <summary>
            机器ID
            </summary>
        </member>
        <member name="P:Fantasy.Platform.Net.ProcessConfig.StartupGroup">
            <summary>
            启动组
            </summary>
        </member>
        <member name="T:Fantasy.Platform.Net.SceneConfigData">
            <summary>
            存放所有SceneConfigInfo信息
            </summary>
        </member>
        <member name="F:Fantasy.Platform.Net.SceneConfigData.List">
            <summary>
            存放所有SceneConfig信息
            </summary>
        </member>
        <member name="P:Fantasy.Platform.Net.SceneConfigData.Instance">
            <summary>
            获得SceneConfigData的实例
            </summary>
        </member>
        <member name="M:Fantasy.Platform.Net.SceneConfigData.Initialize(System.String)">
            <summary>
            初始化SceneConfig
            </summary>
            <param name="sceneConfigJson"></param>
        </member>
        <member name="M:Fantasy.Platform.Net.SceneConfigData.Get(System.UInt32)">
            <summary>
            根据Id获取SceneConfig
            </summary>
            <param name="id"></param>
            <returns></returns>
            <exception cref="T:System.IO.FileNotFoundException"></exception>
        </member>
        <member name="M:Fantasy.Platform.Net.SceneConfigData.TryGet(System.UInt32,Fantasy.Platform.Net.SceneConfig@)">
            <summary>
            根据Id获取SceneConfig
            </summary>
            <param name="id"></param>
            <param name="config"></param>
            <returns></returns>
        </member>
        <member name="M:Fantasy.Platform.Net.SceneConfigData.GetByProcess(System.UInt32)">
            <summary>
            获得SceneConfig
            </summary>
            <param name="serverConfigId"></param>
            <returns></returns>
        </member>
        <member name="M:Fantasy.Platform.Net.SceneConfigData.GetSceneBySceneType(System.Int32)">
            <summary>
            获得SceneConfig
            </summary>
            <param name="sceneType"></param>
            <returns></returns>
        </member>
        <member name="M:Fantasy.Platform.Net.SceneConfigData.GetSceneBySceneType(System.Int32,System.Int32)">
            <summary>
            获得SceneConfig
            </summary>
            <param name="world"></param>
            <param name="sceneType"></param>
            <returns></returns>
        </member>
        <member name="T:Fantasy.Platform.Net.SceneConfig">
            <summary>
            表示一个Scene配置信息
            </summary>
        </member>
        <member name="P:Fantasy.Platform.Net.SceneConfig.Id">
            <summary>
            ID
            </summary>
        </member>
        <member name="P:Fantasy.Platform.Net.SceneConfig.ProcessConfigId">
            <summary>
            进程Id
            </summary>
        </member>
        <member name="P:Fantasy.Platform.Net.SceneConfig.WorldConfigId">
            <summary>
            世界Id
            </summary>
        </member>
        <member name="P:Fantasy.Platform.Net.SceneConfig.SceneRuntimeMode">
            <summary>
            Scene运行类型
            </summary>
        </member>
        <member name="P:Fantasy.Platform.Net.SceneConfig.SceneTypeString">
            <summary>
            Scene类型
            </summary>
        </member>
        <member name="P:Fantasy.Platform.Net.SceneConfig.NetworkProtocol">
            <summary>
            协议类型
            </summary>
        </member>
        <member name="P:Fantasy.Platform.Net.SceneConfig.OuterPort">
            <summary>
            外网端口
            </summary>
        </member>
        <member name="P:Fantasy.Platform.Net.SceneConfig.InnerPort">
            <summary>
            内网端口
            </summary>
        </member>
        <member name="P:Fantasy.Platform.Net.SceneConfig.SceneType">
            <summary>
            Scene类型
            </summary>
        </member>
        <member name="P:Fantasy.Platform.Net.SceneConfig.RouteId">
            <summary>
            RouteId
            </summary>
        </member>
        <member name="M:Fantasy.Platform.Net.SceneConfig.Initialize">
            <summary>
            初始化方法
            </summary>
        </member>
        <member name="T:Fantasy.Platform.Net.WorldConfigData">
            <summary>
            存放所有WorldConfigInfo信息
            </summary>
        </member>
        <member name="F:Fantasy.Platform.Net.WorldConfigData.List">
            <summary>
            存放所有WorldConfigInfo信息
            </summary>
        </member>
        <member name="P:Fantasy.Platform.Net.WorldConfigData.Instance">
            <summary>
            获得WorldConfig的实例
            </summary>
        </member>
        <member name="M:Fantasy.Platform.Net.WorldConfigData.Initialize(System.String)">
            <summary>
            初始化WorldConfig
            </summary>
            <param name="worldConfigJson"></param>
        </member>
        <member name="M:Fantasy.Platform.Net.WorldConfigData.Get(System.UInt32)">
            <summary>
            根据Id获取WorldConfig
            </summary>
            <param name="id"></param>
            <returns></returns>
            <exception cref="T:System.IO.FileNotFoundException"></exception>
        </member>
        <member name="M:Fantasy.Platform.Net.WorldConfigData.TryGet(System.UInt32,Fantasy.Platform.Net.WorldConfig@)">
            <summary>
            根据Id获取WorldConfig
            </summary>
            <param name="id"></param>
            <param name="config"></param>
            <returns></returns>
        </member>
        <member name="T:Fantasy.Platform.Net.WorldConfig">
            <summary>
            表示一个世界配置信息
            </summary>
        </member>
        <member name="P:Fantasy.Platform.Net.WorldConfig.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:Fantasy.Platform.Net.WorldConfig.WorldName">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:Fantasy.Platform.Net.WorldConfig.DbConnection">
            <summary>
            数据库连接字符串
            </summary>
        </member>
        <member name="P:Fantasy.Platform.Net.WorldConfig.DbName">
            <summary>
            数据库名称
            </summary>
        </member>
        <member name="P:Fantasy.Platform.Net.WorldConfig.DbType">
            <summary>
            数据库类型
            </summary>
        </member>
        <member name="T:Fantasy.Platform.Net.Entry">
            <summary>
            Fantasy.Net 应用程序入口
            </summary>
            <exception cref="T:System.Exception">当命令行格式异常时抛出。</exception>
            <exception cref="T:System.NotSupportedException">不支持的 ProcessType 类型异常。</exception>
        </member>
        <member name="M:Fantasy.Platform.Net.Entry.Initialize(System.Reflection.Assembly[])">
            <summary>
            框架初始化
            </summary>
            <param name="assemblies">注册的Assembly</param>
        </member>
        <member name="M:Fantasy.Platform.Net.Entry.Start">
            <summary>
            启动Fantasy.Net
            </summary>
        </member>
        <member name="M:Fantasy.Platform.Net.Entry.Start(System.Reflection.Assembly[])">
            <summary>
            初始化并且启动框架
            </summary>
            <param name="assemblies"></param>
        </member>
        <member name="M:Fantasy.Platform.Net.Entry.Close">
            <summary>
            关闭 Fantasy
            </summary>
        </member>
        <member name="T:Fantasy.Platform.Net.Process">
            <summary>
            一个进程的实例
            </summary>
        </member>
        <member name="F:Fantasy.Platform.Net.Process.Id">
            <summary>
            当前进程的Id
            </summary>
        </member>
        <member name="F:Fantasy.Platform.Net.Process.MachineId">
            <summary>
            进程关联的MachineId
            </summary>
        </member>
        <member name="M:Fantasy.Platform.Net.Process.Dispose">
            <summary>
            销毁方法
            </summary>
        </member>
        <member name="T:Fantasy.Platform.Net.ProcessMode">
            <summary>
            Process运行模式
            </summary>
        </member>
        <member name="F:Fantasy.Platform.Net.ProcessMode.None">
            <summary>
            默认
            </summary>
        </member>
        <member name="F:Fantasy.Platform.Net.ProcessMode.Develop">
            <summary>
            开发模式
            </summary>
        </member>
        <member name="F:Fantasy.Platform.Net.ProcessMode.Release">
            <summary>
            发布模式
            </summary>
        </member>
        <member name="P:Fantasy.Platform.Net.CommandLineOptions.ProcessId">
            <summary>
            用于启动指定的进程，该进程的 ID 与 ProcessConfig 的 ID 相关联。此参数只能传递单个 ID，不支持传递多个 ID。
            </summary>
        </member>
        <member name="P:Fantasy.Platform.Net.CommandLineOptions.ProcessType">
            <summary>
            Process类型，获取或设置应用程序的类型。
            Game - 游戏服务器Process
            Robot - 机器人（暂未支持该功能）
            </summary>
        </member>
        <member name="P:Fantasy.Platform.Net.CommandLineOptions.Mode">
            <summary>
            服务器运行模式，获取或设置服务器的运行模式。
            Develop - 开发模式（启动Process配置表中的所有Process）
            Release - 发布模式（根据ProcessId启动Process）
            </summary>
        </member>
        <member name="P:Fantasy.Platform.Net.CommandLineOptions.InnerNetwork">
            <summary>
            服务器内部网络协议
            TCP - 服务器内部之间通讯使用TCP协议
            KCP - 服务器内部之间通讯使用KCP协议
            WebSocket - 服务器内部之间通讯使用WebSocket协议(不推荐、TCP或KCP)
            </summary>
        </member>
        <member name="P:Fantasy.Platform.Net.CommandLineOptions.SessionIdleCheckerTimeout">
            <summary>
            会话空闲检查超时时间。
            </summary>
        </member>
        <member name="P:Fantasy.Platform.Net.CommandLineOptions.SessionIdleCheckerInterval">
            <summary>
            会话空闲检查间隔。
            </summary>
        </member>
        <member name="P:Fantasy.Platform.Net.CommandLineOptions.StartupGroup">
            <summary>
            启动组。
            </summary>
        </member>
        <member name="T:Fantasy.Platform.Net.ProcessDefine">
            <summary>
            AppDefine
            </summary>
        </member>
        <member name="F:Fantasy.Platform.Net.ProcessDefine.Options">
            <summary>
            命令行选项
            </summary>
        </member>
        <member name="P:Fantasy.Platform.Net.ProcessDefine.ProcessId">
            <summary>
            App程序Id
            </summary>
        </member>
        <member name="P:Fantasy.Platform.Net.ProcessDefine.SessionIdleCheckerTimeout">
            <summary>
            会话空闲检查超时时间。
            </summary>
        </member>
        <member name="P:Fantasy.Platform.Net.ProcessDefine.SessionIdleCheckerInterval">
            <summary>
            会话空闲检查间隔。
            </summary>
        </member>
        <member name="F:Fantasy.Platform.Net.ProcessDefine.InnerNetwork">
            <summary>
            内部网络通讯协议类型
            </summary>
        </member>
        <member name="T:Fantasy.ThreadSynchronizationContext">
            <summary>
            线程的同步上下文
            </summary>
        </member>
        <member name="M:Fantasy.ThreadSynchronizationContext.Update">
            <summary>
            执行当前上下文投递过的逻辑
            </summary>
        </member>
        <member name="M:Fantasy.ThreadSynchronizationContext.Post(System.Threading.SendOrPostCallback,System.Object)">
            <summary>
            投递一个逻辑到当前上下文
            </summary>
            <param name="callback"></param>
            <param name="state"></param>
        </member>
        <member name="M:Fantasy.ThreadSynchronizationContext.Post(System.Action)">
            <summary>
            投递一个逻辑到当前上下文
            </summary>
            <param name="action"></param>
        </member>
        <member name="T:Fantasy.Pool.MultiThreadPool">
            <summary>
            线程安全的静态通用对象池。
            </summary>
        </member>
        <member name="T:Fantasy.Pool.MultiThreadPoolQueue">
            <summary>
            线程安全的对象池。
            </summary>
        </member>
        <member name="T:Fantasy.Pool.IPool">
            <summary>
            实现了这个接口代表支持对象池
            </summary>
        </member>
        <member name="M:Fantasy.Pool.IPool.IsPool">
            <summary>
            是否从池里创建的
            </summary>
        </member>
        <member name="M:Fantasy.Pool.IPool.SetIsPool(System.Boolean)">
            <summary>
            设置是否从池里创建的
            </summary>
            <param name="isPool"></param>
        </member>
        <member name="T:Fantasy.Pool.Pool`1">
            <summary>
            静态的对象池系统，不支持多线程。
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Fantasy.Pool.Pool`1.Count">
            <summary>
            池子里可用的数量
            </summary>
        </member>
        <member name="M:Fantasy.Pool.Pool`1.Rent">
            <summary>
            租借
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fantasy.Pool.Pool`1.Rent(System.Func{`0})">
            <summary>
            租借
            </summary>
            <param name="generator">如果池子里没有，会先执行这个委托。</param>
            <returns></returns>
        </member>
        <member name="M:Fantasy.Pool.Pool`1.Return(`0)">
            <summary>
            返还
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:Fantasy.Pool.Pool`1.Return(`0,System.Action{`0})">
            <summary>
            返还
            </summary>
            <param name="t">返还的东西</param>
            <param name="reset">返还后执行的委托</param>
        </member>
        <member name="M:Fantasy.Pool.Pool`1.Clear">
            <summary>
            清空池子
            </summary>
        </member>
        <member name="T:Fantasy.Pool.PoolCore">
            <summary>
            对象池抽象接口，用于创建和管理可重复使用的对象实例。
            </summary>
        </member>
        <member name="P:Fantasy.Pool.PoolCore.Count">
            <summary>
            池子里可用的数量
            </summary>
        </member>
        <member name="M:Fantasy.Pool.PoolCore.#ctor(System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="maxCapacity">初始的容量</param>
        </member>
        <member name="M:Fantasy.Pool.PoolCore.Rent``1">
            <summary>
            租借
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Fantasy.Pool.PoolCore.Rent(System.Type)">
            <summary>
            租借
            </summary>
            <param name="type">租借的类型</param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:Fantasy.Pool.PoolCore.Return(System.Type,Fantasy.Pool.IPool)">
            <summary>
            返还
            </summary>
            <param name="type"></param>
            <param name="obj"></param>
        </member>
        <member name="M:Fantasy.Pool.PoolCore.Dispose">
            <summary>
            销毁方法
            </summary>
        </member>
        <member name="T:Fantasy.Pool.PoolCore`1">
            <summary>
            泛型对象池核心类，用于创建和管理可重复使用的对象实例。
            </summary>
            <typeparam name="T">要池化的对象类型</typeparam>
        </member>
        <member name="P:Fantasy.Pool.PoolCore`1.Count">
            <summary>
            池子里可用的数量
            </summary>
        </member>
        <member name="M:Fantasy.Pool.PoolCore`1.#ctor(System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="maxCapacity">初始的容量</param>
        </member>
        <member name="M:Fantasy.Pool.PoolCore`1.Rent">
            <summary>
            租借
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fantasy.Pool.PoolCore`1.Return(`0)">
            <summary>
            返还
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Fantasy.Pool.PoolCore`1.Dispose">
            <summary>
            销毁方法
            </summary>
        </member>
        <member name="T:Fantasy.Pool.PoolWithDisposable`1">
            <summary>
            静态通用对象池，用于存储实现了 IDisposable 接口的对象。
            </summary>
            <typeparam name="T">要存储在对象池中的对象类型，必须实现 IDisposable 接口。</typeparam>
        </member>
        <member name="P:Fantasy.Pool.PoolWithDisposable`1.Count">
            <summary>
            池子里可用的数量
            </summary>
        </member>
        <member name="M:Fantasy.Pool.PoolWithDisposable`1.#ctor(System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="maxCapacity">初始的容量</param>
        </member>
        <member name="M:Fantasy.Pool.PoolWithDisposable`1.Rent">
            <summary>
            租借
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fantasy.Pool.PoolWithDisposable`1.Rent(System.Func{`0})">
            <summary>
            租借
            </summary>
            <param name="generator"></param>
            <returns></returns>
        </member>
        <member name="M:Fantasy.Pool.PoolWithDisposable`1.Return(`0)">
            <summary>
            返还
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:Fantasy.Pool.PoolWithDisposable`1.Return(`0,System.Action{`0})">
            <summary>
            返还
            </summary>
            <param name="t"></param>
            <param name="reset"></param>
        </member>
        <member name="M:Fantasy.Pool.PoolWithDisposable`1.Dispose">
            <summary>
            销毁方法
            </summary>
        </member>
        <member name="T:Fantasy.OnCreateScene">
            <summary>
            当Scene创建完成后发送的事件参数
            </summary>
        </member>
        <member name="F:Fantasy.OnCreateScene.Scene">
            <summary>
            获取与事件关联的场景实体。
            </summary>
        </member>
        <member name="M:Fantasy.OnCreateScene.#ctor(Fantasy.Scene)">
            <summary>
            初始化一个新的 OnCreateScene 实例。
            </summary>
            <param name="scene"></param>
        </member>
        <member name="T:Fantasy.Scene">
            <summary>
            表示一个场景实体，用于创建与管理特定的游戏场景信息。
            </summary>
        </member>
        <member name="P:Fantasy.Scene.SceneRuntimeType">
            <summary>
            Scene的运行类型
            </summary>
        </member>
        <member name="P:Fantasy.Scene.SceneType">
            <summary>
            Scene类型，对应SceneConfig的SceneType
            </summary>
        </member>
        <member name="P:Fantasy.Scene.World">
            <summary>
            所属的世界
            </summary>
        </member>
        <member name="P:Fantasy.Scene.Process">
            <summary>
            所在的Process
            </summary>
        </member>
        <member name="P:Fantasy.Scene.SceneConfigId">
            <summary>
            SceneConfig的Id
            </summary>
        </member>
        <member name="P:Fantasy.Scene.ThreadSynchronizationContext">
            <summary>
            当前Scene的上下文
            </summary>
        </member>
        <member name="F:Fantasy.Scene._entities">
            <summary>
            当前Scene的下创建的Entity
            </summary>
        </member>
        <member name="P:Fantasy.Scene.EntityIdFactory">
            <summary>
            Entity实体Id的生成器
            </summary>
        </member>
        <member name="P:Fantasy.Scene.RuntimeIdFactory">
            <summary>
            Entity实体RuntimeId的生成器
            </summary>
        </member>
        <member name="P:Fantasy.Scene.TimerComponent">
            <summary>
            Scene下的任务调度器系统组件
            </summary>
        </member>
        <member name="P:Fantasy.Scene.EventComponent">
            <summary>
            Scene下的事件系统组件
            </summary>
        </member>
        <member name="P:Fantasy.Scene.EntityComponent">
            <summary>
            Scene下的ESC系统组件
            </summary>
        </member>
        <member name="P:Fantasy.Scene.MessagePoolComponent">
            <summary>
            Scene下的网络消息对象池组件
            </summary>
        </member>
        <member name="P:Fantasy.Scene.CoroutineLockComponent">
            <summary>
            Scene下的协程锁组件
            </summary>
        </member>
        <member name="P:Fantasy.Scene.MessageDispatcherComponent">
            <summary>
            Scene下的网络消息派发组件
            </summary>
        </member>
        <member name="P:Fantasy.Scene.SingleCollectionComponent">
            <summary>
            Scene下的Entity分表组件
            </summary>
        </member>
        <member name="P:Fantasy.Scene.NetworkMessagingComponent">
            <summary>
            Scene下的内网消息发送组件
            </summary>
        </member>
        <member name="M:Fantasy.Scene.Dispose">
            <summary>
            Scene销毁方法，执行了该方法会把当前Scene下的所有实体都销毁掉。
            </summary>
        </member>
        <member name="M:Fantasy.Scene.Create(Fantasy.Platform.Net.Process,Fantasy.Platform.Net.MachineConfig,Fantasy.Platform.Net.SceneConfig)">
            <summary>
            创建一个新的Scene
            </summary>
            <param name="process">所属的Process</param>
            <param name="machineConfig">对应的MachineConfig配置文件</param>
            <param name="sceneConfig">对应的SceneConfig配置文件</param>
            <returns>创建成功后会返回创建的Scene的实例</returns>
        </member>
        <member name="M:Fantasy.Scene.CreateSubScene(Fantasy.Scene,System.Int32,System.Action{Fantasy.SubScene,Fantasy.Scene})">
            <summary>
            在Scene下面创建一个子Scene，一般用于副本，或者一些特殊的场景。
            </summary>
            <param name="parentScene">主Scene的实例</param>
            <param name="sceneType">SceneType，可以在SceneType里找到，例如:SceneType.Addressable</param>
            <param name="onSubSceneComplete">子Scene创建成功后执行的委托，可以传递null</param>
            <returns></returns>
        </member>
        <member name="M:Fantasy.Scene.AddEntity(Fantasy.Entitas.Entity)">
            <summary>
            添加一个实体到当前Scene下
            </summary>
            <param name="entity">实体实例</param>
        </member>
        <member name="M:Fantasy.Scene.GetEntity(System.Int64)">
            <summary>
            根据RunTimeId查询一个实体
            </summary>
            <param name="runTimeId">实体的RunTimeId</param>
            <returns>返回的实体</returns>
        </member>
        <member name="M:Fantasy.Scene.TryGetEntity(System.Int64,Fantasy.Entitas.Entity@)">
            <summary>
            根据RunTimeId查询一个实体
            </summary>
            <param name="runTimeId">实体的RunTimeId</param>
            <param name="entity">实体实例</param>
            <returns>返回一个bool值来提示是否查找到这个实体</returns>
        </member>
        <member name="M:Fantasy.Scene.GetEntity``1(System.Int64)">
            <summary>
            根据RunTimeId查询一个实体
            </summary>
            <param name="runTimeId">实体的RunTimeId</param>
            <typeparam name="T">要查询实体的泛型类型</typeparam>
            <returns>返回的实体</returns>
        </member>
        <member name="M:Fantasy.Scene.TryGetEntity``1(System.Int64,``0@)">
            <summary>
            根据RunTimeId查询一个实体
            </summary>
            <param name="runTimeId">实体的RunTimeId</param>
            <param name="entity">实体实例</param>
            <typeparam name="T">要查询实体的泛型类型</typeparam>
            <returns>返回一个bool值来提示是否查找到这个实体</returns>
        </member>
        <member name="M:Fantasy.Scene.RemoveEntity(System.Int64)">
            <summary>
            删除一个实体，仅是删除不会指定实体的销毁方法
            </summary>
            <param name="runTimeId">实体的RunTimeId</param>
            <returns>返回一个bool值来提示是否删除了这个实体</returns>
        </member>
        <member name="M:Fantasy.Scene.RemoveEntity(Fantasy.Entitas.Entity)">
            <summary>
            删除一个实体，仅是删除不会指定实体的销毁方法
            </summary>
            <param name="entity">实体实例</param>
            <returns>返回一个bool值来提示是否删除了这个实体</returns>
        </member>
        <member name="M:Fantasy.Scene.GetSession(System.Int64)">
            <summary>
            根据runTimeId获得Session
            </summary>
            <param name="runTimeId"></param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="T:Fantasy.SceneRuntimeMode">
            <summary>
            Scene的运行类型
            </summary>
        </member>
        <member name="F:Fantasy.SceneRuntimeMode.MainThread">
            <summary>
            Scene在主线程中运行.
            </summary>
        </member>
        <member name="F:Fantasy.SceneRuntimeMode.MultiThread">
            <summary>
            Scene在一个独立的线程中运行.
            </summary>
        </member>
        <member name="F:Fantasy.SceneRuntimeMode.ThreadPool">
            <summary>
            Scene在一个根据当前CPU核心数创建的线程池中运行.
            </summary>
        </member>
        <member name="T:Fantasy.SceneRuntimeType">
            <summary>
            代表一个Scene的类型
            </summary>
        </member>
        <member name="F:Fantasy.SceneRuntimeType.None">
            <summary>
            默认
            </summary>
        </member>
        <member name="F:Fantasy.SceneRuntimeType.Root">
            <summary>
            代表一个普通的Scene，一个普通的Scene肯定是是Root的
            </summary>
        </member>
        <member name="F:Fantasy.SceneRuntimeType.SubScene">
            <summary>
            代表一个子场景，子场景肯定是有父场景的
            </summary>
        </member>
        <member name="T:Fantasy.ThreadScheduler">
            <summary>
            线程调度器
            </summary>
        </member>
        <member name="P:Fantasy.ThreadScheduler.MainScheduler">
            <summary>
            主线程调度器
            </summary>
        </member>
        <member name="P:Fantasy.ThreadScheduler.MultiThreadScheduler">
            <summary>
            多线程调度器，根据当前CPU核心数量创建的固定线程。
            </summary>
        </member>
        <member name="P:Fantasy.ThreadScheduler.ThreadPoolScheduler">
            <summary>
            线程池调度器
            </summary>
        </member>
        <member name="T:Fantasy.SubScene">
            <summary>
            代表一个Scene下的子Scene
            </summary>
        </member>
        <member name="P:Fantasy.SubScene.RootScene">
            <summary>
            子Scene的根Scene
            </summary>
        </member>
        <member name="F:Fantasy.SubScene._entities">
            <summary>
            存储当前Scene下管理的实体。
            </summary>
        </member>
        <member name="M:Fantasy.SubScene.Dispose">
            <summary>
            当子Scene销毁时执行
            </summary>
        </member>
        <member name="M:Fantasy.SubScene.AddEntity(Fantasy.Entitas.Entity)">
            <summary>
            添加一个实体到当前Scene下
            </summary>
            <param name="entity">实体实例</param>
        </member>
        <member name="M:Fantasy.SubScene.GetEntity(System.Int64)">
            <summary>
            根据RunTimeId查询一个实体
            </summary>
            <param name="runTimeId">实体的RunTimeId</param>
            <returns>返回的实体</returns>
        </member>
        <member name="M:Fantasy.SubScene.TryGetEntity(System.Int64,Fantasy.Entitas.Entity@)">
            <summary>
            根据RunTimeId查询一个实体
            </summary>
            <param name="runTimeId">实体的RunTimeId</param>
            <param name="entity">实体实例</param>
            <returns>返回一个bool值来提示是否查找到这个实体</returns>
        </member>
        <member name="M:Fantasy.SubScene.GetEntity``1(System.Int64)">
            <summary>
            根据RunTimeId查询一个实体
            </summary>
            <param name="runTimeId">实体的RunTimeId</param>
            <typeparam name="T">要查询实体的泛型类型</typeparam>
            <returns>返回的实体</returns>
        </member>
        <member name="M:Fantasy.SubScene.TryGetEntity``1(System.Int64,``0@)">
            <summary>
            根据RunTimeId查询一个实体
            </summary>
            <param name="runTimeId">实体的RunTimeId</param>
            <param name="entity">实体实例</param>
            <typeparam name="T">要查询实体的泛型类型</typeparam>
            <returns>返回一个bool值来提示是否查找到这个实体</returns>
        </member>
        <member name="M:Fantasy.SubScene.RemoveEntity(System.Int64)">
            <summary>
            删除一个实体，仅是删除不会指定实体的销毁方法
            </summary>
            <param name="runTimeId">实体的RunTimeId</param>
            <returns>返回一个bool值来提示是否删除了这个实体</returns>
        </member>
        <member name="M:Fantasy.SubScene.RemoveEntity(Fantasy.Entitas.Entity)">
            <summary>
            删除一个实体，仅是删除不会指定实体的销毁方法
            </summary>
            <param name="entity">实体实例</param>
            <returns>返回一个bool值来提示是否删除了这个实体</returns>
        </member>
        <member name="M:Fantasy.SubScene.GetSession(System.Int64)">
            <summary>
            根据runTimeId获得Session
            </summary>
            <param name="runTimeId"></param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="T:Fantasy.Serialize.BsonPackHelper">
            <summary>
            BSON帮助方法
            </summary>
        </member>
        <member name="P:Fantasy.Serialize.BsonPackHelper.SerializeName">
            <summary>
            序列化器的名字
            </summary>
        </member>
        <member name="M:Fantasy.Serialize.BsonPackHelper.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Fantasy.Serialize.BsonPackHelper.Deserialize``1(System.Byte[])">
            <summary>
            反序列化
            </summary>
            <param name="bytes"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Fantasy.Serialize.BsonPackHelper.Deserialize``1(Fantasy.Serialize.MemoryStreamBuffer)">
            <summary>
            反序列化
            </summary>
            <param name="buffer"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Fantasy.Serialize.BsonPackHelper.Deserialize(System.Type,System.Byte[])">
            <summary>
            反序列化
            </summary>
            <param name="type"></param>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="M:Fantasy.Serialize.BsonPackHelper.Deserialize(System.Type,Fantasy.Serialize.MemoryStreamBuffer)">
            <summary>
            反序列化
            </summary>
            <param name="type"></param>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:Fantasy.Serialize.BsonPackHelper.Deserialize``1(System.Byte[],System.Int32,System.Int32)">
            <summary>
            反序列化
            </summary>
            <param name="bytes"></param>
            <param name="index"></param>
            <param name="count"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Fantasy.Serialize.BsonPackHelper.Deserialize(System.Type,System.Byte[],System.Int32,System.Int32)">
            <summary>
            反序列化
            </summary>
            <param name="type"></param>
            <param name="bytes"></param>
            <param name="index"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Fantasy.Serialize.BsonPackHelper.Serialize``1(``0,System.Buffers.IBufferWriter{System.Byte})">
            <summary>
            序列化
            </summary>
            <param name="object"></param>
            <param name="buffer"></param>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Fantasy.Serialize.BsonPackHelper.Serialize(System.Object,System.Buffers.IBufferWriter{System.Byte})">
            <summary>
            序列化
            </summary>
            <param name="object"></param>
            <param name="buffer"></param>
        </member>
        <member name="M:Fantasy.Serialize.BsonPackHelper.Serialize(System.Type,System.Object,System.Buffers.IBufferWriter{System.Byte})">
            <summary>
            序列化
            </summary>
            <param name="type"></param>
            <param name="object"></param>
            <param name="buffer"></param>
        </member>
        <member name="M:Fantasy.Serialize.BsonPackHelper.SerializeAndReturnLength(System.Type,System.Object,Fantasy.Serialize.MemoryStreamBuffer)">
            <summary>
            序列化并返回的长度
            </summary>
            <param name="type"></param>
            <param name="object"></param>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:Fantasy.Serialize.BsonPackHelper.Serialize(System.Object)">
            <summary>
            序列化
            </summary>
            <param name="object"></param>
            <returns></returns>
        </member>
        <member name="M:Fantasy.Serialize.BsonPackHelper.Serialize``1(``0)">
            <summary>
            序列化
            </summary>
            <param name="object"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Fantasy.Serialize.BsonPackHelper.Clone``1(``0)">
            <summary>
            克隆
            </summary>
            <param name="t"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Fantasy.Serialize.StructBsonSerialize`1">
            <summary>
            提供对结构体类型进行 BSON 序列化和反序列化的辅助类。
            </summary>
            <typeparam name="TValue">要序列化和反序列化的结构体类型。</typeparam>
        </member>
        <member name="M:Fantasy.Serialize.StructBsonSerialize`1.Serialize(MongoDB.Bson.Serialization.BsonSerializationContext,MongoDB.Bson.Serialization.BsonSerializationArgs,`0)">
            <summary>
            将结构体对象序列化为 BSON 数据。
            </summary>
            <param name="context">序列化上下文。</param>
            <param name="args">序列化参数。</param>
            <param name="value">要序列化的结构体对象。</param>
        </member>
        <member name="M:Fantasy.Serialize.StructBsonSerialize`1.Deserialize(MongoDB.Bson.Serialization.BsonDeserializationContext,MongoDB.Bson.Serialization.BsonDeserializationArgs)">
            <summary>
            将 BSON 数据反序列化为结构体对象。
            </summary>
            <param name="context">反序列化上下文。</param>
            <param name="args">反序列化参数。</param>
            <returns>反序列化得到的结构体对象。</returns>
        </member>
        <member name="P:Fantasy.Serialize.ISerialize.SerializeName">
            <summary>
            序列化器的名字，用于在协议里指定用什么协议序列化使用
            </summary>
        </member>
        <member name="M:Fantasy.Serialize.ISerialize.Deserialize``1(System.Byte[])">
            <summary>
            反序列化
            </summary>
            <param name="bytes"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Fantasy.Serialize.ISerialize.Deserialize``1(Fantasy.Serialize.MemoryStreamBuffer)">
            <summary>
            反序列化
            </summary>
            <param name="buffer"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Fantasy.Serialize.ISerialize.Deserialize(System.Type,System.Byte[])">
            <summary>
            反序列化
            </summary>
            <param name="type"></param>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="M:Fantasy.Serialize.ISerialize.Deserialize(System.Type,Fantasy.Serialize.MemoryStreamBuffer)">
            <summary>
            反序列化
            </summary>
            <param name="type"></param>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:Fantasy.Serialize.ISerialize.Deserialize``1(System.Byte[],System.Int32,System.Int32)">
            <summary>
            反序列化
            </summary>
            <param name="bytes"></param>
            <param name="index"></param>
            <param name="count"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Fantasy.Serialize.ISerialize.Deserialize(System.Type,System.Byte[],System.Int32,System.Int32)">
            <summary>
            反序列化
            </summary>
            <param name="type"></param>
            <param name="bytes"></param>
            <param name="index"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Fantasy.Serialize.ISerialize.Serialize``1(``0,System.Buffers.IBufferWriter{System.Byte})">
            <summary>
            序列化
            </summary>
            <param name="object"></param>
            <param name="buffer"></param>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Fantasy.Serialize.ISerialize.Serialize(System.Object,System.Buffers.IBufferWriter{System.Byte})">
            <summary>
            序列化
            </summary>
            <param name="object"></param>
            <param name="buffer"></param>
        </member>
        <member name="M:Fantasy.Serialize.ISerialize.Serialize(System.Type,System.Object,System.Buffers.IBufferWriter{System.Byte})">
            <summary>
            序列化
            </summary>
            <param name="type"></param>
            <param name="object"></param>
            <param name="buffer"></param>
        </member>
        <member name="M:Fantasy.Serialize.ISerialize.Clone``1(``0)">
            <summary>
            克隆
            </summary>
            <param name="t"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Fantasy.Serialize.IProto">
            <summary>
            代表是一个ProtoBuf协议
            </summary>
        </member>
        <member name="T:Fantasy.Serialize.ProtoBufPackHelper">
            <summary>
            ProtoBufP帮助类，Net平台使用
            </summary>
        </member>
        <member name="P:Fantasy.Serialize.ProtoBufPackHelper.SerializeName">
            <summary>
            序列化器的名字
            </summary>
        </member>
        <member name="M:Fantasy.Serialize.ProtoBufPackHelper.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Fantasy.Serialize.ProtoBufPackHelper.Deserialize``1(System.Byte[])">
            <summary>
            使用ProtoBuf反序列化数据到实例
            </summary>
            <param name="bytes"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Fantasy.Serialize.ProtoBufPackHelper.Deserialize``1(Fantasy.Serialize.MemoryStreamBuffer)">
            <summary>
            使用ProtoBuf反序列化数据到实例
            </summary>
            <param name="buffer"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Fantasy.Serialize.ProtoBufPackHelper.Deserialize(System.Type,System.Byte[])">
            <summary>
            使用ProtoBuf反序列化数据到实例
            </summary>
            <param name="type"></param>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="M:Fantasy.Serialize.ProtoBufPackHelper.Deserialize(System.Type,Fantasy.Serialize.MemoryStreamBuffer)">
            <summary>
            使用ProtoBuf反序列化数据到实例
            </summary>
            <param name="type"></param>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:Fantasy.Serialize.ProtoBufPackHelper.Deserialize``1(System.Byte[],System.Int32,System.Int32)">
            <summary>
            使用ProtoBuf反序列化数据到实例
            </summary>
            <param name="bytes"></param>
            <param name="index"></param>
            <param name="count"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Fantasy.Serialize.ProtoBufPackHelper.Deserialize(System.Type,System.Byte[],System.Int32,System.Int32)">
            <summary>
            使用ProtoBuf反序列化数据到实例
            </summary>
            <param name="type"></param>
            <param name="bytes"></param>
            <param name="index"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Fantasy.Serialize.ProtoBufPackHelper.Serialize``1(``0,System.Buffers.IBufferWriter{System.Byte})">
            <summary>
            使用ProtoBuf序列化某一个实例到IBufferWriter中
            </summary>
            <param name="object"></param>
            <param name="buffer"></param>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Fantasy.Serialize.ProtoBufPackHelper.Serialize(System.Object,System.Buffers.IBufferWriter{System.Byte})">
            <summary>
            使用ProtoBuf序列化某一个实例到IBufferWriter中
            </summary>
            <param name="object"></param>
            <param name="buffer"></param>
        </member>
        <member name="M:Fantasy.Serialize.ProtoBufPackHelper.Serialize(System.Type,System.Object,System.Buffers.IBufferWriter{System.Byte})">
            <summary>
            使用ProtoBuf序列化某一个实例到IBufferWriter中
            </summary>
            <param name="type"></param>
            <param name="object"></param>
            <param name="buffer"></param>
        </member>
        <member name="M:Fantasy.Serialize.ProtoBufPackHelper.Clone``1(``0)">
            <summary>
            克隆
            </summary>
            <param name="t"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Fantasy.Serialize.FantasySerializerType">
            <summary>
            框架内置的序列化器类型
            </summary>
        </member>
        <member name="F:Fantasy.Serialize.FantasySerializerType.ProtoBuf">
            <summary>
            ProtoBuf在SerializerManager的数组下标
            </summary>
        </member>
        <member name="F:Fantasy.Serialize.FantasySerializerType.Bson">
            <summary>
            Bson在SerializerManager的数组下标
            </summary>
        </member>
        <member name="T:Fantasy.Serialize.SerializerManager">
            <summary>
            管理序列化静态方法，主要是优化网络协议时使用。
            </summary>
        </member>
        <member name="M:Fantasy.Serialize.SerializerManager.Initialize">
            <summary>
            初始化方法
            </summary>
        </member>
        <member name="M:Fantasy.Serialize.SerializerManager.Dispose">
            <summary>
            销毁方法
            </summary>
        </member>
        <member name="M:Fantasy.Serialize.SerializerManager.GetSerializer(System.UInt32)">
            <summary>
            根据协议类型获取序列化器
            </summary>
            <param name="opCodeProtocolType"></param>
            <returns></returns>
        </member>
        <member name="M:Fantasy.Serialize.SerializerManager.TryGetSerializer(System.UInt32,Fantasy.Serialize.ISerialize@)">
            <summary>
            获得一个序列化器
            </summary>
            <param name="opCodeProtocolType"></param>
            <param name="serializer"></param>
            <returns></returns>
        </member>
        <member name="T:kcp.KCP">
            <summary>
                https://github.com/skywind3000/kcp
            </summary>
        </member>
        <member name="T:KCP.KcpCallback">
            <summary>
                Kcp callback
            </summary>
            <param name="buffer">KCP output destination</param>
            <param name="length">KCP output size (excluding reserved)</param>
        </member>
        <member name="T:KCP.Kcp">
            <summary>
                Kcp
            </summary>
        </member>
        <member name="F:KCP.Kcp._kcp">
            <summary>
                Kcp
            </summary>
        </member>
        <member name="F:KCP.Kcp._output">
            <summary>
                Output function
            </summary>
        </member>
        <member name="F:KCP.Kcp._buffer">
            <summary>
                Buffer
            </summary>
        </member>
        <member name="F:KCP.Kcp._reserved">
            <summary>
                Reserved overhead
            </summary>
        </member>
        <member name="F:KCP.Kcp._disposed">
            <summary>
                Disposed
            </summary>
        </member>
        <member name="M:KCP.Kcp.#ctor(System.UInt32,KCP.KcpCallback,System.Int32)">
            <summary>
                Structure
            </summary>
            <param name="conv">ConversationId</param>
            <param name="output">Output</param>
            <param name="reserved">Reserved overhead</param>
        </member>
        <member name="P:KCP.Kcp.IsSet">
            <summary>
                Set
            </summary>
        </member>
        <member name="P:KCP.Kcp.ConversationId">
            <summary>
                Conversation id
            </summary>
        </member>
        <member name="P:KCP.Kcp.MaximumTransmissionUnit">
            <summary>
                Maximum transmission unit
            </summary>
        </member>
        <member name="P:KCP.Kcp.MaximumSegmentSize">
            <summary>
                Maximum segment size
            </summary>
        </member>
        <member name="P:KCP.Kcp.State">
            <summary>
                Connection state
            </summary>
        </member>
        <member name="P:KCP.Kcp.SendUna">
            <summary>
                The sequence number of the first unacknowledged packet
            </summary>
        </member>
        <member name="P:KCP.Kcp.SendNext">
            <summary>
                The sequence number for the next packet to be sent
            </summary>
        </member>
        <member name="P:KCP.Kcp.ReceiveNext">
            <summary>
                The sequence number for the next packet expected to be received
            </summary>
        </member>
        <member name="P:KCP.Kcp.SlowStartThreshold">
            <summary>
                Slow start threshold for congestion control
            </summary>
        </member>
        <member name="P:KCP.Kcp.RxRttval">
            <summary>
                Round-trip time variance
            </summary>
        </member>
        <member name="P:KCP.Kcp.RxSrtt">
            <summary>
                Smoothed round-trip time
            </summary>
        </member>
        <member name="P:KCP.Kcp.RxRto">
            <summary>
                Retransmission timeout
            </summary>
        </member>
        <member name="P:KCP.Kcp.RxMinrto">
            <summary>
                Minimum retransmission timeout
            </summary>
        </member>
        <member name="P:KCP.Kcp.SendWindowSize">
            <summary>
                Send window size
            </summary>
        </member>
        <member name="P:KCP.Kcp.ReceiveWindowSize">
            <summary>
                Receive window size
            </summary>
        </member>
        <member name="P:KCP.Kcp.RemoteWindowSize">
            <summary>
                Remote window size
            </summary>
        </member>
        <member name="P:KCP.Kcp.CongestionWindowSize">
            <summary>
                Congestion window size
            </summary>
        </member>
        <member name="P:KCP.Kcp.Probe">
            <summary>
                Probe variable for fast recovery
            </summary>
        </member>
        <member name="P:KCP.Kcp.Current">
            <summary>
                Current timestamp
            </summary>
        </member>
        <member name="P:KCP.Kcp.Interval">
            <summary>
                Flush interval
            </summary>
        </member>
        <member name="P:KCP.Kcp.TimestampFlush">
            <summary>
                Timestamp for the next flush
            </summary>
        </member>
        <member name="P:KCP.Kcp.Transmissions">
            <summary>
                Number of retransmissions
            </summary>
        </member>
        <member name="P:KCP.Kcp.ReceiveBufferCount">
            <summary>
                Number of packets in the receive buffer
            </summary>
        </member>
        <member name="P:KCP.Kcp.ReceiveQueueCount">
            <summary>
                Number of packets in the receive queue
            </summary>
        </member>
        <member name="P:KCP.Kcp.WaitReceiveCount">
            <summary>
                Number of packets wait to receive
            </summary>
        </member>
        <member name="P:KCP.Kcp.SendBufferCount">
            <summary>
                Number of packets in the send buffer
            </summary>
        </member>
        <member name="P:KCP.Kcp.SendQueueCount">
            <summary>
                Number of packets in the send queue
            </summary>
        </member>
        <member name="P:KCP.Kcp.WaitSendCount">
            <summary>
                Number of packets wait to send
            </summary>
        </member>
        <member name="P:KCP.Kcp.NoDelay">
            <summary>
                Whether Nagle's algorithm is disabled
            </summary>
        </member>
        <member name="P:KCP.Kcp.Updated">
            <summary>
                Whether the KCP connection has been updated
            </summary>
        </member>
        <member name="P:KCP.Kcp.TimestampProbe">
            <summary>
                Timestamp for the next probe
            </summary>
        </member>
        <member name="P:KCP.Kcp.ProbeWait">
            <summary>
                Probe wait time
            </summary>
        </member>
        <member name="P:KCP.Kcp.Increment">
            <summary>
                Incremental increase
            </summary>
        </member>
        <member name="P:KCP.Kcp.AckList">
            <summary>
                Pointer to the acknowledge list
            </summary>
        </member>
        <member name="P:KCP.Kcp.AckCount">
            <summary>
                Count of acknowledges
            </summary>
        </member>
        <member name="P:KCP.Kcp.AckBlock">
            <summary>
                Number of acknowledge blocks
            </summary>
        </member>
        <member name="P:KCP.Kcp.Buffer">
            <summary>
                Buffer
            </summary>
        </member>
        <member name="P:KCP.Kcp.FastResend">
            <summary>
                Fast resend trigger count
            </summary>
        </member>
        <member name="P:KCP.Kcp.FastResendLimit">
            <summary>
                Fast resend limit
            </summary>
        </member>
        <member name="P:KCP.Kcp.NoCongestionWindow">
            <summary>
                Whether congestion control is disabled
            </summary>
        </member>
        <member name="P:KCP.Kcp.StreamMode">
            <summary>
                Whether stream mode is enabled
            </summary>
        </member>
        <member name="P:KCP.Kcp.Output">
            <summary>
                Output function pointer
            </summary>
        </member>
        <member name="P:KCP.Kcp.Reserved">
            <summary>
                Reserved overhead
            </summary>
        </member>
        <member name="M:KCP.Kcp.Dispose">
            <summary>
                Dispose
            </summary>
        </member>
        <member name="M:KCP.Kcp.SetOutput(KCP.KcpCallback)">
            <summary>
                Set output
            </summary>
            <param name="output">Output</param>
        </member>
        <member name="M:KCP.Kcp.Finalize">
            <summary>
                Destructure
            </summary>
        </member>
        <member name="M:KCP.Kcp.Send(System.ReadOnlySpan{System.Byte})">
            <summary>
                Send
            </summary>
            <param name="buffer">Buffer</param>
            <returns>Sent bytes</returns>
        </member>
        <member name="M:KCP.Kcp.Send(System.Byte*,System.Int32)">
            <summary>
                Send
            </summary>
            <param name="buffer">Buffer</param>
            <param name="length">Length</param>
            <returns>Sent bytes</returns>
        </member>
        <member name="M:KCP.Kcp.Input(System.ReadOnlySpan{System.Byte})">
            <summary>
                Input
            </summary>
            <param name="buffer">Buffer</param>
            <returns>Input bytes</returns>
        </member>
        <member name="M:KCP.Kcp.Input(System.Byte*,System.Int32)">
            <summary>
                Input
            </summary>
            <param name="buffer">Buffer</param>
            <param name="length">Length</param>
            <returns>Input bytes</returns>
        </member>
        <member name="M:KCP.Kcp.PeekSize">
            <summary>
                Peek size
            </summary>
            <returns>Peeked size</returns>
        </member>
        <member name="M:KCP.Kcp.Receive(System.Span{System.Byte})">
            <summary>
                Receive
            </summary>
            <param name="buffer">Buffer</param>
            <returns>Received bytes</returns>
        </member>
        <member name="M:KCP.Kcp.Receive(System.Byte*,System.Int32)">
            <summary>
                Receive
            </summary>
            <param name="buffer">Buffer</param>
            <param name="length">Length</param>
            <returns>Received bytes</returns>
        </member>
        <member name="M:KCP.Kcp.Update(System.UInt32)">
            <summary>
                Update
            </summary>
            <param name="current">Timestamp</param>
        </member>
        <member name="M:KCP.Kcp.Check(System.UInt32)">
            <summary>
                Check
            </summary>
            <param name="current">Timestamp</param>
            <returns>Next flush timestamp</returns>
        </member>
        <member name="M:KCP.Kcp.Flush">
            <summary>
                Flush
            </summary>
        </member>
        <member name="M:KCP.Kcp.SetMtu(System.Int32)">
            <summary>
                Set maximum transmission unit
            </summary>
            <param name="mtu">Maximum transmission unit</param>
            <returns>Set</returns>
        </member>
        <member name="M:KCP.Kcp.SetInterval(System.Int32)">
            <summary>
                Set flush interval
            </summary>
            <param name="interval">Flush interval</param>
        </member>
        <member name="M:KCP.Kcp.SetNoDelay(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
                Set no delay
            </summary>
            <param name="nodelay">Whether Nagle's algorithm is disabled</param>
            <param name="interval">Flush interval</param>
            <param name="resend">Fast resend trigger count</param>
            <param name="nc">No congestion window</param>
        </member>
        <member name="M:KCP.Kcp.SetWindowSize(System.Int32,System.Int32)">
            <summary>
                Set window size
            </summary>
            <param name="sndwnd">Send window size</param>
            <param name="rcvwnd">Receive window size</param>
        </member>
        <member name="M:KCP.Kcp.SetFastResendLimit(System.Int32)">
            <summary>
                Set fast resend limit
            </summary>
            <param name="fastlimit">Fast resend limit</param>
        </member>
        <member name="M:KCP.Kcp.SetStreamMode(System.Int32)">
            <summary>
                Set whether stream mode is enabled
            </summary>
            <param name="stream">Whether stream mode is enabled</param>
        </member>
        <member name="M:KCP.Kcp.SetMinrto(System.Int32)">
            <summary>
                Set minimum retransmission timeout
            </summary>
            <param name="minrto">Minimum retransmission timeout</param>
        </member>
    </members>
</doc>
